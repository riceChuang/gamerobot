// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_SRNN.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SRNN_GameStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *int32 `protobuf:"varint,1,req,name=Step" json:"Step,omitempty"`
}

func (x *SRNN_GameStep) Reset() {
	*x = SRNN_GameStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_GameStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_GameStep) ProtoMessage() {}

func (x *SRNN_GameStep) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_GameStep.ProtoReflect.Descriptor instead.
func (*SRNN_GameStep) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{0}
}

func (x *SRNN_GameStep) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

type SRNN_QiangZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *int32 `protobuf:"varint,1,req,name=Times" json:"Times,omitempty"`
}

func (x *SRNN_QiangZhuang) Reset() {
	*x = SRNN_QiangZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_QiangZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_QiangZhuang) ProtoMessage() {}

func (x *SRNN_QiangZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_QiangZhuang.ProtoReflect.Descriptor instead.
func (*SRNN_QiangZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{1}
}

func (x *SRNN_QiangZhuang) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

type SRNN_ConfirmZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangUserID *int32          `protobuf:"varint,1,opt,name=ZhuangUserID" json:"ZhuangUserID,omitempty"`
	Times        *int32          `protobuf:"varint,2,opt,name=Times" json:"Times,omitempty"`
	UserBets     []*SRNN_UserBet `protobuf:"bytes,3,rep,name=UserBets" json:"UserBets,omitempty"`
}

func (x *SRNN_ConfirmZhuang) Reset() {
	*x = SRNN_ConfirmZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_ConfirmZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_ConfirmZhuang) ProtoMessage() {}

func (x *SRNN_ConfirmZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_ConfirmZhuang.ProtoReflect.Descriptor instead.
func (*SRNN_ConfirmZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{2}
}

func (x *SRNN_ConfirmZhuang) GetZhuangUserID() int32 {
	if x != nil && x.ZhuangUserID != nil {
		return *x.ZhuangUserID
	}
	return 0
}

func (x *SRNN_ConfirmZhuang) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *SRNN_ConfirmZhuang) GetUserBets() []*SRNN_UserBet {
	if x != nil {
		return x.UserBets
	}
	return nil
}

type SRNN_UserBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Times     *int32 `protobuf:"varint,2,req,name=Times" json:"Times,omitempty"`
	SystemSet *bool  `protobuf:"varint,3,req,name=SystemSet" json:"SystemSet,omitempty"`
}

func (x *SRNN_UserBet) Reset() {
	*x = SRNN_UserBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_UserBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_UserBet) ProtoMessage() {}

func (x *SRNN_UserBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_UserBet.ProtoReflect.Descriptor instead.
func (*SRNN_UserBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{3}
}

func (x *SRNN_UserBet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *SRNN_UserBet) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *SRNN_UserBet) GetSystemSet() bool {
	if x != nil && x.SystemSet != nil {
		return *x.SystemSet
	}
	return false
}

type SRNN_XianJiaBetTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *int32 `protobuf:"varint,1,req,name=Times" json:"Times,omitempty"`
}

func (x *SRNN_XianJiaBetTimes) Reset() {
	*x = SRNN_XianJiaBetTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_XianJiaBetTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_XianJiaBetTimes) ProtoMessage() {}

func (x *SRNN_XianJiaBetTimes) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_XianJiaBetTimes.ProtoReflect.Descriptor instead.
func (*SRNN_XianJiaBetTimes) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{4}
}

func (x *SRNN_XianJiaBetTimes) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

type SRNN_NotifyXianJiaBetTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserBets []*SRNN_UserBet `protobuf:"bytes,1,rep,name=UserBets" json:"UserBets,omitempty"`
}

func (x *SRNN_NotifyXianJiaBetTimes) Reset() {
	*x = SRNN_NotifyXianJiaBetTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_NotifyXianJiaBetTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_NotifyXianJiaBetTimes) ProtoMessage() {}

func (x *SRNN_NotifyXianJiaBetTimes) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_NotifyXianJiaBetTimes.ProtoReflect.Descriptor instead.
func (*SRNN_NotifyXianJiaBetTimes) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{5}
}

func (x *SRNN_NotifyXianJiaBetTimes) GetUserBets() []*SRNN_UserBet {
	if x != nil {
		return x.UserBets
	}
	return nil
}

type SRNN_LastPokerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *PokerCard `protobuf:"bytes,1,req,name=Card" json:"Card,omitempty"`
}

func (x *SRNN_LastPokerCard) Reset() {
	*x = SRNN_LastPokerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_LastPokerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_LastPokerCard) ProtoMessage() {}

func (x *SRNN_LastPokerCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_LastPokerCard.ProtoReflect.Descriptor instead.
func (*SRNN_LastPokerCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{6}
}

func (x *SRNN_LastPokerCard) GetCard() *PokerCard {
	if x != nil {
		return x.Card
	}
	return nil
}

type SRNN_UserCardGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardsThree []*PokerCard `protobuf:"bytes,1,rep,name=CardsThree" json:"CardsThree,omitempty"`
	CardsTwo   []*PokerCard `protobuf:"bytes,2,rep,name=CardsTwo" json:"CardsTwo,omitempty"`
}

func (x *SRNN_UserCardGroup) Reset() {
	*x = SRNN_UserCardGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_UserCardGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_UserCardGroup) ProtoMessage() {}

func (x *SRNN_UserCardGroup) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_UserCardGroup.ProtoReflect.Descriptor instead.
func (*SRNN_UserCardGroup) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{7}
}

func (x *SRNN_UserCardGroup) GetCardsThree() []*PokerCard {
	if x != nil {
		return x.CardsThree
	}
	return nil
}

func (x *SRNN_UserCardGroup) GetCardsTwo() []*PokerCard {
	if x != nil {
		return x.CardsTwo
	}
	return nil
}

type SRNN_GameRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangRet *SRNN_UserRet   `protobuf:"bytes,1,req,name=ZhuangRet" json:"ZhuangRet,omitempty"`
	UserRet   []*SRNN_UserRet `protobuf:"bytes,2,rep,name=UserRet" json:"UserRet,omitempty"`
}

func (x *SRNN_GameRet) Reset() {
	*x = SRNN_GameRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_GameRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_GameRet) ProtoMessage() {}

func (x *SRNN_GameRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_GameRet.ProtoReflect.Descriptor instead.
func (*SRNN_GameRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{8}
}

func (x *SRNN_GameRet) GetZhuangRet() *SRNN_UserRet {
	if x != nil {
		return x.ZhuangRet
	}
	return nil
}

func (x *SRNN_GameRet) GetUserRet() []*SRNN_UserRet {
	if x != nil {
		return x.UserRet
	}
	return nil
}

type SRNN_UserRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User            *GameUser    `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
	WinLose         *int64       `protobuf:"varint,2,req,name=WinLose" json:"WinLose,omitempty"`
	NiuNiuRet       *int32       `protobuf:"varint,3,req,name=NiuNiuRet" json:"NiuNiuRet,omitempty"`
	NiuNiuRetNumber *int32       `protobuf:"varint,4,req,name=NiuNiuRetNumber" json:"NiuNiuRetNumber,omitempty"`
	NiuNiuBetTimes  *int32       `protobuf:"varint,5,req,name=NiuNiuBetTimes" json:"NiuNiuBetTimes,omitempty"`
	CardGroup       []*PokerCard `protobuf:"bytes,6,rep,name=CardGroup" json:"CardGroup,omitempty"`
}

func (x *SRNN_UserRet) Reset() {
	*x = SRNN_UserRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_UserRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_UserRet) ProtoMessage() {}

func (x *SRNN_UserRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_UserRet.ProtoReflect.Descriptor instead.
func (*SRNN_UserRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{9}
}

func (x *SRNN_UserRet) GetUser() *GameUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SRNN_UserRet) GetWinLose() int64 {
	if x != nil && x.WinLose != nil {
		return *x.WinLose
	}
	return 0
}

func (x *SRNN_UserRet) GetNiuNiuRet() int32 {
	if x != nil && x.NiuNiuRet != nil {
		return *x.NiuNiuRet
	}
	return 0
}

func (x *SRNN_UserRet) GetNiuNiuRetNumber() int32 {
	if x != nil && x.NiuNiuRetNumber != nil {
		return *x.NiuNiuRetNumber
	}
	return 0
}

func (x *SRNN_UserRet) GetNiuNiuBetTimes() int32 {
	if x != nil && x.NiuNiuBetTimes != nil {
		return *x.NiuNiuBetTimes
	}
	return 0
}

func (x *SRNN_UserRet) GetCardGroup() []*PokerCard {
	if x != nil {
		return x.CardGroup
	}
	return nil
}

type SRNN_GameSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangBetTimes     []int32 `protobuf:"varint,1,rep,name=ZhuangBetTimes" json:"ZhuangBetTimes,omitempty"`
	XianBetTimes       []int32 `protobuf:"varint,2,rep,name=XianBetTimes" json:"XianBetTimes,omitempty"`
	QiangZhuangTimeout *int32  `protobuf:"varint,3,req,name=QiangZhuangTimeout" json:"QiangZhuangTimeout,omitempty"`
	XianBetTimeout     *int32  `protobuf:"varint,4,req,name=XianBetTimeout" json:"XianBetTimeout,omitempty"`
	CardGroupTimeout   *int32  `protobuf:"varint,5,req,name=CardGroupTimeout" json:"CardGroupTimeout,omitempty"`
	BaseScore          *int32  `protobuf:"varint,6,req,name=BaseScore" json:"BaseScore,omitempty"`
	TableNo            *int32  `protobuf:"varint,7,req,name=TableNo" json:"TableNo,omitempty"`
	GameID             *int32  `protobuf:"varint,8,req,name=GameID" json:"GameID,omitempty"`
	ReadyTimeout       *int32  `protobuf:"varint,9,req,name=ReadyTimeout" json:"ReadyTimeout,omitempty"`
}

func (x *SRNN_GameSetting) Reset() {
	*x = SRNN_GameSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_GameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_GameSetting) ProtoMessage() {}

func (x *SRNN_GameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_GameSetting.ProtoReflect.Descriptor instead.
func (*SRNN_GameSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{10}
}

func (x *SRNN_GameSetting) GetZhuangBetTimes() []int32 {
	if x != nil {
		return x.ZhuangBetTimes
	}
	return nil
}

func (x *SRNN_GameSetting) GetXianBetTimes() []int32 {
	if x != nil {
		return x.XianBetTimes
	}
	return nil
}

func (x *SRNN_GameSetting) GetQiangZhuangTimeout() int32 {
	if x != nil && x.QiangZhuangTimeout != nil {
		return *x.QiangZhuangTimeout
	}
	return 0
}

func (x *SRNN_GameSetting) GetXianBetTimeout() int32 {
	if x != nil && x.XianBetTimeout != nil {
		return *x.XianBetTimeout
	}
	return 0
}

func (x *SRNN_GameSetting) GetCardGroupTimeout() int32 {
	if x != nil && x.CardGroupTimeout != nil {
		return *x.CardGroupTimeout
	}
	return 0
}

func (x *SRNN_GameSetting) GetBaseScore() int32 {
	if x != nil && x.BaseScore != nil {
		return *x.BaseScore
	}
	return 0
}

func (x *SRNN_GameSetting) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *SRNN_GameSetting) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *SRNN_GameSetting) GetReadyTimeout() int32 {
	if x != nil && x.ReadyTimeout != nil {
		return *x.ReadyTimeout
	}
	return 0
}

type SRNN_GameScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStep           *int32                      `protobuf:"varint,1,req,name=GameStep" json:"GameStep,omitempty"`
	UserPoker          *UserPoker                  `protobuf:"bytes,2,opt,name=UserPoker" json:"UserPoker,omitempty"`
	ZhuangInfo         *SRNN_ConfirmZhuang         `protobuf:"bytes,3,opt,name=ZhuangInfo" json:"ZhuangInfo,omitempty"`
	XianInfo           *SRNN_NotifyXianJiaBetTimes `protobuf:"bytes,4,opt,name=XianInfo" json:"XianInfo,omitempty"`
	ElapsedSeconds     *int32                      `protobuf:"varint,5,opt,name=ElapsedSeconds" json:"ElapsedSeconds,omitempty"`
	GameRet            *SRNN_GameRet               `protobuf:"bytes,6,opt,name=GameRet" json:"GameRet,omitempty"`
	FinishedGroupUsers []int32                     `protobuf:"varint,7,rep,name=FinishedGroupUsers" json:"FinishedGroupUsers,omitempty"`
	UserBetInfo        *SRNN_UserBetInfo           `protobuf:"bytes,8,opt,name=UserBetInfo" json:"UserBetInfo,omitempty"`
}

func (x *SRNN_GameScene) Reset() {
	*x = SRNN_GameScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_GameScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_GameScene) ProtoMessage() {}

func (x *SRNN_GameScene) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_GameScene.ProtoReflect.Descriptor instead.
func (*SRNN_GameScene) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{11}
}

func (x *SRNN_GameScene) GetGameStep() int32 {
	if x != nil && x.GameStep != nil {
		return *x.GameStep
	}
	return 0
}

func (x *SRNN_GameScene) GetUserPoker() *UserPoker {
	if x != nil {
		return x.UserPoker
	}
	return nil
}

func (x *SRNN_GameScene) GetZhuangInfo() *SRNN_ConfirmZhuang {
	if x != nil {
		return x.ZhuangInfo
	}
	return nil
}

func (x *SRNN_GameScene) GetXianInfo() *SRNN_NotifyXianJiaBetTimes {
	if x != nil {
		return x.XianInfo
	}
	return nil
}

func (x *SRNN_GameScene) GetElapsedSeconds() int32 {
	if x != nil && x.ElapsedSeconds != nil {
		return *x.ElapsedSeconds
	}
	return 0
}

func (x *SRNN_GameScene) GetGameRet() *SRNN_GameRet {
	if x != nil {
		return x.GameRet
	}
	return nil
}

func (x *SRNN_GameScene) GetFinishedGroupUsers() []int32 {
	if x != nil {
		return x.FinishedGroupUsers
	}
	return nil
}

func (x *SRNN_GameScene) GetUserBetInfo() *SRNN_UserBetInfo {
	if x != nil {
		return x.UserBetInfo
	}
	return nil
}

type SRNN_NotifyUserGroupFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (x *SRNN_NotifyUserGroupFinish) Reset() {
	*x = SRNN_NotifyUserGroupFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_NotifyUserGroupFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_NotifyUserGroupFinish) ProtoMessage() {}

func (x *SRNN_NotifyUserGroupFinish) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_NotifyUserGroupFinish.ProtoReflect.Descriptor instead.
func (*SRNN_NotifyUserGroupFinish) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{12}
}

func (x *SRNN_NotifyUserGroupFinish) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

type SRNN_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangBetTimes []int32 `protobuf:"varint,1,rep,name=ZhuangBetTimes" json:"ZhuangBetTimes,omitempty"`
	XianBetTimes   []int32 `protobuf:"varint,2,rep,name=XianBetTimes" json:"XianBetTimes,omitempty"`
}

func (x *SRNN_UserBetInfo) Reset() {
	*x = SRNN_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_SRNN_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRNN_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRNN_UserBetInfo) ProtoMessage() {}

func (x *SRNN_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_SRNN_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRNN_UserBetInfo.ProtoReflect.Descriptor instead.
func (*SRNN_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_SRNN_proto_rawDescGZIP(), []int{13}
}

func (x *SRNN_UserBetInfo) GetZhuangBetTimes() []int32 {
	if x != nil {
		return x.ZhuangBetTimes
	}
	return nil
}

func (x *SRNN_UserBetInfo) GetXianBetTimes() []int32 {
	if x != nil {
		return x.XianBetTimes
	}
	return nil
}

var File_GameMsg_SRNN_proto protoreflect.FileDescriptor

var file_GameMsg_SRNN_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x52, 0x4e, 0x4e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a,
	0x0d, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74,
	0x65, 0x70, 0x22, 0x28, 0x0a, 0x10, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x51, 0x69, 0x61, 0x6e, 0x67,
	0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a,
	0x12, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x5a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x52, 0x4e, 0x4e, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x73, 0x22, 0x5a, 0x0a, 0x0c, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x22, 0x2c, 0x0a,
	0x14, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x58, 0x69, 0x61, 0x6e, 0x4a, 0x69, 0x61, 0x42, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x1a, 0x53,
	0x52, 0x4e, 0x4e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x58, 0x69, 0x61, 0x6e, 0x4a, 0x69,
	0x61, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x73, 0x22, 0x3d, 0x0a,
	0x12, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x7a, 0x0a, 0x12,
	0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x54, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x77, 0x6f, 0x22, 0x76, 0x0a, 0x0c, 0x53, 0x52, 0x4e, 0x4e,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x5a, 0x68, 0x75, 0x61,
	0x6e, 0x67, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x52, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x12, 0x30,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x52, 0x4e, 0x4e, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74,
	0x22, 0xf3, 0x01, 0x0a, 0x0c, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x74, 0x12, 0x26, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e,
	0x4c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x4c,
	0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x52, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x52, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x52, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x4e, 0x69, 0x75, 0x4e,
	0x69, 0x75, 0x52, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4e,
	0x69, 0x75, 0x4e, 0x69, 0x75, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x42, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x43, 0x61, 0x72,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xd6, 0x02, 0x0a, 0x10, 0x53, 0x52, 0x4e, 0x4e, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0e, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x42, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x58, 0x69, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x58, 0x69, 0x61, 0x6e, 0x42,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x51, 0x69, 0x61, 0x6e, 0x67,
	0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x12, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x58, 0x69, 0x61, 0x6e, 0x42,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0e, 0x58, 0x69, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xa7, 0x03, 0x0a, 0x0e, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x31,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x52, 0x0a, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x40, 0x0a, 0x08, 0x58, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x52, 0x4e,
	0x4e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x58, 0x69, 0x61, 0x6e, 0x4a, 0x69, 0x61, 0x42,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x08, 0x58, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x45, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x74, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x52, 0x4e, 0x4e,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x1a, 0x53, 0x52, 0x4e,
	0x4e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x5e, 0x0a, 0x10, 0x53, 0x52, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x42, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x58,
	0x69, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0c, 0x58, 0x69, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_SRNN_proto_rawDescOnce sync.Once
	file_GameMsg_SRNN_proto_rawDescData = file_GameMsg_SRNN_proto_rawDesc
)

func file_GameMsg_SRNN_proto_rawDescGZIP() []byte {
	file_GameMsg_SRNN_proto_rawDescOnce.Do(func() {
		file_GameMsg_SRNN_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_SRNN_proto_rawDescData)
	})
	return file_GameMsg_SRNN_proto_rawDescData
}

var file_GameMsg_SRNN_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_GameMsg_SRNN_proto_goTypes = []interface{}{
	(*SRNN_GameStep)(nil),              // 0: netproto.SRNN_GameStep
	(*SRNN_QiangZhuang)(nil),           // 1: netproto.SRNN_QiangZhuang
	(*SRNN_ConfirmZhuang)(nil),         // 2: netproto.SRNN_ConfirmZhuang
	(*SRNN_UserBet)(nil),               // 3: netproto.SRNN_UserBet
	(*SRNN_XianJiaBetTimes)(nil),       // 4: netproto.SRNN_XianJiaBetTimes
	(*SRNN_NotifyXianJiaBetTimes)(nil), // 5: netproto.SRNN_NotifyXianJiaBetTimes
	(*SRNN_LastPokerCard)(nil),         // 6: netproto.SRNN_LastPokerCard
	(*SRNN_UserCardGroup)(nil),         // 7: netproto.SRNN_UserCardGroup
	(*SRNN_GameRet)(nil),               // 8: netproto.SRNN_GameRet
	(*SRNN_UserRet)(nil),               // 9: netproto.SRNN_UserRet
	(*SRNN_GameSetting)(nil),           // 10: netproto.SRNN_GameSetting
	(*SRNN_GameScene)(nil),             // 11: netproto.SRNN_GameScene
	(*SRNN_NotifyUserGroupFinish)(nil), // 12: netproto.SRNN_NotifyUserGroupFinish
	(*SRNN_UserBetInfo)(nil),           // 13: netproto.SRNN_UserBetInfo
	(*PokerCard)(nil),                  // 14: netproto.PokerCard
	(*GameUser)(nil),                   // 15: netproto.GameUser
	(*UserPoker)(nil),                  // 16: netproto.UserPoker
}
var file_GameMsg_SRNN_proto_depIdxs = []int32{
	3,  // 0: netproto.SRNN_ConfirmZhuang.UserBets:type_name -> netproto.SRNN_UserBet
	3,  // 1: netproto.SRNN_NotifyXianJiaBetTimes.UserBets:type_name -> netproto.SRNN_UserBet
	14, // 2: netproto.SRNN_LastPokerCard.Card:type_name -> netproto.PokerCard
	14, // 3: netproto.SRNN_UserCardGroup.CardsThree:type_name -> netproto.PokerCard
	14, // 4: netproto.SRNN_UserCardGroup.CardsTwo:type_name -> netproto.PokerCard
	9,  // 5: netproto.SRNN_GameRet.ZhuangRet:type_name -> netproto.SRNN_UserRet
	9,  // 6: netproto.SRNN_GameRet.UserRet:type_name -> netproto.SRNN_UserRet
	15, // 7: netproto.SRNN_UserRet.User:type_name -> netproto.GameUser
	14, // 8: netproto.SRNN_UserRet.CardGroup:type_name -> netproto.PokerCard
	16, // 9: netproto.SRNN_GameScene.UserPoker:type_name -> netproto.UserPoker
	2,  // 10: netproto.SRNN_GameScene.ZhuangInfo:type_name -> netproto.SRNN_ConfirmZhuang
	5,  // 11: netproto.SRNN_GameScene.XianInfo:type_name -> netproto.SRNN_NotifyXianJiaBetTimes
	8,  // 12: netproto.SRNN_GameScene.GameRet:type_name -> netproto.SRNN_GameRet
	13, // 13: netproto.SRNN_GameScene.UserBetInfo:type_name -> netproto.SRNN_UserBetInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_GameMsg_SRNN_proto_init() }
func file_GameMsg_SRNN_proto_init() {
	if File_GameMsg_SRNN_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_SRNN_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_GameStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_QiangZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_ConfirmZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_UserBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_XianJiaBetTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_NotifyXianJiaBetTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_LastPokerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_UserCardGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_GameRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_UserRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_GameSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_GameScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_NotifyUserGroupFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_SRNN_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRNN_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_SRNN_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_SRNN_proto_goTypes,
		DependencyIndexes: file_GameMsg_SRNN_proto_depIdxs,
		MessageInfos:      file_GameMsg_SRNN_proto_msgTypes,
	}.Build()
	File_GameMsg_SRNN_proto = out.File
	file_GameMsg_SRNN_proto_rawDesc = nil
	file_GameMsg_SRNN_proto_goTypes = nil
	file_GameMsg_SRNN_proto_depIdxs = nil
}
