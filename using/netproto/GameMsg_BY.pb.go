// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_BY.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//設置消息
type BY_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameTime             *int32                     `protobuf:"varint,1,req,name=FrameTime" json:"FrameTime,omitempty"` //每帧间隔时间，单位毫秒
	BoomSetting           []*BY_BoomSetting          `protobuf:"bytes,2,rep,name=BoomSetting" json:"BoomSetting,omitempty"`
	IceSetting            *BY_IceSetting             `protobuf:"bytes,3,req,name=IceSetting" json:"IceSetting,omitempty"`
	MaxBoom               *int32                     `protobuf:"varint,4,req,name=MaxBoom" json:"MaxBoom,omitempty"`
	BackgroundList        *string                    `protobuf:"bytes,5,req,name=BackgroundList" json:"BackgroundList,omitempty"`                //背景清單
	FishSetting           []*BY_FishSetting          `protobuf:"bytes,6,rep,name=FishSetting" json:"FishSetting,omitempty"`                      //魚的消息
	BaseScore             *int32                     `protobuf:"varint,7,req,name=BaseScore" json:"BaseScore,omitempty"`                         //底分
	ZuantoulongxiaMaxBoom *int32                     `protobuf:"varint,8,req,name=ZuantoulongxiaMaxBoom" json:"ZuantoulongxiaMaxBoom,omitempty"` //钻头龙虾最多炸彈
	ZlxReceiveSpeed       *int32                     `protobuf:"varint,9,req,name=ZlxReceiveSpeed" json:"ZlxReceiveSpeed,omitempty"`             //磚頭龍蝦砲彈接收速度(ms)
	Competition           *BY_GameCompetitionSetting `protobuf:"bytes,10,opt,name=Competition" json:"Competition,omitempty"`                     //比賽活動設定
	GameType              *int32                     `protobuf:"varint,11,opt,name=GameType" json:"GameType,omitempty"`                          //遊戲類型: 0真金 1比賽 3休閒
}

func (x *BY_Setting) Reset() {
	*x = BY_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_Setting) ProtoMessage() {}

func (x *BY_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_Setting.ProtoReflect.Descriptor instead.
func (*BY_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{0}
}

func (x *BY_Setting) GetFrameTime() int32 {
	if x != nil && x.FrameTime != nil {
		return *x.FrameTime
	}
	return 0
}

func (x *BY_Setting) GetBoomSetting() []*BY_BoomSetting {
	if x != nil {
		return x.BoomSetting
	}
	return nil
}

func (x *BY_Setting) GetIceSetting() *BY_IceSetting {
	if x != nil {
		return x.IceSetting
	}
	return nil
}

func (x *BY_Setting) GetMaxBoom() int32 {
	if x != nil && x.MaxBoom != nil {
		return *x.MaxBoom
	}
	return 0
}

func (x *BY_Setting) GetBackgroundList() string {
	if x != nil && x.BackgroundList != nil {
		return *x.BackgroundList
	}
	return ""
}

func (x *BY_Setting) GetFishSetting() []*BY_FishSetting {
	if x != nil {
		return x.FishSetting
	}
	return nil
}

func (x *BY_Setting) GetBaseScore() int32 {
	if x != nil && x.BaseScore != nil {
		return *x.BaseScore
	}
	return 0
}

func (x *BY_Setting) GetZuantoulongxiaMaxBoom() int32 {
	if x != nil && x.ZuantoulongxiaMaxBoom != nil {
		return *x.ZuantoulongxiaMaxBoom
	}
	return 0
}

func (x *BY_Setting) GetZlxReceiveSpeed() int32 {
	if x != nil && x.ZlxReceiveSpeed != nil {
		return *x.ZlxReceiveSpeed
	}
	return 0
}

func (x *BY_Setting) GetCompetition() *BY_GameCompetitionSetting {
	if x != nil {
		return x.Competition
	}
	return nil
}

func (x *BY_Setting) GetGameType() int32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

//比賽活動設定
type BY_GameCompetitionSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            *int32 `protobuf:"varint,1,opt,name=Time" json:"Time,omitempty"`                       //剩餘遊戲時間(秒)
	OnGamingRecover *int32 `protobuf:"varint,2,opt,name=OnGamingRecover" json:"OnGamingRecover,omitempty"` //0不在比賽中. 1比賽中斷線重連
}

func (x *BY_GameCompetitionSetting) Reset() {
	*x = BY_GameCompetitionSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_GameCompetitionSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_GameCompetitionSetting) ProtoMessage() {}

func (x *BY_GameCompetitionSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_GameCompetitionSetting.ProtoReflect.Descriptor instead.
func (*BY_GameCompetitionSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{1}
}

func (x *BY_GameCompetitionSetting) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *BY_GameCompetitionSetting) GetOnGamingRecover() int32 {
	if x != nil && x.OnGamingRecover != nil {
		return *x.OnGamingRecover
	}
	return 0
}

//比賽活動結束訊息
type BY_GameCompetitionEndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Score  *int32 `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"` //分數
}

func (x *BY_GameCompetitionEndMsg) Reset() {
	*x = BY_GameCompetitionEndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_GameCompetitionEndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_GameCompetitionEndMsg) ProtoMessage() {}

func (x *BY_GameCompetitionEndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_GameCompetitionEndMsg.ProtoReflect.Descriptor instead.
func (*BY_GameCompetitionEndMsg) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{2}
}

func (x *BY_GameCompetitionEndMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BY_GameCompetitionEndMsg) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

//踢出房提示訊息
type BY_LeaveMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipMessage *string `protobuf:"bytes,1,req,name=TipMessage" json:"TipMessage,omitempty"` //訊息
	Time       *int32  `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`            //時間
}

func (x *BY_LeaveMsg) Reset() {
	*x = BY_LeaveMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_LeaveMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_LeaveMsg) ProtoMessage() {}

func (x *BY_LeaveMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_LeaveMsg.ProtoReflect.Descriptor instead.
func (*BY_LeaveMsg) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{3}
}

func (x *BY_LeaveMsg) GetTipMessage() string {
	if x != nil && x.TipMessage != nil {
		return *x.TipMessage
	}
	return ""
}

func (x *BY_LeaveMsg) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//公告獲得魚
type BY_NotifyFishMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipMessage *string `protobuf:"bytes,1,req,name=TipMessage" json:"TipMessage,omitempty"` //訊息
}

func (x *BY_NotifyFishMsg) Reset() {
	*x = BY_NotifyFishMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_NotifyFishMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_NotifyFishMsg) ProtoMessage() {}

func (x *BY_NotifyFishMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_NotifyFishMsg.ProtoReflect.Descriptor instead.
func (*BY_NotifyFishMsg) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{4}
}

func (x *BY_NotifyFishMsg) GetTipMessage() string {
	if x != nil && x.TipMessage != nil {
		return *x.TipMessage
	}
	return ""
}

//炮彈设置消息
type BY_BoomSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoomNumber    *int32   `protobuf:"varint,1,req,name=BoomNumber" json:"BoomNumber,omitempty"`        //炮彈編號
	BoomName      *string  `protobuf:"bytes,2,req,name=BoomName" json:"BoomName,omitempty"`             //炮彈名稱
	BoomUIType    *int32   `protobuf:"varint,3,req,name=BoomUIType" json:"BoomUIType,omitempty"`        //砲彈UI類型
	ShootInterval *float32 `protobuf:"fixed32,4,req,name=ShootInterval" json:"ShootInterval,omitempty"` //射击间隔
	BoomSpeed     *float32 `protobuf:"fixed32,5,req,name=BoomSpeed" json:"BoomSpeed,omitempty"`         //子弹速度
	BoomType      *int32   `protobuf:"varint,6,req,name=BoomType" json:"BoomType,omitempty"`            //砲彈類型 1.基本 2.VIP
	BoomRate      *int32   `protobuf:"varint,7,req,name=BoomRate" json:"BoomRate,omitempty"`            //倍率
	Rebound       *int32   `protobuf:"varint,8,req,name=Rebound" json:"Rebound,omitempty"`              //反彈次數
}

func (x *BY_BoomSetting) Reset() {
	*x = BY_BoomSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_BoomSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_BoomSetting) ProtoMessage() {}

func (x *BY_BoomSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_BoomSetting.ProtoReflect.Descriptor instead.
func (*BY_BoomSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{5}
}

func (x *BY_BoomSetting) GetBoomNumber() int32 {
	if x != nil && x.BoomNumber != nil {
		return *x.BoomNumber
	}
	return 0
}

func (x *BY_BoomSetting) GetBoomName() string {
	if x != nil && x.BoomName != nil {
		return *x.BoomName
	}
	return ""
}

func (x *BY_BoomSetting) GetBoomUIType() int32 {
	if x != nil && x.BoomUIType != nil {
		return *x.BoomUIType
	}
	return 0
}

func (x *BY_BoomSetting) GetShootInterval() float32 {
	if x != nil && x.ShootInterval != nil {
		return *x.ShootInterval
	}
	return 0
}

func (x *BY_BoomSetting) GetBoomSpeed() float32 {
	if x != nil && x.BoomSpeed != nil {
		return *x.BoomSpeed
	}
	return 0
}

func (x *BY_BoomSetting) GetBoomType() int32 {
	if x != nil && x.BoomType != nil {
		return *x.BoomType
	}
	return 0
}

func (x *BY_BoomSetting) GetBoomRate() int32 {
	if x != nil && x.BoomRate != nil {
		return *x.BoomRate
	}
	return 0
}

func (x *BY_BoomSetting) GetRebound() int32 {
	if x != nil && x.Rebound != nil {
		return *x.Rebound
	}
	return 0
}

//魚設置消息
type BY_FishSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId     *int32   `protobuf:"varint,1,req,name=FishId" json:"FishId,omitempty"`          //魚的編號
	Reward     []int32  `protobuf:"varint,2,rep,name=Reward" json:"Reward,omitempty"`          //鱼倍率
	FishType   *int32   `protobuf:"varint,3,req,name=FishType" json:"FishType,omitempty"`      //鱼类型
	SPBoomArea *float32 `protobuf:"fixed32,4,opt,name=SPBoomArea" json:"SPBoomArea,omitempty"` //爆炸半徑 -1表示不使用. 0全部
}

func (x *BY_FishSetting) Reset() {
	*x = BY_FishSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_FishSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_FishSetting) ProtoMessage() {}

func (x *BY_FishSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_FishSetting.ProtoReflect.Descriptor instead.
func (*BY_FishSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{6}
}

func (x *BY_FishSetting) GetFishId() int32 {
	if x != nil && x.FishId != nil {
		return *x.FishId
	}
	return 0
}

func (x *BY_FishSetting) GetReward() []int32 {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *BY_FishSetting) GetFishType() int32 {
	if x != nil && x.FishType != nil {
		return *x.FishType
	}
	return 0
}

func (x *BY_FishSetting) GetSPBoomArea() float32 {
	if x != nil && x.SPBoomArea != nil {
		return *x.SPBoomArea
	}
	return 0
}

//冰凍設置消息
type BY_IceSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IceNumber    *int32  `protobuf:"varint,1,req,name=IceNumber" json:"IceNumber,omitempty"`       //冰凍編號
	IceName      *string `protobuf:"bytes,2,req,name=IceName" json:"IceName,omitempty"`            //冰凍名稱
	IceUIType    *int32  `protobuf:"varint,3,req,name=IceUIType" json:"IceUIType,omitempty"`       //冰凍UI類型
	IceTime      *int32  `protobuf:"varint,4,req,name=IceTime" json:"IceTime,omitempty"`           //冰冻时间
	IceResetTime *int32  `protobuf:"varint,5,req,name=IceResetTime" json:"IceResetTime,omitempty"` //冰冻冷却时间
	IceMoney     *int32  `protobuf:"varint,6,req,name=IceMoney" json:"IceMoney,omitempty"`         //使用金幣
}

func (x *BY_IceSetting) Reset() {
	*x = BY_IceSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_IceSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_IceSetting) ProtoMessage() {}

func (x *BY_IceSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_IceSetting.ProtoReflect.Descriptor instead.
func (*BY_IceSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{7}
}

func (x *BY_IceSetting) GetIceNumber() int32 {
	if x != nil && x.IceNumber != nil {
		return *x.IceNumber
	}
	return 0
}

func (x *BY_IceSetting) GetIceName() string {
	if x != nil && x.IceName != nil {
		return *x.IceName
	}
	return ""
}

func (x *BY_IceSetting) GetIceUIType() int32 {
	if x != nil && x.IceUIType != nil {
		return *x.IceUIType
	}
	return 0
}

func (x *BY_IceSetting) GetIceTime() int32 {
	if x != nil && x.IceTime != nil {
		return *x.IceTime
	}
	return 0
}

func (x *BY_IceSetting) GetIceResetTime() int32 {
	if x != nil && x.IceResetTime != nil {
		return *x.IceResetTime
	}
	return 0
}

func (x *BY_IceSetting) GetIceMoney() int32 {
	if x != nil && x.IceMoney != nil {
		return *x.IceMoney
	}
	return 0
}

//位置信息
type BY_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"` //坐标系x的值
	Y *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"` //坐标系y的值
}

func (x *BY_Position) Reset() {
	*x = BY_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_Position) ProtoMessage() {}

func (x *BY_Position) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_Position.ProtoReflect.Descriptor instead.
func (*BY_Position) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{8}
}

func (x *BY_Position) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *BY_Position) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

//用户发射一颗炮弹C2S
type BY_ShootC2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *BY_Position `protobuf:"bytes,1,req,name=Pos" json:"Pos,omitempty"`        //炮弹发射的信息
	FishID *int32       `protobuf:"varint,2,opt,name=FishID" json:"FishID,omitempty"` //锁定的鱼ID
}

func (x *BY_ShootC2S) Reset() {
	*x = BY_ShootC2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_ShootC2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_ShootC2S) ProtoMessage() {}

func (x *BY_ShootC2S) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_ShootC2S.ProtoReflect.Descriptor instead.
func (*BY_ShootC2S) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{9}
}

func (x *BY_ShootC2S) GetPos() *BY_Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *BY_ShootC2S) GetFishID() int32 {
	if x != nil && x.FishID != nil {
		return *x.FishID
	}
	return 0
}

//用户发射一颗炮弹S2C
type BY_ShootS2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos        *BY_Position `protobuf:"bytes,1,req,name=Pos" json:"Pos,omitempty"`                //炮弹发射的信息
	UserID     *int32       `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`         //用户ID
	BoomID     *int32       `protobuf:"varint,3,req,name=BoomID" json:"BoomID,omitempty"`         //炮弹ID
	FishID     *int32       `protobuf:"varint,4,opt,name=FishID" json:"FishID,omitempty"`         //锁定的鱼ID
	IsRobot    *bool        `protobuf:"varint,5,opt,name=IsRobot" json:"IsRobot,omitempty"`       //是否是机器人，true为机器人
	BoomNumber *int32       `protobuf:"varint,6,req,name=BoomNumber" json:"BoomNumber,omitempty"` //炮弹編號
	BoomType   *int32       `protobuf:"varint,7,opt,name=BoomType" json:"BoomType,omitempty"`
}

func (x *BY_ShootS2C) Reset() {
	*x = BY_ShootS2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_ShootS2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_ShootS2C) ProtoMessage() {}

func (x *BY_ShootS2C) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_ShootS2C.ProtoReflect.Descriptor instead.
func (*BY_ShootS2C) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{10}
}

func (x *BY_ShootS2C) GetPos() *BY_Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *BY_ShootS2C) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BY_ShootS2C) GetBoomID() int32 {
	if x != nil && x.BoomID != nil {
		return *x.BoomID
	}
	return 0
}

func (x *BY_ShootS2C) GetFishID() int32 {
	if x != nil && x.FishID != nil {
		return *x.FishID
	}
	return 0
}

func (x *BY_ShootS2C) GetIsRobot() bool {
	if x != nil && x.IsRobot != nil {
		return *x.IsRobot
	}
	return false
}

func (x *BY_ShootS2C) GetBoomNumber() int32 {
	if x != nil && x.BoomNumber != nil {
		return *x.BoomNumber
	}
	return 0
}

func (x *BY_ShootS2C) GetBoomType() int32 {
	if x != nil && x.BoomType != nil {
		return *x.BoomType
	}
	return 0
}

//用户是否处于锁定状态
type BY_SuoDingC2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuoDing *bool `protobuf:"varint,1,req,name=SuoDing" json:"SuoDing,omitempty"` //是否锁定
}

func (x *BY_SuoDingC2S) Reset() {
	*x = BY_SuoDingC2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_SuoDingC2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_SuoDingC2S) ProtoMessage() {}

func (x *BY_SuoDingC2S) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_SuoDingC2S.ProtoReflect.Descriptor instead.
func (*BY_SuoDingC2S) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{11}
}

func (x *BY_SuoDingC2S) GetSuoDing() bool {
	if x != nil && x.SuoDing != nil {
		return *x.SuoDing
	}
	return false
}

//用户锁定状态
type BY_SuoDingS2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNO  *int32 `protobuf:"varint,1,req,name=SeatNO" json:"SeatNO,omitempty"`   // 锁定的玩家
	SuoDing *bool  `protobuf:"varint,2,req,name=SuoDing" json:"SuoDing,omitempty"` //是否锁定
}

func (x *BY_SuoDingS2C) Reset() {
	*x = BY_SuoDingS2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_SuoDingS2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_SuoDingS2C) ProtoMessage() {}

func (x *BY_SuoDingS2C) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_SuoDingS2C.ProtoReflect.Descriptor instead.
func (*BY_SuoDingS2C) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{12}
}

func (x *BY_SuoDingS2C) GetSeatNO() int32 {
	if x != nil && x.SeatNO != nil {
		return *x.SeatNO
	}
	return 0
}

func (x *BY_SuoDingS2C) GetSuoDing() bool {
	if x != nil && x.SuoDing != nil {
		return *x.SuoDing
	}
	return false
}

// 用户修改倍率S2C
type BY_UserChangeRateS2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNO          *int32 `protobuf:"varint,1,req,name=SeatNO" json:"SeatNO,omitempty"`                   // 修改倍率的玩家
	RateAfterChange *int32 `protobuf:"varint,2,req,name=RateAfterChange" json:"RateAfterChange,omitempty"` // 修改后的倍率
}

func (x *BY_UserChangeRateS2C) Reset() {
	*x = BY_UserChangeRateS2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_UserChangeRateS2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_UserChangeRateS2C) ProtoMessage() {}

func (x *BY_UserChangeRateS2C) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_UserChangeRateS2C.ProtoReflect.Descriptor instead.
func (*BY_UserChangeRateS2C) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{13}
}

func (x *BY_UserChangeRateS2C) GetSeatNO() int32 {
	if x != nil && x.SeatNO != nil {
		return *x.SeatNO
	}
	return 0
}

func (x *BY_UserChangeRateS2C) GetRateAfterChange() int32 {
	if x != nil && x.RateAfterChange != nil {
		return *x.RateAfterChange
	}
	return 0
}

// 用户修改倍率C2S
type BY_UserChangeRateC2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateAfterChange *int32 `protobuf:"varint,1,req,name=RateAfterChange" json:"RateAfterChange,omitempty"` // 修改后的倍率
}

func (x *BY_UserChangeRateC2S) Reset() {
	*x = BY_UserChangeRateC2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_UserChangeRateC2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_UserChangeRateC2S) ProtoMessage() {}

func (x *BY_UserChangeRateC2S) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_UserChangeRateC2S.ProtoReflect.Descriptor instead.
func (*BY_UserChangeRateC2S) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{14}
}

func (x *BY_UserChangeRateC2S) GetRateAfterChange() int32 {
	if x != nil && x.RateAfterChange != nil {
		return *x.RateAfterChange
	}
	return 0
}

//用户炮弹爆炸C2S
type BY_BoomC2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoomID   *int32  `protobuf:"varint,1,req,name=BoomID" json:"BoomID,omitempty"`     // 炮弹ID
	BoomRate *int32  `protobuf:"varint,2,req,name=BoomRate" json:"BoomRate,omitempty"` // 炮弹倍率
	FishID   []int32 `protobuf:"varint,3,rep,name=FishID" json:"FishID,omitempty"`     // 鱼数组
	UserID   *int32  `protobuf:"varint,4,opt,name=UserID" json:"UserID,omitempty"`     // 机器人的ID
	BoomType *int32  `protobuf:"varint,5,opt,name=BoomType" json:"BoomType,omitempty"` //1一般 3磚頭砲
	Delete   *int32  `protobuf:"varint,6,opt,name=Delete" json:"Delete,omitempty"`     //當boomtype=3, 再使用delete, 0不刪除 1刪除
}

func (x *BY_BoomC2S) Reset() {
	*x = BY_BoomC2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_BoomC2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_BoomC2S) ProtoMessage() {}

func (x *BY_BoomC2S) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_BoomC2S.ProtoReflect.Descriptor instead.
func (*BY_BoomC2S) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{15}
}

func (x *BY_BoomC2S) GetBoomID() int32 {
	if x != nil && x.BoomID != nil {
		return *x.BoomID
	}
	return 0
}

func (x *BY_BoomC2S) GetBoomRate() int32 {
	if x != nil && x.BoomRate != nil {
		return *x.BoomRate
	}
	return 0
}

func (x *BY_BoomC2S) GetFishID() []int32 {
	if x != nil {
		return x.FishID
	}
	return nil
}

func (x *BY_BoomC2S) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BY_BoomC2S) GetBoomType() int32 {
	if x != nil && x.BoomType != nil {
		return *x.BoomType
	}
	return 0
}

func (x *BY_BoomC2S) GetDelete() int32 {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return 0
}

//用户炮弹爆炸S2C
type BY_BoomS2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoomID *int32 `protobuf:"varint,1,req,name=BoomID" json:"BoomID,omitempty"` //炮弹流水號ID
}

func (x *BY_BoomS2C) Reset() {
	*x = BY_BoomS2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_BoomS2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_BoomS2C) ProtoMessage() {}

func (x *BY_BoomS2C) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_BoomS2C.ProtoReflect.Descriptor instead.
func (*BY_BoomS2C) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{16}
}

func (x *BY_BoomS2C) GetBoomID() int32 {
	if x != nil && x.BoomID != nil {
		return *x.BoomID
	}
	return 0
}

//用户捕到鱼S2C
type BY_Fish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //捕到鱼的用户ID
	FishID      *int32 `protobuf:"varint,2,req,name=FishID" json:"FishID,omitempty"` //鱼的ID
	Money       *int64 `protobuf:"varint,3,req,name=Money" json:"Money,omitempty"`   //用户增加的钱
	Type        *int32 `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`     //触发鱼死亡的类型
	LuckyBonus  *int32 `protobuf:"varint,5,opt,name=LuckyBonus" json:"LuckyBonus,omitempty"`
	TeshuFishID *int32 `protobuf:"varint,6,opt,name=TeshuFishID" json:"TeshuFishID,omitempty"` //被哪個特殊魚打死
}

func (x *BY_Fish) Reset() {
	*x = BY_Fish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_Fish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_Fish) ProtoMessage() {}

func (x *BY_Fish) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_Fish.ProtoReflect.Descriptor instead.
func (*BY_Fish) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{17}
}

func (x *BY_Fish) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BY_Fish) GetFishID() int32 {
	if x != nil && x.FishID != nil {
		return *x.FishID
	}
	return 0
}

func (x *BY_Fish) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BY_Fish) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BY_Fish) GetLuckyBonus() int32 {
	if x != nil && x.LuckyBonus != nil {
		return *x.LuckyBonus
	}
	return 0
}

func (x *BY_Fish) GetTeshuFishID() int32 {
	if x != nil && x.TeshuFishID != nil {
		return *x.TeshuFishID
	}
	return 0
}

//添加一条新的鱼S2C
type BY_NewFish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishID     *int32 `protobuf:"varint,1,req,name=FishID" json:"FishID,omitempty"`         //新增的鱼的ID
	FishType   *int32 `protobuf:"varint,2,req,name=FishType" json:"FishType,omitempty"`     //鱼的种类
	FishNumber *int32 `protobuf:"varint,4,req,name=FishNumber" json:"FishNumber,omitempty"` //魚的ID
	FishCount  *int32 `protobuf:"varint,5,req,name=FishCount" json:"FishCount,omitempty"`   //魚的數量
}

func (x *BY_NewFish) Reset() {
	*x = BY_NewFish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_NewFish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_NewFish) ProtoMessage() {}

func (x *BY_NewFish) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_NewFish.ProtoReflect.Descriptor instead.
func (*BY_NewFish) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{18}
}

func (x *BY_NewFish) GetFishID() int32 {
	if x != nil && x.FishID != nil {
		return *x.FishID
	}
	return 0
}

func (x *BY_NewFish) GetFishType() int32 {
	if x != nil && x.FishType != nil {
		return *x.FishType
	}
	return 0
}

func (x *BY_NewFish) GetFishNumber() int32 {
	if x != nil && x.FishNumber != nil {
		return *x.FishNumber
	}
	return 0
}

func (x *BY_NewFish) GetFishCount() int32 {
	if x != nil && x.FishCount != nil {
		return *x.FishCount
	}
	return 0
}

//炸弹鱼以后发全屏鱼
type BY_AllFish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishID []int32 `protobuf:"varint,1,rep,name=FishID" json:"FishID,omitempty"`
}

func (x *BY_AllFish) Reset() {
	*x = BY_AllFish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_AllFish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_AllFish) ProtoMessage() {}

func (x *BY_AllFish) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_AllFish.ProtoReflect.Descriptor instead.
func (*BY_AllFish) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{19}
}

func (x *BY_AllFish) GetFishID() []int32 {
	if x != nil {
		return x.FishID
	}
	return nil
}

//帧消息c2s
type BY_FrameC2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameID        *int64                `protobuf:"varint,1,req,name=FrameID" json:"FrameID,omitempty"` //帧号
	Shoot          *BY_ShootC2S          `protobuf:"bytes,2,opt,name=Shoot" json:"Shoot,omitempty"`
	Boom           *BY_BoomC2S           `protobuf:"bytes,3,opt,name=Boom" json:"Boom,omitempty"`
	UserChangeRate *BY_UserChangeRateC2S `protobuf:"bytes,4,opt,name=UserChangeRate" json:"UserChangeRate,omitempty"`
	SuoDing        *BY_SuoDingC2S        `protobuf:"bytes,5,opt,name=SuoDing" json:"SuoDing,omitempty"`
	AllFish        *BY_AllFish           `protobuf:"bytes,6,opt,name=AllFish" json:"AllFish,omitempty"`
	UseIce         *bool                 `protobuf:"varint,7,opt,name=UseIce" json:"UseIce,omitempty"` //使用冰冻技能
}

func (x *BY_FrameC2S) Reset() {
	*x = BY_FrameC2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_FrameC2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_FrameC2S) ProtoMessage() {}

func (x *BY_FrameC2S) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_FrameC2S.ProtoReflect.Descriptor instead.
func (*BY_FrameC2S) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{20}
}

func (x *BY_FrameC2S) GetFrameID() int64 {
	if x != nil && x.FrameID != nil {
		return *x.FrameID
	}
	return 0
}

func (x *BY_FrameC2S) GetShoot() *BY_ShootC2S {
	if x != nil {
		return x.Shoot
	}
	return nil
}

func (x *BY_FrameC2S) GetBoom() *BY_BoomC2S {
	if x != nil {
		return x.Boom
	}
	return nil
}

func (x *BY_FrameC2S) GetUserChangeRate() *BY_UserChangeRateC2S {
	if x != nil {
		return x.UserChangeRate
	}
	return nil
}

func (x *BY_FrameC2S) GetSuoDing() *BY_SuoDingC2S {
	if x != nil {
		return x.SuoDing
	}
	return nil
}

func (x *BY_FrameC2S) GetAllFish() *BY_AllFish {
	if x != nil {
		return x.AllFish
	}
	return nil
}

func (x *BY_FrameC2S) GetUseIce() bool {
	if x != nil && x.UseIce != nil {
		return *x.UseIce
	}
	return false
}

//用户的信息
type BY_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID               *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //用户的ID
	UserMoney            *int64 `protobuf:"varint,2,req,name=UserMoney" json:"UserMoney,omitempty"`
	GameCompetitionBonus *int32 `protobuf:"varint,20,opt,name=GameCompetitionBonus" json:"GameCompetitionBonus,omitempty"` //打死魚的所有總積分
}

func (x *BY_UserInfo) Reset() {
	*x = BY_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_UserInfo) ProtoMessage() {}

func (x *BY_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_UserInfo.ProtoReflect.Descriptor instead.
func (*BY_UserInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{21}
}

func (x *BY_UserInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BY_UserInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *BY_UserInfo) GetGameCompetitionBonus() int32 {
	if x != nil && x.GameCompetitionBonus != nil {
		return *x.GameCompetitionBonus
	}
	return 0
}

//帧消息
type BY_FrameS2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameID             *int64                  `protobuf:"varint,1,req,name=FrameID" json:"FrameID,omitempty"` //帧号
	Shoot               []*BY_ShootS2C          `protobuf:"bytes,2,rep,name=Shoot" json:"Shoot,omitempty"`
	Boom                []*BY_BoomS2C           `protobuf:"bytes,3,rep,name=Boom" json:"Boom,omitempty"`
	Fish                []*BY_Fish              `protobuf:"bytes,4,rep,name=Fish" json:"Fish,omitempty"`
	NewFish             []*BY_NewFish           `protobuf:"bytes,5,rep,name=NewFish" json:"NewFish,omitempty"`
	UserChangeRate      []*BY_UserChangeRateS2C `protobuf:"bytes,6,rep,name=UserChangeRate" json:"UserChangeRate,omitempty"`
	AdvanceNoticeType   *int32                  `protobuf:"varint,7,opt,name=advanceNoticeType" json:"advanceNoticeType,omitempty"` // 1：鱼潮来临通知从1开始
	FishWave            *BY_FishWaveManage      `protobuf:"bytes,8,opt,name=fishWave" json:"fishWave,omitempty"`                    // 鱼潮ID
	SuoDing             []*BY_SuoDingS2C        `protobuf:"bytes,9,rep,name=SuoDing" json:"SuoDing,omitempty"`
	PoChan              []int32                 `protobuf:"varint,10,rep,name=PoChan" json:"PoChan,omitempty"`     // 破产的玩家ID
	BossNear            *int32                  `protobuf:"varint,11,opt,name=BossNear" json:"BossNear,omitempty"` // 1表示BOSS来了
	IsIce               *bool                   `protobuf:"varint,12,opt,name=IsIce" json:"IsIce,omitempty"`       // 是否冰冻状态
	UseIce              *bool                   `protobuf:"varint,13,opt,name=UseIce" json:"UseIce,omitempty"`     // 是否使用冰冻技能，在使用冰冻技能后的第一帧传True
	IsFishWave          *bool                   `protobuf:"varint,14,req,name=IsFishWave" json:"IsFishWave,omitempty"`
	TeshuNear           *int32                  `protobuf:"varint,15,opt,name=TeshuNear" json:"TeshuNear,omitempty"`                     //特殊魚來了
	FishOdds            *int32                  `protobuf:"varint,16,opt,name=FishOdds" json:"FishOdds,omitempty"`                       //Boss, 特殊魚 fishodds
	UserInfo            []*BY_UserInfo          `protobuf:"bytes,100,rep,name=UserInfo" json:"UserInfo,omitempty"`                       // 用户信息
	FishSwell           *BY_FishSwellRate       `protobuf:"bytes,17,opt,name=FishSwell" json:"FishSwell,omitempty"`                      //魚膨脹
	FishWinList         *BY_WinList             `protobuf:"bytes,18,opt,name=FishWinList" json:"FishWinList,omitempty"`                  //多個得分金額
	GameCompetitionTime *int32                  `protobuf:"varint,19,opt,name=GameCompetitionTime" json:"GameCompetitionTime,omitempty"` //比賽剩餘時間(秒)
}

func (x *BY_FrameS2C) Reset() {
	*x = BY_FrameS2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_FrameS2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_FrameS2C) ProtoMessage() {}

func (x *BY_FrameS2C) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_FrameS2C.ProtoReflect.Descriptor instead.
func (*BY_FrameS2C) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{22}
}

func (x *BY_FrameS2C) GetFrameID() int64 {
	if x != nil && x.FrameID != nil {
		return *x.FrameID
	}
	return 0
}

func (x *BY_FrameS2C) GetShoot() []*BY_ShootS2C {
	if x != nil {
		return x.Shoot
	}
	return nil
}

func (x *BY_FrameS2C) GetBoom() []*BY_BoomS2C {
	if x != nil {
		return x.Boom
	}
	return nil
}

func (x *BY_FrameS2C) GetFish() []*BY_Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

func (x *BY_FrameS2C) GetNewFish() []*BY_NewFish {
	if x != nil {
		return x.NewFish
	}
	return nil
}

func (x *BY_FrameS2C) GetUserChangeRate() []*BY_UserChangeRateS2C {
	if x != nil {
		return x.UserChangeRate
	}
	return nil
}

func (x *BY_FrameS2C) GetAdvanceNoticeType() int32 {
	if x != nil && x.AdvanceNoticeType != nil {
		return *x.AdvanceNoticeType
	}
	return 0
}

func (x *BY_FrameS2C) GetFishWave() *BY_FishWaveManage {
	if x != nil {
		return x.FishWave
	}
	return nil
}

func (x *BY_FrameS2C) GetSuoDing() []*BY_SuoDingS2C {
	if x != nil {
		return x.SuoDing
	}
	return nil
}

func (x *BY_FrameS2C) GetPoChan() []int32 {
	if x != nil {
		return x.PoChan
	}
	return nil
}

func (x *BY_FrameS2C) GetBossNear() int32 {
	if x != nil && x.BossNear != nil {
		return *x.BossNear
	}
	return 0
}

func (x *BY_FrameS2C) GetIsIce() bool {
	if x != nil && x.IsIce != nil {
		return *x.IsIce
	}
	return false
}

func (x *BY_FrameS2C) GetUseIce() bool {
	if x != nil && x.UseIce != nil {
		return *x.UseIce
	}
	return false
}

func (x *BY_FrameS2C) GetIsFishWave() bool {
	if x != nil && x.IsFishWave != nil {
		return *x.IsFishWave
	}
	return false
}

func (x *BY_FrameS2C) GetTeshuNear() int32 {
	if x != nil && x.TeshuNear != nil {
		return *x.TeshuNear
	}
	return 0
}

func (x *BY_FrameS2C) GetFishOdds() int32 {
	if x != nil && x.FishOdds != nil {
		return *x.FishOdds
	}
	return 0
}

func (x *BY_FrameS2C) GetUserInfo() []*BY_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *BY_FrameS2C) GetFishSwell() *BY_FishSwellRate {
	if x != nil {
		return x.FishSwell
	}
	return nil
}

func (x *BY_FrameS2C) GetFishWinList() *BY_WinList {
	if x != nil {
		return x.FishWinList
	}
	return nil
}

func (x *BY_FrameS2C) GetGameCompetitionTime() int32 {
	if x != nil && x.GameCompetitionTime != nil {
		return *x.GameCompetitionTime
	}
	return 0
}

//多個得分金額
type BY_WinList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *int32  `protobuf:"varint,1,req,name=Time" json:"Time,omitempty"`   //間隔時間
	Money []int32 `protobuf:"varint,2,rep,name=Money" json:"Money,omitempty"` //金額list
}

func (x *BY_WinList) Reset() {
	*x = BY_WinList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_WinList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_WinList) ProtoMessage() {}

func (x *BY_WinList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_WinList.ProtoReflect.Descriptor instead.
func (*BY_WinList) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{23}
}

func (x *BY_WinList) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *BY_WinList) GetMoney() []int32 {
	if x != nil {
		return x.Money
	}
	return nil
}

//FishID膨脹
type BY_FishSwellRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishID *int32 `protobuf:"varint,1,req,name=FishID" json:"FishID,omitempty"`
	Rate   *int32 `protobuf:"varint,2,req,name=Rate" json:"Rate,omitempty"`
}

func (x *BY_FishSwellRate) Reset() {
	*x = BY_FishSwellRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_FishSwellRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_FishSwellRate) ProtoMessage() {}

func (x *BY_FishSwellRate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_FishSwellRate.ProtoReflect.Descriptor instead.
func (*BY_FishSwellRate) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{24}
}

func (x *BY_FishSwellRate) GetFishID() int32 {
	if x != nil && x.FishID != nil {
		return *x.FishID
	}
	return 0
}

func (x *BY_FishSwellRate) GetRate() int32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

//魚潮管理
type BY_FishWaveManage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishWaveID *int32             `protobuf:"varint,1,req,name=FishWaveID" json:"FishWaveID,omitempty"`
	FishInfo   []*BY_FishInfoWave `protobuf:"bytes,2,rep,name=FishInfo" json:"FishInfo,omitempty"`
}

func (x *BY_FishWaveManage) Reset() {
	*x = BY_FishWaveManage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_FishWaveManage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_FishWaveManage) ProtoMessage() {}

func (x *BY_FishWaveManage) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_FishWaveManage.ProtoReflect.Descriptor instead.
func (*BY_FishWaveManage) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{25}
}

func (x *BY_FishWaveManage) GetFishWaveID() int32 {
	if x != nil && x.FishWaveID != nil {
		return *x.FishWaveID
	}
	return 0
}

func (x *BY_FishWaveManage) GetFishInfo() []*BY_FishInfoWave {
	if x != nil {
		return x.FishInfo
	}
	return nil
}

type BY_FishInfoWave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId   *int32  `protobuf:"varint,1,req,name=FishId" json:"FishId,omitempty"`
	Count    *int32  `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
	PathName *string `protobuf:"bytes,3,req,name=PathName" json:"PathName,omitempty"`
	Interval *int32  `protobuf:"varint,4,req,name=Interval" json:"Interval,omitempty"`
}

func (x *BY_FishInfoWave) Reset() {
	*x = BY_FishInfoWave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_FishInfoWave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_FishInfoWave) ProtoMessage() {}

func (x *BY_FishInfoWave) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_FishInfoWave.ProtoReflect.Descriptor instead.
func (*BY_FishInfoWave) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{26}
}

func (x *BY_FishInfoWave) GetFishId() int32 {
	if x != nil && x.FishId != nil {
		return *x.FishId
	}
	return 0
}

func (x *BY_FishInfoWave) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BY_FishInfoWave) GetPathName() string {
	if x != nil && x.PathName != nil {
		return *x.PathName
	}
	return ""
}

func (x *BY_FishInfoWave) GetInterval() int32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

// 断线重连
type BY_UserRecoverRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameInfo   []*BY_FrameS2C   `protobuf:"bytes,1,rep,name=FrameInfo" json:"FrameInfo,omitempty"`     // 断线帧数据
	UserStatus  []*BY_UserStatus `protobuf:"bytes,2,rep,name=UserStatus" json:"UserStatus,omitempty"`   //用户状态
	Isfishwave  *bool            `protobuf:"varint,3,req,name=isfishwave" json:"isfishwave,omitempty"`  //魚潮是否進行中
	Fishwavetip *string          `protobuf:"bytes,4,opt,name=fishwavetip" json:"fishwavetip,omitempty"` //魚潮進行中訊息
}

func (x *BY_UserRecoverRet) Reset() {
	*x = BY_UserRecoverRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_UserRecoverRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_UserRecoverRet) ProtoMessage() {}

func (x *BY_UserRecoverRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_UserRecoverRet.ProtoReflect.Descriptor instead.
func (*BY_UserRecoverRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{27}
}

func (x *BY_UserRecoverRet) GetFrameInfo() []*BY_FrameS2C {
	if x != nil {
		return x.FrameInfo
	}
	return nil
}

func (x *BY_UserRecoverRet) GetUserStatus() []*BY_UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

func (x *BY_UserRecoverRet) GetIsfishwave() bool {
	if x != nil && x.Isfishwave != nil {
		return *x.Isfishwave
	}
	return false
}

func (x *BY_UserRecoverRet) GetFishwavetip() string {
	if x != nil && x.Fishwavetip != nil {
		return *x.Fishwavetip
	}
	return ""
}

//玩家状态
type BY_UserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //用户ID
	Rate   *int32 `protobuf:"varint,2,req,name=Rate" json:"Rate,omitempty"`     //当前倍率
	Money  *int64 `protobuf:"varint,3,req,name=Money" json:"Money,omitempty"`   //用户当前的钱
	PoChan *bool  `protobuf:"varint,4,req,name=PoChan" json:"PoChan,omitempty"` //是否破产
}

func (x *BY_UserStatus) Reset() {
	*x = BY_UserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BY_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BY_UserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BY_UserStatus) ProtoMessage() {}

func (x *BY_UserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BY_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BY_UserStatus.ProtoReflect.Descriptor instead.
func (*BY_UserStatus) Descriptor() ([]byte, []int) {
	return file_GameMsg_BY_proto_rawDescGZIP(), []int{28}
}

func (x *BY_UserStatus) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BY_UserStatus) GetRate() int32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *BY_UserStatus) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BY_UserStatus) GetPoChan() bool {
	if x != nil && x.PoChan != nil {
		return *x.PoChan
	}
	return false
}

var File_GameMsg_BY_proto protoreflect.FileDescriptor

var file_GameMsg_BY_proto_rawDesc = []byte{
	0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x59, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x03, 0x0a,
	0x0a, 0x42, 0x59, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x42, 0x6f, 0x6f,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x42, 0x6f, 0x6f,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x42, 0x6f, 0x6f, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x49, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x49, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x46, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x59, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x46, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x5a, 0x75,
	0x61, 0x6e, 0x74, 0x6f, 0x75, 0x6c, 0x6f, 0x6e, 0x67, 0x78, 0x69, 0x61, 0x4d, 0x61, 0x78, 0x42,
	0x6f, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x5a, 0x75, 0x61, 0x6e, 0x74,
	0x6f, 0x75, 0x6c, 0x6f, 0x6e, 0x67, 0x78, 0x69, 0x61, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x6f, 0x6d,
	0x12, 0x28, 0x0a, 0x0f, 0x5a, 0x6c, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x5a, 0x6c, 0x78, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a,
	0x19, 0x42, 0x59, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x4f, 0x6e, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x6e, 0x47, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x18, 0x42, 0x59, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x41, 0x0a, 0x0b, 0x42, 0x59, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x10, 0x42, 0x59, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x0e, 0x42, 0x59,
	0x5f, 0x42, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x42, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6d,
	0x55, 0x49, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x6f,
	0x6f, 0x6d, 0x55, 0x49, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52,
	0x0d, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x6d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x42, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6d,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x6f, 0x6d,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x7c,
	0x0a, 0x0e, 0x42, 0x59, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x46, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x50, 0x42, 0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x53, 0x50, 0x42, 0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x22, 0xbf, 0x01, 0x0a,
	0x0d, 0x42, 0x59, 0x5f, 0x49, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x49, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x49,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x63, 0x65, 0x55, 0x49, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x49, 0x63, 0x65, 0x55, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x49, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x49, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x49, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x29,
	0x0a, 0x0b, 0x42, 0x59, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x4e, 0x0a, 0x0b, 0x42, 0x59, 0x5f,
	0x53, 0x68, 0x6f, 0x6f, 0x74, 0x43, 0x32, 0x53, 0x12, 0x27, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x59, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x50, 0x6f,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x42, 0x59,
	0x5f, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x53, 0x32, 0x43, 0x12, 0x27, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x50,
	0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x6f, 0x6f, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x29, 0x0a, 0x0d, 0x42, 0x59, 0x5f, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x43, 0x32,
	0x53, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x0d, 0x42,
	0x59, 0x5f, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x53, 0x32, 0x43, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x22, 0x58,
	0x0a, 0x14, 0x42, 0x59, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x32, 0x43, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x42, 0x59, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x32, 0x53,
	0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x42,
	0x59, 0x5f, 0x42, 0x6f, 0x6f, 0x6d, 0x43, 0x32, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f, 0x6f,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6f, 0x6f, 0x6d, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x46,
	0x69, 0x73, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x42, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x24, 0x0a, 0x0a, 0x42, 0x59, 0x5f, 0x42, 0x6f, 0x6f, 0x6d, 0x53, 0x32, 0x43, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x42, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x42, 0x59, 0x5f, 0x46,
	0x69, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73,
	0x68, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x65, 0x73, 0x68, 0x75, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x54, 0x65, 0x73, 0x68, 0x75, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x22,
	0x7e, 0x0a, 0x0a, 0x42, 0x59, 0x5f, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46,
	0x69, 0x73, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x46, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x46, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x24, 0x0a, 0x0a, 0x42, 0x59, 0x5f, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x46,
	0x69, 0x73, 0x68, 0x49, 0x44, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x42, 0x59, 0x5f, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x43, 0x32, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x05, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x53, 0x68, 0x6f,
	0x6f, 0x74, 0x43, 0x32, 0x53, 0x52, 0x05, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x42, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x42, 0x6f, 0x6f, 0x6d, 0x43, 0x32, 0x53,
	0x52, 0x04, 0x42, 0x6f, 0x6f, 0x6d, 0x12, 0x46, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x32, 0x53, 0x52, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x53, 0x75,
	0x6f, 0x44, 0x69, 0x6e, 0x67, 0x43, 0x32, 0x53, 0x52, 0x07, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59,
	0x5f, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x49, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x55, 0x73, 0x65, 0x49, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x0b, 0x42, 0x59, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x22, 0xca, 0x06, 0x0a, 0x0b, 0x42, 0x59, 0x5f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53,
	0x32, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x05,
	0x53, 0x68, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x53,
	0x32, 0x43, 0x52, 0x05, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x6f, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x42, 0x6f, 0x6f, 0x6d, 0x53, 0x32, 0x43, 0x52, 0x04, 0x42,
	0x6f, 0x6f, 0x6d, 0x12, 0x25, 0x0a, 0x04, 0x46, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f,
	0x46, 0x69, 0x73, 0x68, 0x52, 0x04, 0x46, 0x69, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x07, 0x4e, 0x65,
	0x77, 0x46, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x0e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x32, 0x43, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x66, 0x69, 0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59,
	0x5f, 0x46, 0x69, 0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x66, 0x69, 0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x53, 0x75, 0x6f,
	0x44, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67,
	0x53, 0x32, 0x43, 0x52, 0x07, 0x53, 0x75, 0x6f, 0x44, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x73, 0x73, 0x4e, 0x65, 0x61, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x73, 0x73, 0x4e, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x49, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x49, 0x73, 0x49, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x49, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x73, 0x65, 0x49, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x65, 0x73, 0x68, 0x75, 0x4e, 0x65, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x54, 0x65, 0x73, 0x68, 0x75, 0x4e, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x73, 0x68, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x46, 0x69, 0x73, 0x68, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x46,
	0x69, 0x73, 0x68, 0x53, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x46, 0x69, 0x73,
	0x68, 0x53, 0x77, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x46, 0x69, 0x73, 0x68,
	0x53, 0x77, 0x65, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x46, 0x69, 0x73, 0x68, 0x57, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0b, 0x46, 0x69, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x36, 0x0a, 0x0a, 0x42, 0x59, 0x5f, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x3e, 0x0a, 0x10, 0x42, 0x59, 0x5f, 0x46, 0x69,
	0x73, 0x68, 0x53, 0x77, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73,
	0x68, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x11, 0x42, 0x59, 0x5f, 0x46, 0x69,
	0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x46, 0x69, 0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x46, 0x69, 0x73, 0x68, 0x57, 0x61, 0x76, 0x65, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x08,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x46, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x61, 0x76, 0x65, 0x52, 0x08, 0x46, 0x69, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x77, 0x0a, 0x0f, 0x42, 0x59, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x57, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xc3, 0x01, 0x0a,
	0x11, 0x42, 0x59, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x59, 0x5f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x32, 0x43, 0x52, 0x09, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x59, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x66, 0x69, 0x73, 0x68, 0x77, 0x61, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x66, 0x69, 0x73, 0x68, 0x77, 0x61, 0x76, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x73, 0x68, 0x77, 0x61, 0x76, 0x65, 0x74, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x73, 0x68, 0x77, 0x61, 0x76, 0x65, 0x74,
	0x69, 0x70, 0x22, 0x69, 0x0a, 0x0d, 0x42, 0x59, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x50, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x0c, 0x5a,
	0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_BY_proto_rawDescOnce sync.Once
	file_GameMsg_BY_proto_rawDescData = file_GameMsg_BY_proto_rawDesc
)

func file_GameMsg_BY_proto_rawDescGZIP() []byte {
	file_GameMsg_BY_proto_rawDescOnce.Do(func() {
		file_GameMsg_BY_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_BY_proto_rawDescData)
	})
	return file_GameMsg_BY_proto_rawDescData
}

var file_GameMsg_BY_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_GameMsg_BY_proto_goTypes = []interface{}{
	(*BY_Setting)(nil),                // 0: netproto.BY_Setting
	(*BY_GameCompetitionSetting)(nil), // 1: netproto.BY_GameCompetitionSetting
	(*BY_GameCompetitionEndMsg)(nil),  // 2: netproto.BY_GameCompetitionEndMsg
	(*BY_LeaveMsg)(nil),               // 3: netproto.BY_LeaveMsg
	(*BY_NotifyFishMsg)(nil),          // 4: netproto.BY_NotifyFishMsg
	(*BY_BoomSetting)(nil),            // 5: netproto.BY_BoomSetting
	(*BY_FishSetting)(nil),            // 6: netproto.BY_FishSetting
	(*BY_IceSetting)(nil),             // 7: netproto.BY_IceSetting
	(*BY_Position)(nil),               // 8: netproto.BY_Position
	(*BY_ShootC2S)(nil),               // 9: netproto.BY_ShootC2S
	(*BY_ShootS2C)(nil),               // 10: netproto.BY_ShootS2C
	(*BY_SuoDingC2S)(nil),             // 11: netproto.BY_SuoDingC2S
	(*BY_SuoDingS2C)(nil),             // 12: netproto.BY_SuoDingS2C
	(*BY_UserChangeRateS2C)(nil),      // 13: netproto.BY_UserChangeRateS2C
	(*BY_UserChangeRateC2S)(nil),      // 14: netproto.BY_UserChangeRateC2S
	(*BY_BoomC2S)(nil),                // 15: netproto.BY_BoomC2S
	(*BY_BoomS2C)(nil),                // 16: netproto.BY_BoomS2C
	(*BY_Fish)(nil),                   // 17: netproto.BY_Fish
	(*BY_NewFish)(nil),                // 18: netproto.BY_NewFish
	(*BY_AllFish)(nil),                // 19: netproto.BY_AllFish
	(*BY_FrameC2S)(nil),               // 20: netproto.BY_FrameC2S
	(*BY_UserInfo)(nil),               // 21: netproto.BY_UserInfo
	(*BY_FrameS2C)(nil),               // 22: netproto.BY_FrameS2C
	(*BY_WinList)(nil),                // 23: netproto.BY_WinList
	(*BY_FishSwellRate)(nil),          // 24: netproto.BY_FishSwellRate
	(*BY_FishWaveManage)(nil),         // 25: netproto.BY_FishWaveManage
	(*BY_FishInfoWave)(nil),           // 26: netproto.BY_FishInfoWave
	(*BY_UserRecoverRet)(nil),         // 27: netproto.BY_UserRecoverRet
	(*BY_UserStatus)(nil),             // 28: netproto.BY_UserStatus
}
var file_GameMsg_BY_proto_depIdxs = []int32{
	5,  // 0: netproto.BY_Setting.BoomSetting:type_name -> netproto.BY_BoomSetting
	7,  // 1: netproto.BY_Setting.IceSetting:type_name -> netproto.BY_IceSetting
	6,  // 2: netproto.BY_Setting.FishSetting:type_name -> netproto.BY_FishSetting
	1,  // 3: netproto.BY_Setting.Competition:type_name -> netproto.BY_GameCompetitionSetting
	8,  // 4: netproto.BY_ShootC2S.Pos:type_name -> netproto.BY_Position
	8,  // 5: netproto.BY_ShootS2C.Pos:type_name -> netproto.BY_Position
	9,  // 6: netproto.BY_FrameC2S.Shoot:type_name -> netproto.BY_ShootC2S
	15, // 7: netproto.BY_FrameC2S.Boom:type_name -> netproto.BY_BoomC2S
	14, // 8: netproto.BY_FrameC2S.UserChangeRate:type_name -> netproto.BY_UserChangeRateC2S
	11, // 9: netproto.BY_FrameC2S.SuoDing:type_name -> netproto.BY_SuoDingC2S
	19, // 10: netproto.BY_FrameC2S.AllFish:type_name -> netproto.BY_AllFish
	10, // 11: netproto.BY_FrameS2C.Shoot:type_name -> netproto.BY_ShootS2C
	16, // 12: netproto.BY_FrameS2C.Boom:type_name -> netproto.BY_BoomS2C
	17, // 13: netproto.BY_FrameS2C.Fish:type_name -> netproto.BY_Fish
	18, // 14: netproto.BY_FrameS2C.NewFish:type_name -> netproto.BY_NewFish
	13, // 15: netproto.BY_FrameS2C.UserChangeRate:type_name -> netproto.BY_UserChangeRateS2C
	25, // 16: netproto.BY_FrameS2C.fishWave:type_name -> netproto.BY_FishWaveManage
	12, // 17: netproto.BY_FrameS2C.SuoDing:type_name -> netproto.BY_SuoDingS2C
	21, // 18: netproto.BY_FrameS2C.UserInfo:type_name -> netproto.BY_UserInfo
	24, // 19: netproto.BY_FrameS2C.FishSwell:type_name -> netproto.BY_FishSwellRate
	23, // 20: netproto.BY_FrameS2C.FishWinList:type_name -> netproto.BY_WinList
	26, // 21: netproto.BY_FishWaveManage.FishInfo:type_name -> netproto.BY_FishInfoWave
	22, // 22: netproto.BY_UserRecoverRet.FrameInfo:type_name -> netproto.BY_FrameS2C
	28, // 23: netproto.BY_UserRecoverRet.UserStatus:type_name -> netproto.BY_UserStatus
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_GameMsg_BY_proto_init() }
func file_GameMsg_BY_proto_init() {
	if File_GameMsg_BY_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_BY_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_GameCompetitionSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_GameCompetitionEndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_LeaveMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_NotifyFishMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_BoomSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_FishSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_IceSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_ShootC2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_ShootS2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_SuoDingC2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_SuoDingS2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_UserChangeRateS2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_UserChangeRateC2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_BoomC2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_BoomS2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_Fish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_NewFish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_AllFish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_FrameC2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_FrameS2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_WinList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_FishSwellRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_FishWaveManage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_FishInfoWave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_UserRecoverRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BY_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BY_UserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_BY_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_BY_proto_goTypes,
		DependencyIndexes: file_GameMsg_BY_proto_depIdxs,
		MessageInfos:      file_GameMsg_BY_proto_msgTypes,
	}.Build()
	File_GameMsg_BY_proto = out.File
	file_GameMsg_BY_proto_rawDesc = nil
	file_GameMsg_BY_proto_goTypes = nil
	file_GameMsg_BY_proto_depIdxs = nil
}
