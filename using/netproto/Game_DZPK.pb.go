//==================================================================
//文件名： Game_DZPK.proto
//作者：
//日期：
//说明：   德州扑克游戏客户服务器通信协议
//修改记录：
//==================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: Game_DZPK.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DZPK_GameMessageClassID int32

const (
	//BroadCastBeginID=10000;			//服务器推送：开始游戏
	DZPK_GameMessageClassID_BroadCastDealID         DZPK_GameMessageClassID = 10001 //服务器推送：发牌,DZPK_PrivatePoker
	DZPK_GameMessageClassID_BroadCastWaitOptID      DZPK_GameMessageClassID = 10002 //服务器推送：等待操作,DZPK_WaitOptSeat
	DZPK_GameMessageClassID_BroadCastCurrOptID      DZPK_GameMessageClassID = 10003 //服务器推送：当前操作的椅子号
	DZPK_GameMessageClassID_BroadCastCardsInfoID    DZPK_GameMessageClassID = 10004 //服务器推送：手牌信息
	DZPK_GameMessageClassID_ActionBetID             DZPK_GameMessageClassID = 10005 //客户端请求：押注,DZPK_Bet
	DZPK_GameMessageClassID_ActionCallID            DZPK_GameMessageClassID = 10006 //客户端请求：跟注,DZPK_Call
	DZPK_GameMessageClassID_ActionRaiseID           DZPK_GameMessageClassID = 10007 //客户端请求：加注,DZPK_Raise
	DZPK_GameMessageClassID_ActionCheckID           DZPK_GameMessageClassID = 10008 //客户端请求：过，看牌,DZPK_Check
	DZPK_GameMessageClassID_ActionAllinID           DZPK_GameMessageClassID = 10009 //客户端请求：allin,DZPK_AllIn
	DZPK_GameMessageClassID_ActionFoldID            DZPK_GameMessageClassID = 10010 //客户端请求：弃牌,DZPK_Fold
	DZPK_GameMessageClassID_RequestStatisticsID     DZPK_GameMessageClassID = 10011 //客户端请求：查看统计数据
	DZPK_GameMessageClassID_RequestRePlayID         DZPK_GameMessageClassID = 10012 //客户端请求：查看回放数据
	DZPK_GameMessageClassID_BroadCastBetBaseID      DZPK_GameMessageClassID = 10013 //服务器推送：下底广播,DZPK_BetBase
	DZPK_GameMessageClassID_BroadCastBetID          DZPK_GameMessageClassID = 10014 //服务器推送：押注广播,DZPK_BrodCastBet
	DZPK_GameMessageClassID_BroadCastCallID         DZPK_GameMessageClassID = 10015 //服务器推送：跟注广播,DZPK_BrodCastCall
	DZPK_GameMessageClassID_BroadCastRaiseID        DZPK_GameMessageClassID = 10016 //服务器推送：加注广播,DZPK_BrodCastRaise
	DZPK_GameMessageClassID_BroadCastCheckID        DZPK_GameMessageClassID = 10017 //服务器推送：过，看牌广播,DZPK_BrodCastCheck
	DZPK_GameMessageClassID_BroadCastAllinID        DZPK_GameMessageClassID = 10018 //服务器推送：allin广播,DZPK_BrodCastAllIn
	DZPK_GameMessageClassID_BroadCastFoldID         DZPK_GameMessageClassID = 10019 //服务器推送：弃牌广播,DZPK_BrodCastFold
	DZPK_GameMessageClassID_BroadCastSettlementID   DZPK_GameMessageClassID = 10020 //服务器推送：单局结算广播,DZPK_SettleMentRound
	DZPK_GameMessageClassID_BroadCastPotInfoID      DZPK_GameMessageClassID = 10021 //服务器推送：彩池信息广播,DZPK_BroadCastPotInfo
	DZPK_GameMessageClassID_BroadCastSenceRecoverID DZPK_GameMessageClassID = 10022 //服务器推送：场景恢复广播,DZPK_GameSence
	DZPK_GameMessageClassID_BroadCastDealPublicID   DZPK_GameMessageClassID = 10023 //服务器推送：发公共牌,DZPK_BrodCastCardsPoker
	DZPK_GameMessageClassID_BroadCastCardTypeInfoID DZPK_GameMessageClassID = 10024 //服务器推送：用户牌型信息,DZPK_BroadCastCardType
	DZPK_GameMessageClassID_BroadCastCheckCardsID   DZPK_GameMessageClassID = 10025 //服务器推送：看牌比牌,DZPK_UserCardsInfo
	DZPK_GameMessageClassID_BroadCastGameSettingID  DZPK_GameMessageClassID = 10026 //服务器推送：游戏设置,DZPK_GameSetting
	DZPK_GameMessageClassID_BroadCastGameSenceID    DZPK_GameMessageClassID = 10027 //服务器推送：游戏场景,DZPK_GameSence
	DZPK_GameMessageClassID_BroadCastPreOprationID  DZPK_GameMessageClassID = 10029 //服务器推送：预操作,DZPK_PreOpration
	DZPK_GameMessageClassID_BroadCastErrorID        DZPK_GameMessageClassID = 10028 //服务器推送：操作失败DZPK_ErrorMsg
	DZPK_GameMessageClassID_ActionGMCommond         DZPK_GameMessageClassID = 10030 //测试GM命令:DZPK_GM
)

// Enum value maps for DZPK_GameMessageClassID.
var (
	DZPK_GameMessageClassID_name = map[int32]string{
		10001: "BroadCastDealID",
		10002: "BroadCastWaitOptID",
		10003: "BroadCastCurrOptID",
		10004: "BroadCastCardsInfoID",
		10005: "ActionBetID",
		10006: "ActionCallID",
		10007: "ActionRaiseID",
		10008: "ActionCheckID",
		10009: "ActionAllinID",
		10010: "ActionFoldID",
		10011: "RequestStatisticsID",
		10012: "RequestRePlayID",
		10013: "BroadCastBetBaseID",
		10014: "BroadCastBetID",
		10015: "BroadCastCallID",
		10016: "BroadCastRaiseID",
		10017: "BroadCastCheckID",
		10018: "BroadCastAllinID",
		10019: "BroadCastFoldID",
		10020: "BroadCastSettlementID",
		10021: "BroadCastPotInfoID",
		10022: "BroadCastSenceRecoverID",
		10023: "BroadCastDealPublicID",
		10024: "BroadCastCardTypeInfoID",
		10025: "BroadCastCheckCardsID",
		10026: "BroadCastGameSettingID",
		10027: "BroadCastGameSenceID",
		10029: "BroadCastPreOprationID",
		10028: "BroadCastErrorID",
		10030: "ActionGMCommond",
	}
	DZPK_GameMessageClassID_value = map[string]int32{
		"BroadCastDealID":         10001,
		"BroadCastWaitOptID":      10002,
		"BroadCastCurrOptID":      10003,
		"BroadCastCardsInfoID":    10004,
		"ActionBetID":             10005,
		"ActionCallID":            10006,
		"ActionRaiseID":           10007,
		"ActionCheckID":           10008,
		"ActionAllinID":           10009,
		"ActionFoldID":            10010,
		"RequestStatisticsID":     10011,
		"RequestRePlayID":         10012,
		"BroadCastBetBaseID":      10013,
		"BroadCastBetID":          10014,
		"BroadCastCallID":         10015,
		"BroadCastRaiseID":        10016,
		"BroadCastCheckID":        10017,
		"BroadCastAllinID":        10018,
		"BroadCastFoldID":         10019,
		"BroadCastSettlementID":   10020,
		"BroadCastPotInfoID":      10021,
		"BroadCastSenceRecoverID": 10022,
		"BroadCastDealPublicID":   10023,
		"BroadCastCardTypeInfoID": 10024,
		"BroadCastCheckCardsID":   10025,
		"BroadCastGameSettingID":  10026,
		"BroadCastGameSenceID":    10027,
		"BroadCastPreOprationID":  10029,
		"BroadCastErrorID":        10028,
		"ActionGMCommond":         10030,
	}
)

func (x DZPK_GameMessageClassID) Enum() *DZPK_GameMessageClassID {
	p := new(DZPK_GameMessageClassID)
	*p = x
	return p
}

func (x DZPK_GameMessageClassID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DZPK_GameMessageClassID) Descriptor() protoreflect.EnumDescriptor {
	return file_Game_DZPK_proto_enumTypes[0].Descriptor()
}

func (DZPK_GameMessageClassID) Type() protoreflect.EnumType {
	return &file_Game_DZPK_proto_enumTypes[0]
}

func (x DZPK_GameMessageClassID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DZPK_GameMessageClassID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DZPK_GameMessageClassID(num)
	return nil
}

// Deprecated: Use DZPK_GameMessageClassID.Descriptor instead.
func (DZPK_GameMessageClassID) EnumDescriptor() ([]byte, []int) {
	return file_Game_DZPK_proto_rawDescGZIP(), []int{0}
}

var File_Game_DZPK_proto protoreflect.FileDescriptor

var file_Game_DZPK_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x5a, 0x50, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xea, 0x05, 0x0a, 0x17,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x10, 0x91, 0x4e, 0x12, 0x17, 0x0a,
	0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70,
	0x74, 0x49, 0x44, 0x10, 0x92, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74, 0x49, 0x44, 0x10, 0x93, 0x4e, 0x12,
	0x19, 0x0a, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x10, 0x94, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x49, 0x44, 0x10, 0x95, 0x4e, 0x12, 0x11, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x10, 0x96, 0x4e, 0x12,
	0x12, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x49, 0x44,
	0x10, 0x97, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x44, 0x10, 0x98, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x69, 0x6e, 0x49, 0x44, 0x10, 0x99, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x10, 0x9a, 0x4e, 0x12, 0x18,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x44, 0x10, 0x9b, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x44, 0x10, 0x9c, 0x4e, 0x12, 0x17,
	0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x10, 0x9d, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x49, 0x44, 0x10, 0x9e, 0x4e, 0x12, 0x14, 0x0a, 0x0f,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x10,
	0x9f, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x52,
	0x61, 0x69, 0x73, 0x65, 0x49, 0x44, 0x10, 0xa0, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x10, 0xa1, 0x4e,
	0x12, 0x15, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x69, 0x6e, 0x49, 0x44, 0x10, 0xa2, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x10, 0xa3, 0x4e, 0x12, 0x1a, 0x0a,
	0x15, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x10, 0xa4, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x10,
	0xa5, 0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x44, 0x10, 0xa6, 0x4e,
	0x12, 0x1a, 0x0a, 0x15, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x10, 0xa7, 0x4e, 0x12, 0x1c, 0x0a, 0x17,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x10, 0xa8, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x49, 0x44, 0x10, 0xa9, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x10, 0xaa, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x10, 0xab, 0x4e, 0x12, 0x1b,
	0x0a, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65, 0x4f, 0x70,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x10, 0xad, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x10,
	0xac, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x4d, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0xae, 0x4e, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_Game_DZPK_proto_rawDescOnce sync.Once
	file_Game_DZPK_proto_rawDescData = file_Game_DZPK_proto_rawDesc
)

func file_Game_DZPK_proto_rawDescGZIP() []byte {
	file_Game_DZPK_proto_rawDescOnce.Do(func() {
		file_Game_DZPK_proto_rawDescData = protoimpl.X.CompressGZIP(file_Game_DZPK_proto_rawDescData)
	})
	return file_Game_DZPK_proto_rawDescData
}

var file_Game_DZPK_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Game_DZPK_proto_goTypes = []interface{}{
	(DZPK_GameMessageClassID)(0), // 0: netproto.DZPK_GameMessageClassID
}
var file_Game_DZPK_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Game_DZPK_proto_init() }
func file_Game_DZPK_proto_init() {
	if File_Game_DZPK_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Game_DZPK_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Game_DZPK_proto_goTypes,
		DependencyIndexes: file_Game_DZPK_proto_depIdxs,
		EnumInfos:         file_Game_DZPK_proto_enumTypes,
	}.Build()
	File_Game_DZPK_proto = out.File
	file_Game_DZPK_proto_rawDesc = nil
	file_Game_DZPK_proto_goTypes = nil
	file_Game_DZPK_proto_depIdxs = nil
}
