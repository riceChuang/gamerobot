//==================================================================
//文件名： GameMsg_DZPK.proto
//作者：
//日期：
//说明：   德州扑克游戏客户服务器通信协议
//修改记录：
//==================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_DZPK.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DZPK_WaitOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet         *bool   `protobuf:"varint,1,req,name=bet" json:"bet,omitempty"`
	Call        *bool   `protobuf:"varint,2,req,name=call" json:"call,omitempty"`
	Raise       *bool   `protobuf:"varint,3,req,name=raise" json:"raise,omitempty"`
	Allin       *bool   `protobuf:"varint,4,req,name=allin" json:"allin,omitempty"`
	Check       *bool   `protobuf:"varint,5,req,name=check" json:"check,omitempty"`
	Fold        *bool   `protobuf:"varint,6,req,name=fold" json:"fold,omitempty"`
	OptTime     *int32  `protobuf:"varint,7,req,name=optTime" json:"optTime,omitempty"`
	Betaddvalue []int32 `protobuf:"varint,8,rep,name=betaddvalue" json:"betaddvalue,omitempty"`
}

func (x *DZPK_WaitOpt) Reset() {
	*x = DZPK_WaitOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_WaitOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_WaitOpt) ProtoMessage() {}

func (x *DZPK_WaitOpt) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_WaitOpt.ProtoReflect.Descriptor instead.
func (*DZPK_WaitOpt) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{0}
}

func (x *DZPK_WaitOpt) GetBet() bool {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return false
}

func (x *DZPK_WaitOpt) GetCall() bool {
	if x != nil && x.Call != nil {
		return *x.Call
	}
	return false
}

func (x *DZPK_WaitOpt) GetRaise() bool {
	if x != nil && x.Raise != nil {
		return *x.Raise
	}
	return false
}

func (x *DZPK_WaitOpt) GetAllin() bool {
	if x != nil && x.Allin != nil {
		return *x.Allin
	}
	return false
}

func (x *DZPK_WaitOpt) GetCheck() bool {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return false
}

func (x *DZPK_WaitOpt) GetFold() bool {
	if x != nil && x.Fold != nil {
		return *x.Fold
	}
	return false
}

func (x *DZPK_WaitOpt) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

func (x *DZPK_WaitOpt) GetBetaddvalue() []int32 {
	if x != nil {
		return x.Betaddvalue
	}
	return nil
}

type DZPK_WaitOptSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo      *int32              `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`           //座位号
	OptTime     *int32              `protobuf:"varint,2,req,name=optTime" json:"optTime,omitempty"`         //可操作时间
	Op          []*DZPK_Operability `protobuf:"bytes,3,rep,name=op" json:"op,omitempty"`                    //可操作信息
	TotalJetton *int64              `protobuf:"varint,4,req,name=TotalJetton" json:"TotalJetton,omitempty"` //当前底池
}

func (x *DZPK_WaitOptSeat) Reset() {
	*x = DZPK_WaitOptSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_WaitOptSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_WaitOptSeat) ProtoMessage() {}

func (x *DZPK_WaitOptSeat) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_WaitOptSeat.ProtoReflect.Descriptor instead.
func (*DZPK_WaitOptSeat) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{1}
}

func (x *DZPK_WaitOptSeat) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_WaitOptSeat) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

func (x *DZPK_WaitOptSeat) GetOp() []*DZPK_Operability {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *DZPK_WaitOptSeat) GetTotalJetton() int64 {
	if x != nil && x.TotalJetton != nil {
		return *x.TotalJetton
	}
	return 0
}

type DZPK_Operability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType   *int32 `protobuf:"varint,1,req,name=opType" json:"opType,omitempty"`
	OpJetton *int64 `protobuf:"varint,2,req,name=opJetton" json:"opJetton,omitempty"`
}

func (x *DZPK_Operability) Reset() {
	*x = DZPK_Operability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_Operability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_Operability) ProtoMessage() {}

func (x *DZPK_Operability) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_Operability.ProtoReflect.Descriptor instead.
func (*DZPK_Operability) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{2}
}

func (x *DZPK_Operability) GetOpType() int32 {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return 0
}

func (x *DZPK_Operability) GetOpJetton() int64 {
	if x != nil && x.OpJetton != nil {
		return *x.OpJetton
	}
	return 0
}

//选中座位号
type DZPK_SeatNO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
}

func (x *DZPK_SeatNO) Reset() {
	*x = DZPK_SeatNO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_SeatNO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_SeatNO) ProtoMessage() {}

func (x *DZPK_SeatNO) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_SeatNO.ProtoReflect.Descriptor instead.
func (*DZPK_SeatNO) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{3}
}

func (x *DZPK_SeatNO) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

//下底操作
type DZPK_BetBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Betbasedata []*DZPK_BetBaseInfo `protobuf:"bytes,1,rep,name=Betbasedata" json:"Betbasedata,omitempty"`
}

func (x *DZPK_BetBase) Reset() {
	*x = DZPK_BetBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BetBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BetBase) ProtoMessage() {}

func (x *DZPK_BetBase) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BetBase.ProtoReflect.Descriptor instead.
func (*DZPK_BetBase) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{4}
}

func (x *DZPK_BetBase) GetBetbasedata() []*DZPK_BetBaseInfo {
	if x != nil {
		return x.Betbasedata
	}
	return nil
}

type DZPK_BetBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo  *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`   //座位号
	Betbase *int64 `protobuf:"varint,2,req,name=betbase" json:"betbase,omitempty"` //盲注筹码
	Role    *int32 `protobuf:"varint,3,req,name=Role" json:"Role,omitempty"`       //角色
}

func (x *DZPK_BetBaseInfo) Reset() {
	*x = DZPK_BetBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BetBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BetBaseInfo) ProtoMessage() {}

func (x *DZPK_BetBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BetBaseInfo.ProtoReflect.Descriptor instead.
func (*DZPK_BetBaseInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{5}
}

func (x *DZPK_BetBaseInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_BetBaseInfo) GetBetbase() int64 {
	if x != nil && x.Betbase != nil {
		return *x.Betbase
	}
	return 0
}

func (x *DZPK_BetBaseInfo) GetRole() int32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

//客户端请求：下注
type DZPK_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jetton *int64 `protobuf:"varint,1,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_Bet) Reset() {
	*x = DZPK_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_Bet) ProtoMessage() {}

func (x *DZPK_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_Bet.ProtoReflect.Descriptor instead.
func (*DZPK_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{6}
}

func (x *DZPK_Bet) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//客户端请求：加注
type DZPK_Raise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jetton *int64 `protobuf:"varint,1,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_Raise) Reset() {
	*x = DZPK_Raise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_Raise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_Raise) ProtoMessage() {}

func (x *DZPK_Raise) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_Raise.ProtoReflect.Descriptor instead.
func (*DZPK_Raise) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{7}
}

func (x *DZPK_Raise) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//客户端请求：看牌，过
type DZPK_Check struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jetton *int64 `protobuf:"varint,1,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_Check) Reset() {
	*x = DZPK_Check{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_Check) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_Check) ProtoMessage() {}

func (x *DZPK_Check) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_Check.ProtoReflect.Descriptor instead.
func (*DZPK_Check) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{8}
}

func (x *DZPK_Check) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//客户端请求：跟注
type DZPK_Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jetton *int64 `protobuf:"varint,1,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_Call) Reset() {
	*x = DZPK_Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_Call) ProtoMessage() {}

func (x *DZPK_Call) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_Call.ProtoReflect.Descriptor instead.
func (*DZPK_Call) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{9}
}

func (x *DZPK_Call) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//客户端请求：Allin
type DZPK_AllIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jetton *int64 `protobuf:"varint,1,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_AllIn) Reset() {
	*x = DZPK_AllIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_AllIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_AllIn) ProtoMessage() {}

func (x *DZPK_AllIn) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_AllIn.ProtoReflect.Descriptor instead.
func (*DZPK_AllIn) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{10}
}

func (x *DZPK_AllIn) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//客户端请求：弃牌
type DZPK_Fold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jetton *int64 `protobuf:"varint,1,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_Fold) Reset() {
	*x = DZPK_Fold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_Fold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_Fold) ProtoMessage() {}

func (x *DZPK_Fold) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_Fold.ProtoReflect.Descriptor instead.
func (*DZPK_Fold) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{11}
}

func (x *DZPK_Fold) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//服务端消息：广播下注消息
type DZPK_BrodCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Jetton *int64 `protobuf:"varint,2,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_BrodCastBet) Reset() {
	*x = DZPK_BrodCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BrodCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BrodCastBet) ProtoMessage() {}

func (x *DZPK_BrodCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BrodCastBet.ProtoReflect.Descriptor instead.
func (*DZPK_BrodCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{12}
}

func (x *DZPK_BrodCastBet) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_BrodCastBet) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//服务端消息：广播加注消息
type DZPK_BrodCastRaise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Jetton *int64 `protobuf:"varint,2,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_BrodCastRaise) Reset() {
	*x = DZPK_BrodCastRaise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BrodCastRaise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BrodCastRaise) ProtoMessage() {}

func (x *DZPK_BrodCastRaise) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BrodCastRaise.ProtoReflect.Descriptor instead.
func (*DZPK_BrodCastRaise) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{13}
}

func (x *DZPK_BrodCastRaise) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_BrodCastRaise) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//服务端消息：广播跟注消息
type DZPK_BrodCastCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Jetton *int64 `protobuf:"varint,2,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_BrodCastCall) Reset() {
	*x = DZPK_BrodCastCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BrodCastCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BrodCastCall) ProtoMessage() {}

func (x *DZPK_BrodCastCall) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BrodCastCall.ProtoReflect.Descriptor instead.
func (*DZPK_BrodCastCall) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{14}
}

func (x *DZPK_BrodCastCall) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_BrodCastCall) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//服务端消息：广播过，看牌消息
type DZPK_BrodCastCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Jetton *int64 `protobuf:"varint,2,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_BrodCastCheck) Reset() {
	*x = DZPK_BrodCastCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BrodCastCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BrodCastCheck) ProtoMessage() {}

func (x *DZPK_BrodCastCheck) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BrodCastCheck.ProtoReflect.Descriptor instead.
func (*DZPK_BrodCastCheck) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{15}
}

func (x *DZPK_BrodCastCheck) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_BrodCastCheck) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//服务端消息：广播Allin消息
type DZPK_BrodCastAllIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Jetton *int64 `protobuf:"varint,2,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_BrodCastAllIn) Reset() {
	*x = DZPK_BrodCastAllIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BrodCastAllIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BrodCastAllIn) ProtoMessage() {}

func (x *DZPK_BrodCastAllIn) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BrodCastAllIn.ProtoReflect.Descriptor instead.
func (*DZPK_BrodCastAllIn) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{16}
}

func (x *DZPK_BrodCastAllIn) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_BrodCastAllIn) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

//服务端消息：广播弃牌消息
type DZPK_BrodCastFold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Jetton *int64 `protobuf:"varint,2,req,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_BrodCastFold) Reset() {
	*x = DZPK_BrodCastFold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BrodCastFold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BrodCastFold) ProtoMessage() {}

func (x *DZPK_BrodCastFold) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BrodCastFold.ProtoReflect.Descriptor instead.
func (*DZPK_BrodCastFold) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{17}
}

func (x *DZPK_BrodCastFold) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_BrodCastFold) GetJetton() int64 {
	if x != nil && x.Jetton != nil {
		return *x.Jetton
	}
	return 0
}

type DZPK_GameRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinSeatNO  *int32        `protobuf:"varint,1,req,name=winSeatNO" json:"winSeatNO,omitempty"`
	Money      *int32        `protobuf:"varint,2,req,name=money" json:"money,omitempty"`
	OtherPoker []*DZPK_Poker `protobuf:"bytes,3,rep,name=OtherPoker" json:"OtherPoker,omitempty"`
}

func (x *DZPK_GameRet) Reset() {
	*x = DZPK_GameRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_GameRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_GameRet) ProtoMessage() {}

func (x *DZPK_GameRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_GameRet.ProtoReflect.Descriptor instead.
func (*DZPK_GameRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{18}
}

func (x *DZPK_GameRet) GetWinSeatNO() int32 {
	if x != nil && x.WinSeatNO != nil {
		return *x.WinSeatNO
	}
	return 0
}

func (x *DZPK_GameRet) GetMoney() int32 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *DZPK_GameRet) GetOtherPoker() []*DZPK_Poker {
	if x != nil {
		return x.OtherPoker
	}
	return nil
}

type DZPK_Poker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PokerType      *int32     `protobuf:"varint,1,req,name=PokerType" json:"PokerType,omitempty"`
	Userpokergroup *UserPoker `protobuf:"bytes,2,req,name=userpokergroup" json:"userpokergroup,omitempty"`
}

func (x *DZPK_Poker) Reset() {
	*x = DZPK_Poker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_Poker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_Poker) ProtoMessage() {}

func (x *DZPK_Poker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_Poker.ProtoReflect.Descriptor instead.
func (*DZPK_Poker) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{19}
}

func (x *DZPK_Poker) GetPokerType() int32 {
	if x != nil && x.PokerType != nil {
		return *x.PokerType
	}
	return 0
}

func (x *DZPK_Poker) GetUserpokergroup() *UserPoker {
	if x != nil {
		return x.Userpokergroup
	}
	return nil
}

//服务端消息：发牌结构，用于开局发两张私有牌
type DZPK_PrivatePoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*DZPK_PrivateCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
}

func (x *DZPK_PrivatePoker) Reset() {
	*x = DZPK_PrivatePoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_PrivatePoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_PrivatePoker) ProtoMessage() {}

func (x *DZPK_PrivatePoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_PrivatePoker.ProtoReflect.Descriptor instead.
func (*DZPK_PrivatePoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{20}
}

func (x *DZPK_PrivatePoker) GetCards() []*DZPK_PrivateCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type DZPK_PrivateCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32       `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Cards  []*PokerCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
}

func (x *DZPK_PrivateCard) Reset() {
	*x = DZPK_PrivateCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_PrivateCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_PrivateCard) ProtoMessage() {}

func (x *DZPK_PrivateCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_PrivateCard.ProtoReflect.Descriptor instead.
func (*DZPK_PrivateCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{21}
}

func (x *DZPK_PrivateCard) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_PrivateCard) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

//服务端消息：牌结构体
type DZPK_BrodCastCardsPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32       `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"` //0,私有牌；1公共牌
	Cards []*PokerCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
}

func (x *DZPK_BrodCastCardsPoker) Reset() {
	*x = DZPK_BrodCastCardsPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BrodCastCardsPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BrodCastCardsPoker) ProtoMessage() {}

func (x *DZPK_BrodCastCardsPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BrodCastCardsPoker.ProtoReflect.Descriptor instead.
func (*DZPK_BrodCastCardsPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{22}
}

func (x *DZPK_BrodCastCardsPoker) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DZPK_BrodCastCardsPoker) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

//服务端消息：彩池结构
type DZPK_BroadCastPotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jetton []int64 `protobuf:"varint,1,rep,name=jetton" json:"jetton,omitempty"`
}

func (x *DZPK_BroadCastPotInfo) Reset() {
	*x = DZPK_BroadCastPotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BroadCastPotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BroadCastPotInfo) ProtoMessage() {}

func (x *DZPK_BroadCastPotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BroadCastPotInfo.ProtoReflect.Descriptor instead.
func (*DZPK_BroadCastPotInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{23}
}

func (x *DZPK_BroadCastPotInfo) GetJetton() []int64 {
	if x != nil {
		return x.Jetton
	}
	return nil
}

// 服务端消息：更新用户牌型信息
type DZPK_BroadCastCardType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
}

func (x *DZPK_BroadCastCardType) Reset() {
	*x = DZPK_BroadCastCardType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BroadCastCardType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BroadCastCardType) ProtoMessage() {}

func (x *DZPK_BroadCastCardType) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BroadCastCardType.ProtoReflect.Descriptor instead.
func (*DZPK_BroadCastCardType) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{24}
}

func (x *DZPK_BroadCastCardType) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

// 服务端消息：亮牌，比牌
type DZPK_BroadCastSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *int32 `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"`
}

func (x *DZPK_BroadCastSettlement) Reset() {
	*x = DZPK_BroadCastSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_BroadCastSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_BroadCastSettlement) ProtoMessage() {}

func (x *DZPK_BroadCastSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_BroadCastSettlement.ProtoReflect.Descriptor instead.
func (*DZPK_BroadCastSettlement) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{25}
}

func (x *DZPK_BroadCastSettlement) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

//服务端消息：用户断线重连数据结构
type DZPK_UserInfoArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrOptSeatNo *int32           `protobuf:"varint,1,req,name=CurrOptSeatNo" json:"CurrOptSeatNo,omitempty"`
	OptTime       *int32           `protobuf:"varint,2,req,name=OptTime" json:"OptTime,omitempty"`
	OptTimeTotal  *int32           `protobuf:"varint,3,req,name=OptTimeTotal" json:"OptTimeTotal,omitempty"`
	ButtonNO      *int32           `protobuf:"varint,4,req,name=ButtonNO" json:"ButtonNO,omitempty"`
	JettonTotal   *int64           `protobuf:"varint,5,req,name=JettonTotal" json:"JettonTotal,omitempty"`
	UserInfo      []*DZPK_UserInfo `protobuf:"bytes,6,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *DZPK_UserInfoArr) Reset() {
	*x = DZPK_UserInfoArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_UserInfoArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_UserInfoArr) ProtoMessage() {}

func (x *DZPK_UserInfoArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_UserInfoArr.ProtoReflect.Descriptor instead.
func (*DZPK_UserInfoArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{26}
}

func (x *DZPK_UserInfoArr) GetCurrOptSeatNo() int32 {
	if x != nil && x.CurrOptSeatNo != nil {
		return *x.CurrOptSeatNo
	}
	return 0
}

func (x *DZPK_UserInfoArr) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

func (x *DZPK_UserInfoArr) GetOptTimeTotal() int32 {
	if x != nil && x.OptTimeTotal != nil {
		return *x.OptTimeTotal
	}
	return 0
}

func (x *DZPK_UserInfoArr) GetButtonNO() int32 {
	if x != nil && x.ButtonNO != nil {
		return *x.ButtonNO
	}
	return 0
}

func (x *DZPK_UserInfoArr) GetJettonTotal() int64 {
	if x != nil && x.JettonTotal != nil {
		return *x.JettonTotal
	}
	return 0
}

func (x *DZPK_UserInfoArr) GetUserInfo() []*DZPK_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type DZPK_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Bfold  *bool  `protobuf:"varint,3,req,name=bfold" json:"bfold,omitempty"`
}

func (x *DZPK_UserInfo) Reset() {
	*x = DZPK_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_UserInfo) ProtoMessage() {}

func (x *DZPK_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_UserInfo.ProtoReflect.Descriptor instead.
func (*DZPK_UserInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{27}
}

func (x *DZPK_UserInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_UserInfo) GetBfold() bool {
	if x != nil && x.Bfold != nil {
		return *x.Bfold
	}
	return false
}

//********************************************
//服务端消息：单局结算信息
type DZPK_SettleMentRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PotData []*DZPK_PotInfo `protobuf:"bytes,1,rep,name=PotData" json:"PotData,omitempty"`
}

func (x *DZPK_SettleMentRound) Reset() {
	*x = DZPK_SettleMentRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_SettleMentRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_SettleMentRound) ProtoMessage() {}

func (x *DZPK_SettleMentRound) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_SettleMentRound.ProtoReflect.Descriptor instead.
func (*DZPK_SettleMentRound) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{28}
}

func (x *DZPK_SettleMentRound) GetPotData() []*DZPK_PotInfo {
	if x != nil {
		return x.PotData
	}
	return nil
}

type DZPK_PotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PotIndex *int32              `protobuf:"varint,1,req,name=PotIndex" json:"PotIndex,omitempty"` //奖池号
	UserInfo []*DZPK_PotUserInfo `protobuf:"bytes,2,rep,name=UserInfo" json:"UserInfo,omitempty"`  //赢得奖池的玩家信息
}

func (x *DZPK_PotInfo) Reset() {
	*x = DZPK_PotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_PotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_PotInfo) ProtoMessage() {}

func (x *DZPK_PotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_PotInfo.ProtoReflect.Descriptor instead.
func (*DZPK_PotInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{29}
}

func (x *DZPK_PotInfo) GetPotIndex() int32 {
	if x != nil && x.PotIndex != nil {
		return *x.PotIndex
	}
	return 0
}

func (x *DZPK_PotInfo) GetUserInfo() []*DZPK_PotUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type DZPK_PotUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo    *int32       `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`       //座位号
	WinJetton *int64       `protobuf:"varint,2,req,name=WinJetton" json:"WinJetton,omitempty"` //获得的筹码
	CardType  *int32       `protobuf:"varint,3,opt,name=CardType" json:"CardType,omitempty"`   //胜利者牌型
	Cards     []*PokerCard `protobuf:"bytes,4,rep,name=Cards" json:"Cards,omitempty"`          //胜利者牌（只显示最大胜利者）
}

func (x *DZPK_PotUserInfo) Reset() {
	*x = DZPK_PotUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_PotUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_PotUserInfo) ProtoMessage() {}

func (x *DZPK_PotUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_PotUserInfo.ProtoReflect.Descriptor instead.
func (*DZPK_PotUserInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{30}
}

func (x *DZPK_PotUserInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_PotUserInfo) GetWinJetton() int64 {
	if x != nil && x.WinJetton != nil {
		return *x.WinJetton
	}
	return 0
}

func (x *DZPK_PotUserInfo) GetCardType() int32 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

func (x *DZPK_PotUserInfo) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

//服务端消息：游戏设置
type DZPK_GameSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo    *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`       //座位号
	Bigblind  *int64 `protobuf:"varint,2,req,name=Bigblind" json:"Bigblind,omitempty"`   //大盲盲注
	ReadyTime *int32 `protobuf:"varint,3,req,name=ReadyTime" json:"ReadyTime,omitempty"` //准备时间
}

func (x *DZPK_GameSetting) Reset() {
	*x = DZPK_GameSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_GameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_GameSetting) ProtoMessage() {}

func (x *DZPK_GameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_GameSetting.ProtoReflect.Descriptor instead.
func (*DZPK_GameSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{31}
}

func (x *DZPK_GameSetting) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_GameSetting) GetBigblind() int64 {
	if x != nil && x.Bigblind != nil {
		return *x.Bigblind
	}
	return 0
}

func (x *DZPK_GameSetting) GetReadyTime() int32 {
	if x != nil && x.ReadyTime != nil {
		return *x.ReadyTime
	}
	return 0
}

//***********************************************
//服务端消息：游戏场景
type DZPK_GameSence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameState         *int32            `protobuf:"varint,1,req,name=GameState" json:"GameState,omitempty"`                 //游戏状态阶段
	PubCards          []*PokerCard      `protobuf:"bytes,2,rep,name=PubCards" json:"PubCards,omitempty"`                    //公共牌
	Users             []*DZPK_UsersInfo `protobuf:"bytes,3,rep,name=Users" json:"Users,omitempty"`                          //其他玩家信息
	Pots              []int64           `protobuf:"varint,4,rep,name=Pots" json:"Pots,omitempty"`                           //玩家奖池
	CurOprationSeatNo *int32            `protobuf:"varint,5,req,name=CurOprationSeatNo" json:"CurOprationSeatNo,omitempty"` //当前操作玩家座位号
	BeginOutTime      *int32            `protobuf:"varint,6,req,name=BeginOutTime" json:"BeginOutTime,omitempty"`           //当前玩家开始操作倒计时，unix时间戳
	OpWaitTime        *int32            `protobuf:"varint,7,req,name=OpWaitTime" json:"OpWaitTime,omitempty"`               //操作等待时间
}

func (x *DZPK_GameSence) Reset() {
	*x = DZPK_GameSence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_GameSence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_GameSence) ProtoMessage() {}

func (x *DZPK_GameSence) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_GameSence.ProtoReflect.Descriptor instead.
func (*DZPK_GameSence) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{32}
}

func (x *DZPK_GameSence) GetGameState() int32 {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return 0
}

func (x *DZPK_GameSence) GetPubCards() []*PokerCard {
	if x != nil {
		return x.PubCards
	}
	return nil
}

func (x *DZPK_GameSence) GetUsers() []*DZPK_UsersInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *DZPK_GameSence) GetPots() []int64 {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *DZPK_GameSence) GetCurOprationSeatNo() int32 {
	if x != nil && x.CurOprationSeatNo != nil {
		return *x.CurOprationSeatNo
	}
	return 0
}

func (x *DZPK_GameSence) GetBeginOutTime() int32 {
	if x != nil && x.BeginOutTime != nil {
		return *x.BeginOutTime
	}
	return 0
}

func (x *DZPK_GameSence) GetOpWaitTime() int32 {
	if x != nil && x.OpWaitTime != nil {
		return *x.OpWaitTime
	}
	return 0
}

type DZPK_UsersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo           *int32              `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`                     //座位号
	Role             *int32              `protobuf:"varint,2,req,name=Role" json:"Role,omitempty"`                         //玩家角色
	CardType         *int32              `protobuf:"varint,3,req,name=CardType" json:"CardType,omitempty"`                 //玩家牌型
	TotalJetton      *int64              `protobuf:"varint,4,req,name=TotalJetton" json:"TotalJetton,omitempty"`           //玩家总筹码
	CurBetJetton     *int64              `protobuf:"varint,5,req,name=CurBetJetton" json:"CurBetJetton,omitempty"`         //玩家当前下注筹码筹码
	Cards            []*PokerCard        `protobuf:"bytes,6,rep,name=Cards" json:"Cards,omitempty"`                        //玩家私有牌
	UserState        *int32              `protobuf:"varint,7,req,name=UserState" json:"UserState,omitempty"`               //玩家状态：-1未参与游戏，0游戏，1弃牌，2Allin
	Op               []*DZPK_Operability `protobuf:"bytes,8,rep,name=op" json:"op,omitempty"`                              //可操作信息
	CurTurnBetJetton *int64              `protobuf:"varint,9,req,name=CurTurnBetJetton" json:"CurTurnBetJetton,omitempty"` //玩家当前轮下注筹码筹码
	NetProfit        *int64              `protobuf:"varint,10,req,name=NetProfit" json:"NetProfit,omitempty"`              //玩家当前纯利润
}

func (x *DZPK_UsersInfo) Reset() {
	*x = DZPK_UsersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_UsersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_UsersInfo) ProtoMessage() {}

func (x *DZPK_UsersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_UsersInfo.ProtoReflect.Descriptor instead.
func (*DZPK_UsersInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{33}
}

func (x *DZPK_UsersInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_UsersInfo) GetRole() int32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *DZPK_UsersInfo) GetCardType() int32 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

func (x *DZPK_UsersInfo) GetTotalJetton() int64 {
	if x != nil && x.TotalJetton != nil {
		return *x.TotalJetton
	}
	return 0
}

func (x *DZPK_UsersInfo) GetCurBetJetton() int64 {
	if x != nil && x.CurBetJetton != nil {
		return *x.CurBetJetton
	}
	return 0
}

func (x *DZPK_UsersInfo) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DZPK_UsersInfo) GetUserState() int32 {
	if x != nil && x.UserState != nil {
		return *x.UserState
	}
	return 0
}

func (x *DZPK_UsersInfo) GetOp() []*DZPK_Operability {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *DZPK_UsersInfo) GetCurTurnBetJetton() int64 {
	if x != nil && x.CurTurnBetJetton != nil {
		return *x.CurTurnBetJetton
	}
	return 0
}

func (x *DZPK_UsersInfo) GetNetProfit() int64 {
	if x != nil && x.NetProfit != nil {
		return *x.NetProfit
	}
	return 0
}

type DZPK_ErrorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorType *int32  `protobuf:"varint,1,req,name=ErrorType" json:"ErrorType,omitempty"` //错误类型，-1操作错误
	ErrorInfo *string `protobuf:"bytes,2,req,name=ErrorInfo" json:"ErrorInfo,omitempty"`  //错误信息
}

func (x *DZPK_ErrorMsg) Reset() {
	*x = DZPK_ErrorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_ErrorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_ErrorMsg) ProtoMessage() {}

func (x *DZPK_ErrorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_ErrorMsg.ProtoReflect.Descriptor instead.
func (*DZPK_ErrorMsg) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{34}
}

func (x *DZPK_ErrorMsg) GetErrorType() int32 {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return 0
}

func (x *DZPK_ErrorMsg) GetErrorInfo() string {
	if x != nil && x.ErrorInfo != nil {
		return *x.ErrorInfo
	}
	return ""
}

//***********************************************
//所有玩家手牌
type DZPK_UserCardsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DZPK_UserHandCards `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"` //用户数据
}

func (x *DZPK_UserCardsInfo) Reset() {
	*x = DZPK_UserCardsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_UserCardsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_UserCardsInfo) ProtoMessage() {}

func (x *DZPK_UserCardsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_UserCardsInfo.ProtoReflect.Descriptor instead.
func (*DZPK_UserCardsInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{35}
}

func (x *DZPK_UserCardsInfo) GetData() []*DZPK_UserHandCards {
	if x != nil {
		return x.Data
	}
	return nil
}

type DZPK_UserHandCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo   *int32       `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`     //座位号
	Cards    []*PokerCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`        //手牌
	CardType *int32       `protobuf:"varint,3,req,name=CardType" json:"CardType,omitempty"` //玩家牌型
}

func (x *DZPK_UserHandCards) Reset() {
	*x = DZPK_UserHandCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_UserHandCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_UserHandCards) ProtoMessage() {}

func (x *DZPK_UserHandCards) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_UserHandCards.ProtoReflect.Descriptor instead.
func (*DZPK_UserHandCards) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{36}
}

func (x *DZPK_UserHandCards) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_UserHandCards) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DZPK_UserHandCards) GetCardType() int32 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

//预操作
type DZPK_PreOpration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32              `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"` //座位号
	Op     []*DZPK_Operability `protobuf:"bytes,2,rep,name=op" json:"op,omitempty"`          //可操作信息
}

func (x *DZPK_PreOpration) Reset() {
	*x = DZPK_PreOpration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_PreOpration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_PreOpration) ProtoMessage() {}

func (x *DZPK_PreOpration) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_PreOpration.ProtoReflect.Descriptor instead.
func (*DZPK_PreOpration) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{37}
}

func (x *DZPK_PreOpration) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DZPK_PreOpration) GetOp() []*DZPK_Operability {
	if x != nil {
		return x.Op
	}
	return nil
}

//GM
type DZPK_GM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commond *string `protobuf:"bytes,1,req,name=Commond" json:"Commond,omitempty"` //命令
}

func (x *DZPK_GM) Reset() {
	*x = DZPK_GM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DZPK_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPK_GM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPK_GM) ProtoMessage() {}

func (x *DZPK_GM) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DZPK_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPK_GM.ProtoReflect.Descriptor instead.
func (*DZPK_GM) Descriptor() ([]byte, []int) {
	return file_GameMsg_DZPK_proto_rawDescGZIP(), []int{38}
}

func (x *DZPK_GM) GetCommond() string {
	if x != nil && x.Commond != nil {
		return *x.Commond
	}
	return ""
}

var File_GameMsg_DZPK_proto protoreflect.FileDescriptor

var file_GameMsg_DZPK_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x5a, 0x50, 0x4b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01,
	0x0a, 0x0c, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x62, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x05, 0x72, 0x61, 0x69, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x6c, 0x64, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x64, 0x64, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x64,
	0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x44, 0x5a, 0x50, 0x4b, 0x5f,
	0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x10, 0x44,
	0x5a, 0x50, 0x4b, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x4a, 0x65, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x4a, 0x65, 0x74,
	0x74, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x0b, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x53, 0x65, 0x61, 0x74,
	0x4e, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x22, 0x4c, 0x0a, 0x0c, 0x44, 0x5a,
	0x50, 0x4b, 0x5f, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x42, 0x65,
	0x74, 0x62, 0x61, 0x73, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f,
	0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x42, 0x65, 0x74,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x10, 0x44, 0x5a, 0x50, 0x4b,
	0x5f, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x74, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x22, 0x22, 0x0a, 0x08, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x0a, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x52,
	0x61, 0x69, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x0a,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74,
	0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x09, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x0a, 0x44, 0x5a, 0x50, 0x4b, 0x5f,
	0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x23, 0x0a,
	0x09, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74,
	0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x10, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42,
	0x72, 0x6f, 0x64, 0x43, 0x61, 0x73, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x11,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f,
	0x6e, 0x22, 0x44, 0x0a, 0x12, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x43, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12, 0x44, 0x5a, 0x50, 0x4b, 0x5f,
	0x42, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x43, 0x0a,
	0x11, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x73, 0x74, 0x46, 0x6f,
	0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74,
	0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x0c, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x0a,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x45, 0x0a, 0x11, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x10,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x58, 0x0a, 0x17, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x2f, 0x0a,
	0x15, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x2c,
	0x0a, 0x16, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x18,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xe9, 0x01, 0x0a, 0x10, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x75,
	0x72, 0x72, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x70, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x4e, 0x4f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x4e, 0x4f, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x4a, 0x65, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x0d,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x66, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x62, 0x66, 0x6f, 0x6c, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x44,
	0x5a, 0x50, 0x4b, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x0c, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x36, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x44, 0x5a,
	0x50, 0x4b, 0x5f, 0x50, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x4a, 0x65, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x4a, 0x65,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x10, 0x44,
	0x5a, 0x50, 0x4b, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x67, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x42, 0x69, 0x67, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x95, 0x02, 0x0a, 0x0e, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x75, 0x62, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x50, 0x75, 0x62, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a,
	0x50, 0x4b, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x04, 0x50, 0x6f, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x4f, 0x70,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x11, 0x43, 0x75, 0x72, 0x4f, 0x70, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4f, 0x75,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x57,
	0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x4f,
	0x70, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x0e, 0x44, 0x5a,
	0x50, 0x4b, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x65, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x42, 0x65, 0x74,
	0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x75,
	0x72, 0x42, 0x65, 0x74, 0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x42, 0x65, 0x74, 0x4a, 0x65, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x43, 0x75, 0x72, 0x54, 0x75,
	0x72, 0x6e, 0x42, 0x65, 0x74, 0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4e,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x4e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x4b, 0x0a, 0x0d, 0x44, 0x5a, 0x50,
	0x4b, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x12, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73,
	0x0a, 0x12, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x05,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x50, 0x72, 0x65, 0x4f,
	0x70, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12,
	0x2a, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x5f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x23, 0x0a, 0x07, 0x44,
	0x5a, 0x50, 0x4b, 0x5f, 0x47, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_DZPK_proto_rawDescOnce sync.Once
	file_GameMsg_DZPK_proto_rawDescData = file_GameMsg_DZPK_proto_rawDesc
)

func file_GameMsg_DZPK_proto_rawDescGZIP() []byte {
	file_GameMsg_DZPK_proto_rawDescOnce.Do(func() {
		file_GameMsg_DZPK_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_DZPK_proto_rawDescData)
	})
	return file_GameMsg_DZPK_proto_rawDescData
}

var file_GameMsg_DZPK_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_GameMsg_DZPK_proto_goTypes = []interface{}{
	(*DZPK_WaitOpt)(nil),             // 0: netproto.DZPK_WaitOpt
	(*DZPK_WaitOptSeat)(nil),         // 1: netproto.DZPK_WaitOptSeat
	(*DZPK_Operability)(nil),         // 2: netproto.DZPK_Operability
	(*DZPK_SeatNO)(nil),              // 3: netproto.DZPK_SeatNO
	(*DZPK_BetBase)(nil),             // 4: netproto.DZPK_BetBase
	(*DZPK_BetBaseInfo)(nil),         // 5: netproto.DZPK_BetBaseInfo
	(*DZPK_Bet)(nil),                 // 6: netproto.DZPK_Bet
	(*DZPK_Raise)(nil),               // 7: netproto.DZPK_Raise
	(*DZPK_Check)(nil),               // 8: netproto.DZPK_Check
	(*DZPK_Call)(nil),                // 9: netproto.DZPK_Call
	(*DZPK_AllIn)(nil),               // 10: netproto.DZPK_AllIn
	(*DZPK_Fold)(nil),                // 11: netproto.DZPK_Fold
	(*DZPK_BrodCastBet)(nil),         // 12: netproto.DZPK_BrodCastBet
	(*DZPK_BrodCastRaise)(nil),       // 13: netproto.DZPK_BrodCastRaise
	(*DZPK_BrodCastCall)(nil),        // 14: netproto.DZPK_BrodCastCall
	(*DZPK_BrodCastCheck)(nil),       // 15: netproto.DZPK_BrodCastCheck
	(*DZPK_BrodCastAllIn)(nil),       // 16: netproto.DZPK_BrodCastAllIn
	(*DZPK_BrodCastFold)(nil),        // 17: netproto.DZPK_BrodCastFold
	(*DZPK_GameRet)(nil),             // 18: netproto.DZPK_GameRet
	(*DZPK_Poker)(nil),               // 19: netproto.DZPK_Poker
	(*DZPK_PrivatePoker)(nil),        // 20: netproto.DZPK_PrivatePoker
	(*DZPK_PrivateCard)(nil),         // 21: netproto.DZPK_PrivateCard
	(*DZPK_BrodCastCardsPoker)(nil),  // 22: netproto.DZPK_BrodCastCardsPoker
	(*DZPK_BroadCastPotInfo)(nil),    // 23: netproto.DZPK_BroadCastPotInfo
	(*DZPK_BroadCastCardType)(nil),   // 24: netproto.DZPK_BroadCastCardType
	(*DZPK_BroadCastSettlement)(nil), // 25: netproto.DZPK_BroadCastSettlement
	(*DZPK_UserInfoArr)(nil),         // 26: netproto.DZPK_UserInfoArr
	(*DZPK_UserInfo)(nil),            // 27: netproto.DZPK_UserInfo
	(*DZPK_SettleMentRound)(nil),     // 28: netproto.DZPK_SettleMentRound
	(*DZPK_PotInfo)(nil),             // 29: netproto.DZPK_PotInfo
	(*DZPK_PotUserInfo)(nil),         // 30: netproto.DZPK_PotUserInfo
	(*DZPK_GameSetting)(nil),         // 31: netproto.DZPK_GameSetting
	(*DZPK_GameSence)(nil),           // 32: netproto.DZPK_GameSence
	(*DZPK_UsersInfo)(nil),           // 33: netproto.DZPK_UsersInfo
	(*DZPK_ErrorMsg)(nil),            // 34: netproto.DZPK_ErrorMsg
	(*DZPK_UserCardsInfo)(nil),       // 35: netproto.DZPK_UserCardsInfo
	(*DZPK_UserHandCards)(nil),       // 36: netproto.DZPK_UserHandCards
	(*DZPK_PreOpration)(nil),         // 37: netproto.DZPK_PreOpration
	(*DZPK_GM)(nil),                  // 38: netproto.DZPK_GM
	(*UserPoker)(nil),                // 39: netproto.UserPoker
	(*PokerCard)(nil),                // 40: netproto.PokerCard
}
var file_GameMsg_DZPK_proto_depIdxs = []int32{
	2,  // 0: netproto.DZPK_WaitOptSeat.op:type_name -> netproto.DZPK_Operability
	5,  // 1: netproto.DZPK_BetBase.Betbasedata:type_name -> netproto.DZPK_BetBaseInfo
	19, // 2: netproto.DZPK_GameRet.OtherPoker:type_name -> netproto.DZPK_Poker
	39, // 3: netproto.DZPK_Poker.userpokergroup:type_name -> netproto.UserPoker
	21, // 4: netproto.DZPK_PrivatePoker.Cards:type_name -> netproto.DZPK_PrivateCard
	40, // 5: netproto.DZPK_PrivateCard.Cards:type_name -> netproto.PokerCard
	40, // 6: netproto.DZPK_BrodCastCardsPoker.Cards:type_name -> netproto.PokerCard
	27, // 7: netproto.DZPK_UserInfoArr.UserInfo:type_name -> netproto.DZPK_UserInfo
	29, // 8: netproto.DZPK_SettleMentRound.PotData:type_name -> netproto.DZPK_PotInfo
	30, // 9: netproto.DZPK_PotInfo.UserInfo:type_name -> netproto.DZPK_PotUserInfo
	40, // 10: netproto.DZPK_PotUserInfo.Cards:type_name -> netproto.PokerCard
	40, // 11: netproto.DZPK_GameSence.PubCards:type_name -> netproto.PokerCard
	33, // 12: netproto.DZPK_GameSence.Users:type_name -> netproto.DZPK_UsersInfo
	40, // 13: netproto.DZPK_UsersInfo.Cards:type_name -> netproto.PokerCard
	2,  // 14: netproto.DZPK_UsersInfo.op:type_name -> netproto.DZPK_Operability
	36, // 15: netproto.DZPK_UserCardsInfo.data:type_name -> netproto.DZPK_UserHandCards
	40, // 16: netproto.DZPK_UserHandCards.Cards:type_name -> netproto.PokerCard
	2,  // 17: netproto.DZPK_PreOpration.op:type_name -> netproto.DZPK_Operability
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_GameMsg_DZPK_proto_init() }
func file_GameMsg_DZPK_proto_init() {
	if File_GameMsg_DZPK_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_DZPK_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_WaitOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_WaitOptSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_Operability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_SeatNO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BetBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BetBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_Raise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_Check); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_AllIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_Fold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BrodCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BrodCastRaise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BrodCastCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BrodCastCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BrodCastAllIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BrodCastFold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_GameRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_Poker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_PrivatePoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_PrivateCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BrodCastCardsPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BroadCastPotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BroadCastCardType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_BroadCastSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_UserInfoArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_SettleMentRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_PotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_PotUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_GameSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_GameSence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_UsersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_ErrorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_UserCardsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_UserHandCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_PreOpration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DZPK_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPK_GM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_DZPK_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_DZPK_proto_goTypes,
		DependencyIndexes: file_GameMsg_DZPK_proto_depIdxs,
		MessageInfos:      file_GameMsg_DZPK_proto_msgTypes,
	}.Build()
	File_GameMsg_DZPK_proto = out.File
	file_GameMsg_DZPK_proto_rawDesc = nil
	file_GameMsg_DZPK_proto_goTypes = nil
	file_GameMsg_DZPK_proto_depIdxs = nil
}
