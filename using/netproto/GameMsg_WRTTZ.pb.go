// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: GameMsg_WRTTZ.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WRTTZ_Flow int32

const (
	WRTTZ_Flow_Prepare  WRTTZ_Flow = 0 //準備
	WRTTZ_Flow_Begin    WRTTZ_Flow = 1 //下注動畫
	WRTTZ_Flow_StartBet WRTTZ_Flow = 2 //下注階段
	WRTTZ_Flow_EndBet   WRTTZ_Flow = 3 //下注結束,停止下注提示
	WRTTZ_Flow_DiceStat WRTTZ_Flow = 4 //搖骰子
	WRTTZ_Flow_DealStat WRTTZ_Flow = 5 //發牌
	WRTTZ_Flow_DrawStat WRTTZ_Flow = 6 //開牌階段
	WRTTZ_Flow_EndState WRTTZ_Flow = 7 //派獎階段
)

// Enum value maps for WRTTZ_Flow.
var (
	WRTTZ_Flow_name = map[int32]string{
		0: "Prepare",
		1: "Begin",
		2: "StartBet",
		3: "EndBet",
		4: "DiceStat",
		5: "DealStat",
		6: "DrawStat",
		7: "EndState",
	}
	WRTTZ_Flow_value = map[string]int32{
		"Prepare":  0,
		"Begin":    1,
		"StartBet": 2,
		"EndBet":   3,
		"DiceStat": 4,
		"DealStat": 5,
		"DrawStat": 6,
		"EndState": 7,
	}
)

func (x WRTTZ_Flow) Enum() *WRTTZ_Flow {
	p := new(WRTTZ_Flow)
	*p = x
	return p
}

func (x WRTTZ_Flow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WRTTZ_Flow) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_WRTTZ_proto_enumTypes[0].Descriptor()
}

func (WRTTZ_Flow) Type() protoreflect.EnumType {
	return &file_GameMsg_WRTTZ_proto_enumTypes[0]
}

func (x WRTTZ_Flow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WRTTZ_Flow) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WRTTZ_Flow(num)
	return nil
}

// Deprecated: Use WRTTZ_Flow.Descriptor instead.
func (WRTTZ_Flow) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{0}
}

//牌型
type WRTTZ_Bet_Ret int32

const (
	WRTTZ_Bet_Ret_BetRetSuccess         WRTTZ_Bet_Ret = 0  //0下注成功
	WRTTZ_Bet_Ret_BetRetNotEnoughMoney  WRTTZ_Bet_Ret = -1 //-1用户金额不足
	WRTTZ_Bet_Ret_BetRetBetTypeNotFound WRTTZ_Bet_Ret = -2 //-2下注的类型未找到
	WRTTZ_Bet_Ret_BetRetBetTypeMaxLimit WRTTZ_Bet_Ret = -4 //-4此类下注已达到上限
	WRTTZ_Bet_Ret_BetRetBetTypeMinLimit WRTTZ_Bet_Ret = -5 //-5下注金額小於現紅
)

// Enum value maps for WRTTZ_Bet_Ret.
var (
	WRTTZ_Bet_Ret_name = map[int32]string{
		0:  "BetRetSuccess",
		-1: "BetRetNotEnoughMoney",
		-2: "BetRetBetTypeNotFound",
		-4: "BetRetBetTypeMaxLimit",
		-5: "BetRetBetTypeMinLimit",
	}
	WRTTZ_Bet_Ret_value = map[string]int32{
		"BetRetSuccess":         0,
		"BetRetNotEnoughMoney":  -1,
		"BetRetBetTypeNotFound": -2,
		"BetRetBetTypeMaxLimit": -4,
		"BetRetBetTypeMinLimit": -5,
	}
)

func (x WRTTZ_Bet_Ret) Enum() *WRTTZ_Bet_Ret {
	p := new(WRTTZ_Bet_Ret)
	*p = x
	return p
}

func (x WRTTZ_Bet_Ret) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WRTTZ_Bet_Ret) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_WRTTZ_proto_enumTypes[1].Descriptor()
}

func (WRTTZ_Bet_Ret) Type() protoreflect.EnumType {
	return &file_GameMsg_WRTTZ_proto_enumTypes[1]
}

func (x WRTTZ_Bet_Ret) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WRTTZ_Bet_Ret) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WRTTZ_Bet_Ret(num)
	return nil
}

// Deprecated: Use WRTTZ_Bet_Ret.Descriptor instead.
func (WRTTZ_Bet_Ret) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{1}
}

type WRTTZ_CardType int32

const (
	WRTTZ_CardType_ZeroPoint  WRTTZ_CardType = 1  //零點
	WRTTZ_CardType_OnePoint   WRTTZ_CardType = 2  //一點
	WRTTZ_CardType_TwoPoint   WRTTZ_CardType = 3  //二點
	WRTTZ_CardType_ThreePoint WRTTZ_CardType = 4  //三點
	WRTTZ_CardType_FourPoint  WRTTZ_CardType = 5  //四點
	WRTTZ_CardType_FivePoint  WRTTZ_CardType = 6  //五點
	WRTTZ_CardType_SixPoint   WRTTZ_CardType = 7  //六點
	WRTTZ_CardType_SevenPoint WRTTZ_CardType = 8  //七點
	WRTTZ_CardType_EightPoint WRTTZ_CardType = 9  //八點
	WRTTZ_CardType_NinePoint  WRTTZ_CardType = 10 //九點
	WRTTZ_CardType_ErBaGang   WRTTZ_CardType = 11 //二八槓
	WRTTZ_CardType_Leopard    WRTTZ_CardType = 12 //豹子
)

// Enum value maps for WRTTZ_CardType.
var (
	WRTTZ_CardType_name = map[int32]string{
		1:  "ZeroPoint",
		2:  "OnePoint",
		3:  "TwoPoint",
		4:  "ThreePoint",
		5:  "FourPoint",
		6:  "FivePoint",
		7:  "SixPoint",
		8:  "SevenPoint",
		9:  "EightPoint",
		10: "NinePoint",
		11: "ErBaGang",
		12: "Leopard",
	}
	WRTTZ_CardType_value = map[string]int32{
		"ZeroPoint":  1,
		"OnePoint":   2,
		"TwoPoint":   3,
		"ThreePoint": 4,
		"FourPoint":  5,
		"FivePoint":  6,
		"SixPoint":   7,
		"SevenPoint": 8,
		"EightPoint": 9,
		"NinePoint":  10,
		"ErBaGang":   11,
		"Leopard":    12,
	}
)

func (x WRTTZ_CardType) Enum() *WRTTZ_CardType {
	p := new(WRTTZ_CardType)
	*p = x
	return p
}

func (x WRTTZ_CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WRTTZ_CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_WRTTZ_proto_enumTypes[2].Descriptor()
}

func (WRTTZ_CardType) Type() protoreflect.EnumType {
	return &file_GameMsg_WRTTZ_proto_enumTypes[2]
}

func (x WRTTZ_CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WRTTZ_CardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WRTTZ_CardType(num)
	return nil
}

// Deprecated: Use WRTTZ_CardType.Descriptor instead.
func (WRTTZ_CardType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{2}
}

type WRTTZ_BetType int32

const (
	WRTTZ_BetType_BetTypeZhang    WRTTZ_BetType = 1 //莊
	WRTTZ_BetType_BeTypeShangMen  WRTTZ_BetType = 2 //上门
	WRTTZ_BetType_BeTypeTianMen   WRTTZ_BetType = 3 //天门
	WRTTZ_BetType_BeTypeXiaMen    WRTTZ_BetType = 4 //下门
	WRTTZ_BetType_BeTypeShangJiao WRTTZ_BetType = 5 //上角
	WRTTZ_BetType_BeTypeXiaJiao   WRTTZ_BetType = 6 //下角
	WRTTZ_BetType_BeTypeGiao      WRTTZ_BetType = 7 //桥
)

// Enum value maps for WRTTZ_BetType.
var (
	WRTTZ_BetType_name = map[int32]string{
		1: "BetTypeZhang",
		2: "BeTypeShangMen",
		3: "BeTypeTianMen",
		4: "BeTypeXiaMen",
		5: "BeTypeShangJiao",
		6: "BeTypeXiaJiao",
		7: "BeTypeGiao",
	}
	WRTTZ_BetType_value = map[string]int32{
		"BetTypeZhang":    1,
		"BeTypeShangMen":  2,
		"BeTypeTianMen":   3,
		"BeTypeXiaMen":    4,
		"BeTypeShangJiao": 5,
		"BeTypeXiaJiao":   6,
		"BeTypeGiao":      7,
	}
)

func (x WRTTZ_BetType) Enum() *WRTTZ_BetType {
	p := new(WRTTZ_BetType)
	*p = x
	return p
}

func (x WRTTZ_BetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WRTTZ_BetType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_WRTTZ_proto_enumTypes[3].Descriptor()
}

func (WRTTZ_BetType) Type() protoreflect.EnumType {
	return &file_GameMsg_WRTTZ_proto_enumTypes[3]
}

func (x WRTTZ_BetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WRTTZ_BetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WRTTZ_BetType(num)
	return nil
}

// Deprecated: Use WRTTZ_BetType.Descriptor instead.
func (WRTTZ_BetType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{3}
}

type WRTTZ_JiangType int32

const (
	WRTTZ_JiangType_JiangWin  WRTTZ_JiangType = 1
	WRTTZ_JiangType_JiangLose WRTTZ_JiangType = -1
	WRTTZ_JiangType_JiangTie  WRTTZ_JiangType = 0
)

// Enum value maps for WRTTZ_JiangType.
var (
	WRTTZ_JiangType_name = map[int32]string{
		1:  "JiangWin",
		-1: "JiangLose",
		0:  "JiangTie",
	}
	WRTTZ_JiangType_value = map[string]int32{
		"JiangWin":  1,
		"JiangLose": -1,
		"JiangTie":  0,
	}
)

func (x WRTTZ_JiangType) Enum() *WRTTZ_JiangType {
	p := new(WRTTZ_JiangType)
	*p = x
	return p
}

func (x WRTTZ_JiangType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WRTTZ_JiangType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_WRTTZ_proto_enumTypes[4].Descriptor()
}

func (WRTTZ_JiangType) Type() protoreflect.EnumType {
	return &file_GameMsg_WRTTZ_proto_enumTypes[4]
}

func (x WRTTZ_JiangType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WRTTZ_JiangType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WRTTZ_JiangType(num)
	return nil
}

// Deprecated: Use WRTTZ_JiangType.Descriptor instead.
func (WRTTZ_JiangType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{4}
}

//下注设置
type WRTTZ_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipScore []int64             `protobuf:"varint,1,rep,name=ChipScore" json:"ChipScore,omitempty"` //下注的籌碼
	BetScore  *int64              `protobuf:"varint,2,req,name=BetScore" json:"BetScore,omitempty"`   //最小下注籌碼
	BetRange  *WRTTZ_BetRangeList `protobuf:"bytes,3,req,name=BetRange" json:"BetRange,omitempty"`    //個人下注上下限紅
}

func (x *WRTTZ_Setting) Reset() {
	*x = WRTTZ_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_Setting) ProtoMessage() {}

func (x *WRTTZ_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_Setting.ProtoReflect.Descriptor instead.
func (*WRTTZ_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{0}
}

func (x *WRTTZ_Setting) GetChipScore() []int64 {
	if x != nil {
		return x.ChipScore
	}
	return nil
}

func (x *WRTTZ_Setting) GetBetScore() int64 {
	if x != nil && x.BetScore != nil {
		return *x.BetScore
	}
	return 0
}

func (x *WRTTZ_Setting) GetBetRange() *WRTTZ_BetRangeList {
	if x != nil {
		return x.BetRange
	}
	return nil
}

//状态消息
type WRTTZ_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *WRTTZ_Flow `protobuf:"varint,1,req,name=State,enum=netproto.WRTTZ_Flow" json:"State,omitempty"` //状态
	Time  *int32      `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`                            //此状态的剩余时间
}

func (x *WRTTZ_State) Reset() {
	*x = WRTTZ_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_State) ProtoMessage() {}

func (x *WRTTZ_State) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_State.ProtoReflect.Descriptor instead.
func (*WRTTZ_State) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{1}
}

func (x *WRTTZ_State) GetState() WRTTZ_Flow {
	if x != nil && x.State != nil {
		return *x.State
	}
	return WRTTZ_Flow_Prepare
}

func (x *WRTTZ_State) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户断线重连下注消息
type WRTTZ_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score   *int64       `protobuf:"varint,1,req,name=Score" json:"Score,omitempty"`
	BetInfo []*WRTTZ_Bet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *WRTTZ_UserBetInfo) Reset() {
	*x = WRTTZ_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_UserBetInfo) ProtoMessage() {}

func (x *WRTTZ_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_UserBetInfo.ProtoReflect.Descriptor instead.
func (*WRTTZ_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{2}
}

func (x *WRTTZ_UserBetInfo) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *WRTTZ_UserBetInfo) GetBetInfo() []*WRTTZ_Bet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//广播用户下注的数组
type WRTTZ_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32       `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*WRTTZ_Bet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *WRTTZ_BroadCastBetArr) Reset() {
	*x = WRTTZ_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_BroadCastBetArr) ProtoMessage() {}

func (x *WRTTZ_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*WRTTZ_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{3}
}

func (x *WRTTZ_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *WRTTZ_BroadCastBetArr) GetBroadCastBetArr() []*WRTTZ_Bet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//用户下注数组
type WRTTZ_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*WRTTZ_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *WRTTZ_BetArr) Reset() {
	*x = WRTTZ_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_BetArr) ProtoMessage() {}

func (x *WRTTZ_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_BetArr.ProtoReflect.Descriptor instead.
func (*WRTTZ_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{4}
}

func (x *WRTTZ_BetArr) GetBetArr() []*WRTTZ_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type WRTTZ_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *WRTTZ_BetType `protobuf:"varint,1,req,name=BetType,enum=netproto.WRTTZ_BetType" json:"BetType,omitempty"`
	Score   *int64         `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`
}

func (x *WRTTZ_Bet) Reset() {
	*x = WRTTZ_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_Bet) ProtoMessage() {}

func (x *WRTTZ_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_Bet.ProtoReflect.Descriptor instead.
func (*WRTTZ_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{5}
}

func (x *WRTTZ_Bet) GetBetType() WRTTZ_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return WRTTZ_BetType_BetTypeZhang
}

func (x *WRTTZ_Bet) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

//下注的结果
type WRTTZ_BetAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *WRTTZ_Bet_Ret `protobuf:"varint,1,req,name=Ret,enum=netproto.WRTTZ_Bet_Ret" json:"Ret,omitempty"` //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4此类下注已达到上限，-5下注金額不能為0，-6用户金额小於下注限制
	Score  *int64         `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`                         //用户的钱，下注以后的金额。
	BetArr []*WRTTZ_Bet   `protobuf:"bytes,3,rep,name=BetArr" json:"BetArr,omitempty"`                        //用户下注数据
}

func (x *WRTTZ_BetAck) Reset() {
	*x = WRTTZ_BetAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_BetAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_BetAck) ProtoMessage() {}

func (x *WRTTZ_BetAck) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_BetAck.ProtoReflect.Descriptor instead.
func (*WRTTZ_BetAck) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{6}
}

func (x *WRTTZ_BetAck) GetRet() WRTTZ_Bet_Ret {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return WRTTZ_Bet_Ret_BetRetSuccess
}

func (x *WRTTZ_BetAck) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *WRTTZ_BetAck) GetBetArr() []*WRTTZ_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//各門手牌
type WRTTZ_CardResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*WRTTZ_HandCard `protobuf:"bytes,1,rep,name=Result" json:"Result,omitempty"` //莊,上門,下門,天門
}

func (x *WRTTZ_CardResult) Reset() {
	*x = WRTTZ_CardResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_CardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_CardResult) ProtoMessage() {}

func (x *WRTTZ_CardResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_CardResult.ProtoReflect.Descriptor instead.
func (*WRTTZ_CardResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{7}
}

func (x *WRTTZ_CardResult) GetResult() []*WRTTZ_HandCard {
	if x != nil {
		return x.Result
	}
	return nil
}

type WRTTZ_HandCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType  *WRTTZ_BetType  `protobuf:"varint,1,req,name=BetType,enum=netproto.WRTTZ_BetType" json:"BetType,omitempty"`    //哪一門
	Cards    []int32         `protobuf:"varint,2,rep,name=Cards" json:"Cards,omitempty"`                                    //長度二的陣列,代表第一,二張牌
	CardType *WRTTZ_CardType `protobuf:"varint,3,req,name=CardType,enum=netproto.WRTTZ_CardType" json:"CardType,omitempty"` //牌型
}

func (x *WRTTZ_HandCard) Reset() {
	*x = WRTTZ_HandCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_HandCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_HandCard) ProtoMessage() {}

func (x *WRTTZ_HandCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_HandCard.ProtoReflect.Descriptor instead.
func (*WRTTZ_HandCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{8}
}

func (x *WRTTZ_HandCard) GetBetType() WRTTZ_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return WRTTZ_BetType_BetTypeZhang
}

func (x *WRTTZ_HandCard) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *WRTTZ_HandCard) GetCardType() WRTTZ_CardType {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return WRTTZ_CardType_ZeroPoint
}

//游戏结果
type WRTTZ_GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*WRTTZ_BetTypeJiang `protobuf:"bytes,1,rep,name=Result" json:"Result,omitempty"` //上門,下門,天門,上角,下角,橋
}

func (x *WRTTZ_GameResult) Reset() {
	*x = WRTTZ_GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_GameResult) ProtoMessage() {}

func (x *WRTTZ_GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_GameResult.ProtoReflect.Descriptor instead.
func (*WRTTZ_GameResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{9}
}

func (x *WRTTZ_GameResult) GetResult() []*WRTTZ_BetTypeJiang {
	if x != nil {
		return x.Result
	}
	return nil
}

//各門開獎結果
type WRTTZ_BetTypeJiang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *WRTTZ_BetType   `protobuf:"varint,1,req,name=BetType,enum=netproto.WRTTZ_BetType" json:"BetType,omitempty"` //哪一門
	Jiang   *WRTTZ_JiangType `protobuf:"varint,2,req,name=Jiang,enum=netproto.WRTTZ_JiangType" json:"Jiang,omitempty"`   //開獎
}

func (x *WRTTZ_BetTypeJiang) Reset() {
	*x = WRTTZ_BetTypeJiang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_BetTypeJiang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_BetTypeJiang) ProtoMessage() {}

func (x *WRTTZ_BetTypeJiang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_BetTypeJiang.ProtoReflect.Descriptor instead.
func (*WRTTZ_BetTypeJiang) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{10}
}

func (x *WRTTZ_BetTypeJiang) GetBetType() WRTTZ_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return WRTTZ_BetType_BetTypeZhang
}

func (x *WRTTZ_BetTypeJiang) GetJiang() WRTTZ_JiangType {
	if x != nil && x.Jiang != nil {
		return *x.Jiang
	}
	return WRTTZ_JiangType_JiangWin
}

//游戏用户赢钱结果
type WRTTZ_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemWin *int64       `protobuf:"varint,1,req,name=SystemWin" json:"SystemWin,omitempty"`
	SelfWin   *int64       `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	BetRet    []*WRTTZ_Bet `protobuf:"bytes,3,rep,name=BetRet" json:"BetRet,omitempty"`
}

func (x *WRTTZ_GameResultUserMoney) Reset() {
	*x = WRTTZ_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_GameResultUserMoney) ProtoMessage() {}

func (x *WRTTZ_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*WRTTZ_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{11}
}

func (x *WRTTZ_GameResultUserMoney) GetSystemWin() int64 {
	if x != nil && x.SystemWin != nil {
		return *x.SystemWin
	}
	return 0
}

func (x *WRTTZ_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *WRTTZ_GameResultUserMoney) GetBetRet() []*WRTTZ_Bet {
	if x != nil {
		return x.BetRet
	}
	return nil
}

//赢钱玩家信息
type WRTTZ_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
	UserID   *int32  `protobuf:"varint,3,opt,name=UserID" json:"UserID,omitempty"`
}

func (x *WRTTZ_WinUerInfo) Reset() {
	*x = WRTTZ_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_WinUerInfo) ProtoMessage() {}

func (x *WRTTZ_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_WinUerInfo.ProtoReflect.Descriptor instead.
func (*WRTTZ_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{12}
}

func (x *WRTTZ_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *WRTTZ_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

func (x *WRTTZ_WinUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

//標誌玩家赢钱信息
type WRTTZ_StageUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Win    *int64 `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *WRTTZ_StageUerInfo) Reset() {
	*x = WRTTZ_StageUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_StageUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_StageUerInfo) ProtoMessage() {}

func (x *WRTTZ_StageUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_StageUerInfo.ProtoReflect.Descriptor instead.
func (*WRTTZ_StageUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{13}
}

func (x *WRTTZ_StageUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *WRTTZ_StageUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//牌局編號
type WRTTZ_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *WRTTZ_GameNoInfo) Reset() {
	*x = WRTTZ_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_GameNoInfo) ProtoMessage() {}

func (x *WRTTZ_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_GameNoInfo.ProtoReflect.Descriptor instead.
func (*WRTTZ_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{14}
}

func (x *WRTTZ_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

//下注限制列表消息
type WRTTZ_BetRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*WRTTZ_Range `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *WRTTZ_BetRangeList) Reset() {
	*x = WRTTZ_BetRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_BetRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_BetRangeList) ProtoMessage() {}

func (x *WRTTZ_BetRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_BetRangeList.ProtoReflect.Descriptor instead.
func (*WRTTZ_BetRangeList) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{15}
}

func (x *WRTTZ_BetRangeList) GetData() []*WRTTZ_Range {
	if x != nil {
		return x.Data
	}
	return nil
}

type WRTTZ_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *WRTTZ_BetType `protobuf:"varint,1,req,name=BetType,enum=netproto.WRTTZ_BetType" json:"BetType,omitempty"`
	Min     *int64         `protobuf:"varint,2,req,name=Min" json:"Min,omitempty"`
	Max     *int64         `protobuf:"varint,3,req,name=Max" json:"Max,omitempty"`
}

func (x *WRTTZ_Range) Reset() {
	*x = WRTTZ_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_Range) ProtoMessage() {}

func (x *WRTTZ_Range) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_Range.ProtoReflect.Descriptor instead.
func (*WRTTZ_Range) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{16}
}

func (x *WRTTZ_Range) GetBetType() WRTTZ_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return WRTTZ_BetType_BetTypeZhang
}

func (x *WRTTZ_Range) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *WRTTZ_Range) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

//歷史開獎結果
type WRTTZ_ResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultList []*WRTTZ_GameResult `protobuf:"bytes,1,rep,name=ResultList" json:"ResultList,omitempty"` //長度三的陣列
}

func (x *WRTTZ_ResultList) Reset() {
	*x = WRTTZ_ResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_ResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_ResultList) ProtoMessage() {}

func (x *WRTTZ_ResultList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_ResultList.ProtoReflect.Descriptor instead.
func (*WRTTZ_ResultList) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{17}
}

func (x *WRTTZ_ResultList) GetResultList() []*WRTTZ_GameResult {
	if x != nil {
		return x.ResultList
	}
	return nil
}

//清除结果回应消息
type WRTTZ_BetClearRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` //当前的钱
	Ret   *int32 `protobuf:"varint,2,req,name=Ret" json:"Ret,omitempty"`     //清除结果-1，清理失败，达到清理上限，0清理成功
}

func (x *WRTTZ_BetClearRet) Reset() {
	*x = WRTTZ_BetClearRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_BetClearRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_BetClearRet) ProtoMessage() {}

func (x *WRTTZ_BetClearRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_BetClearRet.ProtoReflect.Descriptor instead.
func (*WRTTZ_BetClearRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{18}
}

func (x *WRTTZ_BetClearRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *WRTTZ_BetClearRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//富豪列表
type WRTTZ_RichestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichestList []*WRTTZ_Richest `protobuf:"bytes,1,rep,name=RichestList" json:"RichestList,omitempty"`
}

func (x *WRTTZ_RichestList) Reset() {
	*x = WRTTZ_RichestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_RichestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_RichestList) ProtoMessage() {}

func (x *WRTTZ_RichestList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_RichestList.ProtoReflect.Descriptor instead.
func (*WRTTZ_RichestList) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{19}
}

func (x *WRTTZ_RichestList) GetRichestList() []*WRTTZ_Richest {
	if x != nil {
		return x.RichestList
	}
	return nil
}

type WRTTZ_Richest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking       *int32 `protobuf:"varint,1,req,name=Ranking" json:"Ranking,omitempty"`             //富豪排名
	UserID        *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`               //富豪ID
	UserFaceID    *int32 `protobuf:"varint,3,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //富豪頭像ID
	Money         *int64 `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`                 //富豪当前身上的钱
	AvatarFrameID *int32 `protobuf:"varint,5,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
	LastBetTotal  *int64 `protobuf:"varint,6,opt,name=LastBetTotal" json:"LastBetTotal,omitempty"`   //上局下注總量
}

func (x *WRTTZ_Richest) Reset() {
	*x = WRTTZ_Richest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_Richest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_Richest) ProtoMessage() {}

func (x *WRTTZ_Richest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_Richest.ProtoReflect.Descriptor instead.
func (*WRTTZ_Richest) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{20}
}

func (x *WRTTZ_Richest) GetRanking() int32 {
	if x != nil && x.Ranking != nil {
		return *x.Ranking
	}
	return 0
}

func (x *WRTTZ_Richest) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *WRTTZ_Richest) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *WRTTZ_Richest) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *WRTTZ_Richest) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

func (x *WRTTZ_Richest) GetLastBetTotal() int64 {
	if x != nil && x.LastBetTotal != nil {
		return *x.LastBetTotal
	}
	return 0
}

type WRTTZ_Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State               *WRTTZ_State               `protobuf:"bytes,1,opt,name=State" json:"State,omitempty"`
	GameNo              *string                    `protobuf:"bytes,2,opt,name=GameNo" json:"GameNo,omitempty"`
	ResultList          *WRTTZ_ResultList          `protobuf:"bytes,3,opt,name=ResultList" json:"ResultList,omitempty"`
	RichList            *WRTTZ_RichestList         `protobuf:"bytes,4,opt,name=RichList" json:"RichList,omitempty"`
	UserBet             *WRTTZ_UserBetInfo         `protobuf:"bytes,5,opt,name=UserBet" json:"UserBet,omitempty"`
	TotalUserBet        *WRTTZ_BroadCastBetArr     `protobuf:"bytes,6,opt,name=TotalUserBet" json:"TotalUserBet,omitempty"`
	Setting             *WRTTZ_Setting             `protobuf:"bytes,7,opt,name=Setting" json:"Setting,omitempty"`
	CardResult          *WRTTZ_CardResult          `protobuf:"bytes,8,opt,name=CardResult" json:"CardResult,omitempty"`
	GameResult          *WRTTZ_GameResult          `protobuf:"bytes,9,opt,name=GameResult" json:"GameResult,omitempty"`
	GameResultUserMoney *WRTTZ_GameResultUserMoney `protobuf:"bytes,10,opt,name=GameResultUserMoney" json:"GameResultUserMoney,omitempty"`
}

func (x *WRTTZ_Scene) Reset() {
	*x = WRTTZ_Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_Scene) ProtoMessage() {}

func (x *WRTTZ_Scene) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_Scene.ProtoReflect.Descriptor instead.
func (*WRTTZ_Scene) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{21}
}

func (x *WRTTZ_Scene) GetState() *WRTTZ_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *WRTTZ_Scene) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

func (x *WRTTZ_Scene) GetResultList() *WRTTZ_ResultList {
	if x != nil {
		return x.ResultList
	}
	return nil
}

func (x *WRTTZ_Scene) GetRichList() *WRTTZ_RichestList {
	if x != nil {
		return x.RichList
	}
	return nil
}

func (x *WRTTZ_Scene) GetUserBet() *WRTTZ_UserBetInfo {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *WRTTZ_Scene) GetTotalUserBet() *WRTTZ_BroadCastBetArr {
	if x != nil {
		return x.TotalUserBet
	}
	return nil
}

func (x *WRTTZ_Scene) GetSetting() *WRTTZ_Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *WRTTZ_Scene) GetCardResult() *WRTTZ_CardResult {
	if x != nil {
		return x.CardResult
	}
	return nil
}

func (x *WRTTZ_Scene) GetGameResult() *WRTTZ_GameResult {
	if x != nil {
		return x.GameResult
	}
	return nil
}

func (x *WRTTZ_Scene) GetGameResultUserMoney() *WRTTZ_GameResultUserMoney {
	if x != nil {
		return x.GameResultUserMoney
	}
	return nil
}

type WRTTZ_RtpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo          *string                 `protobuf:"bytes,1,opt,name=GameNo" json:"GameNo,omitempty"`
	ActualResult    *int32                  `protobuf:"varint,2,opt,name=ActualResult" json:"ActualResult,omitempty"`       //該局結果
	TotalGameCount  *int32                  `protobuf:"varint,3,opt,name=TotalGameCount" json:"TotalGameCount,omitempty"`   //回顧局數
	LastResult      *int32                  `protobuf:"varint,4,opt,name=LastResult" json:"LastResult,omitempty"`           //前一局情況
	ContinuousCount *int32                  `protobuf:"varint,5,opt,name=ContinuousCount" json:"ContinuousCount,omitempty"` //連續出現次數
	SysRtp          *string                 `protobuf:"bytes,6,opt,name=SysRtp" json:"SysRtp,omitempty"`                    //系統指令
	PlayerMaxWin    *int64                  `protobuf:"varint,7,opt,name=PlayerMaxWin" json:"PlayerMaxWin,omitempty"`       //水位上限距離
	CurrentRtp      *int32                  `protobuf:"varint,8,opt,name=CurrentRtp" json:"CurrentRtp,omitempty"`           //rtp值
	RtpType         *int32                  `protobuf:"varint,9,opt,name=RtpType" json:"RtpType,omitempty"`
	RtpAdjust       *int32                  `protobuf:"varint,10,opt,name=RtpAdjust" json:"RtpAdjust,omitempty"`
	RtpAdjustNumber *int32                  `protobuf:"varint,11,opt,name=RtpAdjustNumber" json:"RtpAdjustNumber,omitempty"`
	Modulation      []*WRTTZ_ModulationItem `protobuf:"bytes,12,rep,name=Modulation" json:"Modulation,omitempty"`
}

func (x *WRTTZ_RtpInfo) Reset() {
	*x = WRTTZ_RtpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_RtpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_RtpInfo) ProtoMessage() {}

func (x *WRTTZ_RtpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_RtpInfo.ProtoReflect.Descriptor instead.
func (*WRTTZ_RtpInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{22}
}

func (x *WRTTZ_RtpInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

func (x *WRTTZ_RtpInfo) GetActualResult() int32 {
	if x != nil && x.ActualResult != nil {
		return *x.ActualResult
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetTotalGameCount() int32 {
	if x != nil && x.TotalGameCount != nil {
		return *x.TotalGameCount
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetLastResult() int32 {
	if x != nil && x.LastResult != nil {
		return *x.LastResult
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetContinuousCount() int32 {
	if x != nil && x.ContinuousCount != nil {
		return *x.ContinuousCount
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetSysRtp() string {
	if x != nil && x.SysRtp != nil {
		return *x.SysRtp
	}
	return ""
}

func (x *WRTTZ_RtpInfo) GetPlayerMaxWin() int64 {
	if x != nil && x.PlayerMaxWin != nil {
		return *x.PlayerMaxWin
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetCurrentRtp() int32 {
	if x != nil && x.CurrentRtp != nil {
		return *x.CurrentRtp
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetRtpType() int32 {
	if x != nil && x.RtpType != nil {
		return *x.RtpType
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetRtpAdjust() int32 {
	if x != nil && x.RtpAdjust != nil {
		return *x.RtpAdjust
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetRtpAdjustNumber() int32 {
	if x != nil && x.RtpAdjustNumber != nil {
		return *x.RtpAdjustNumber
	}
	return 0
}

func (x *WRTTZ_RtpInfo) GetModulation() []*WRTTZ_ModulationItem {
	if x != nil {
		return x.Modulation
	}
	return nil
}

type WRTTZ_ModulationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtpResultID  *int32   `protobuf:"varint,1,opt,name=RtpResultID" json:"RtpResultID,omitempty"`
	Revenue      *float64 `protobuf:"fixed64,2,opt,name=Revenue" json:"Revenue,omitempty"`
	TotalCount   *int32   `protobuf:"varint,3,opt,name=TotalCount" json:"TotalCount,omitempty"`
	WeightAdjust *float64 `protobuf:"fixed64,5,opt,name=WeightAdjust" json:"WeightAdjust,omitempty"`
	ConfigWeight *int32   `protobuf:"varint,6,opt,name=ConfigWeight" json:"ConfigWeight,omitempty"`
	ActualWeight *float64 `protobuf:"fixed64,7,opt,name=ActualWeight" json:"ActualWeight,omitempty"`
}

func (x *WRTTZ_ModulationItem) Reset() {
	*x = WRTTZ_ModulationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRTTZ_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRTTZ_ModulationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRTTZ_ModulationItem) ProtoMessage() {}

func (x *WRTTZ_ModulationItem) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRTTZ_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRTTZ_ModulationItem.ProtoReflect.Descriptor instead.
func (*WRTTZ_ModulationItem) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRTTZ_proto_rawDescGZIP(), []int{23}
}

func (x *WRTTZ_ModulationItem) GetRtpResultID() int32 {
	if x != nil && x.RtpResultID != nil {
		return *x.RtpResultID
	}
	return 0
}

func (x *WRTTZ_ModulationItem) GetRevenue() float64 {
	if x != nil && x.Revenue != nil {
		return *x.Revenue
	}
	return 0
}

func (x *WRTTZ_ModulationItem) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *WRTTZ_ModulationItem) GetWeightAdjust() float64 {
	if x != nil && x.WeightAdjust != nil {
		return *x.WeightAdjust
	}
	return 0
}

func (x *WRTTZ_ModulationItem) GetConfigWeight() int32 {
	if x != nil && x.ConfigWeight != nil {
		return *x.ConfigWeight
	}
	return 0
}

func (x *WRTTZ_ModulationItem) GetActualWeight() float64 {
	if x != nil && x.ActualWeight != nil {
		return *x.ActualWeight
	}
	return 0
}

var File_GameMsg_WRTTZ_proto protoreflect.FileDescriptor

var file_GameMsg_WRTTZ_proto_rawDesc = []byte{
	0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x83, 0x01, 0x0a, 0x0d, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x69, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x69, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x42,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x42, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x0b, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x11, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54,
	0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e,
	0x0a, 0x15, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x3d, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x3b,
	0x0a, 0x0c, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x2b,
	0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f,
	0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x54, 0x0a, 0x09, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x7c, 0x0a, 0x0c, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x63,
	0x6b, 0x12, 0x29, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f,
	0x42, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x74, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52,
	0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22,
	0x44, 0x0a, 0x10, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f,
	0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x57, 0x52, 0x54, 0x54, 0x5a,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x78, 0x0a, 0x12, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x4a, 0x69,
	0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x4a, 0x69, 0x61, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x19,
	0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69,
	0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54,
	0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x22, 0x58,
	0x0a, 0x10, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x12, 0x57, 0x52, 0x54, 0x54,
	0x5a, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x2a, 0x0a, 0x10, 0x57, 0x52, 0x54, 0x54,
	0x5a, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x4e, 0x6f, 0x22, 0x3f, 0x0a, 0x12, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x0b, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x22, 0x4e, 0x0a, 0x10, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x57, 0x52, 0x54, 0x54,
	0x5a, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52,
	0x54, 0x54, 0x5a, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x52, 0x69, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x57, 0x52, 0x54,
	0x54, 0x5a, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc5, 0x04, 0x0a,
	0x0b, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x52, 0x69, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a,
	0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x52, 0x69,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x43, 0x0a,
	0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x52, 0x54, 0x54, 0x5a, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a,
	0x13, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x13, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x22, 0xbb, 0x03, 0x0a, 0x0d, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x52,
	0x74, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x52, 0x74, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x52, 0x74, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x52, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x74,
	0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52,
	0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x74, 0x70, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x52, 0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x52, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2a, 0x76, 0x0a, 0x0a, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x42, 0x65,
	0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x07, 0x2a, 0xb1, 0x01, 0x0a, 0x0d,
	0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x74, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x14, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f,
	0x75, 0x67, 0x68, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x42, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x74, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x10, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x74, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x10, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a,
	0xc1, 0x01, 0x0a, 0x0e, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x5a, 0x65, 0x72, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x77, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x6f, 0x75, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x69, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x76,
	0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x72, 0x42, 0x61,
	0x47, 0x61, 0x6e, 0x67, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x65, 0x6f, 0x70, 0x61, 0x72,
	0x64, 0x10, 0x0c, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x57, 0x52, 0x54, 0x54, 0x5a, 0x5f, 0x42, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5a, 0x68, 0x61, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x4d, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x61, 0x6e, 0x4d, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x42, 0x65, 0x54, 0x79, 0x70, 0x65, 0x58, 0x69, 0x61, 0x4d, 0x65, 0x6e, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x4a,
	0x69, 0x61, 0x6f, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x65, 0x54, 0x79, 0x70, 0x65, 0x58,
	0x69, 0x61, 0x4a, 0x69, 0x61, 0x6f, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x69, 0x61, 0x6f, 0x10, 0x07, 0x2a, 0x45, 0x0a, 0x0f, 0x57, 0x52, 0x54, 0x54,
	0x5a, 0x5f, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4a,
	0x69, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x09, 0x4a, 0x69, 0x61,
	0x6e, 0x67, 0x4c, 0x6f, 0x73, 0x65, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x10, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_WRTTZ_proto_rawDescOnce sync.Once
	file_GameMsg_WRTTZ_proto_rawDescData = file_GameMsg_WRTTZ_proto_rawDesc
)

func file_GameMsg_WRTTZ_proto_rawDescGZIP() []byte {
	file_GameMsg_WRTTZ_proto_rawDescOnce.Do(func() {
		file_GameMsg_WRTTZ_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_WRTTZ_proto_rawDescData)
	})
	return file_GameMsg_WRTTZ_proto_rawDescData
}

var file_GameMsg_WRTTZ_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_GameMsg_WRTTZ_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_GameMsg_WRTTZ_proto_goTypes = []interface{}{
	(WRTTZ_Flow)(0),                   // 0: netproto.WRTTZ_Flow
	(WRTTZ_Bet_Ret)(0),                // 1: netproto.WRTTZ_Bet_Ret
	(WRTTZ_CardType)(0),               // 2: netproto.WRTTZ_CardType
	(WRTTZ_BetType)(0),                // 3: netproto.WRTTZ_BetType
	(WRTTZ_JiangType)(0),              // 4: netproto.WRTTZ_JiangType
	(*WRTTZ_Setting)(nil),             // 5: netproto.WRTTZ_Setting
	(*WRTTZ_State)(nil),               // 6: netproto.WRTTZ_State
	(*WRTTZ_UserBetInfo)(nil),         // 7: netproto.WRTTZ_UserBetInfo
	(*WRTTZ_BroadCastBetArr)(nil),     // 8: netproto.WRTTZ_BroadCastBetArr
	(*WRTTZ_BetArr)(nil),              // 9: netproto.WRTTZ_BetArr
	(*WRTTZ_Bet)(nil),                 // 10: netproto.WRTTZ_Bet
	(*WRTTZ_BetAck)(nil),              // 11: netproto.WRTTZ_BetAck
	(*WRTTZ_CardResult)(nil),          // 12: netproto.WRTTZ_CardResult
	(*WRTTZ_HandCard)(nil),            // 13: netproto.WRTTZ_HandCard
	(*WRTTZ_GameResult)(nil),          // 14: netproto.WRTTZ_GameResult
	(*WRTTZ_BetTypeJiang)(nil),        // 15: netproto.WRTTZ_BetTypeJiang
	(*WRTTZ_GameResultUserMoney)(nil), // 16: netproto.WRTTZ_GameResultUserMoney
	(*WRTTZ_WinUerInfo)(nil),          // 17: netproto.WRTTZ_WinUerInfo
	(*WRTTZ_StageUerInfo)(nil),        // 18: netproto.WRTTZ_StageUerInfo
	(*WRTTZ_GameNoInfo)(nil),          // 19: netproto.WRTTZ_GameNoInfo
	(*WRTTZ_BetRangeList)(nil),        // 20: netproto.WRTTZ_BetRangeList
	(*WRTTZ_Range)(nil),               // 21: netproto.WRTTZ_Range
	(*WRTTZ_ResultList)(nil),          // 22: netproto.WRTTZ_ResultList
	(*WRTTZ_BetClearRet)(nil),         // 23: netproto.WRTTZ_BetClearRet
	(*WRTTZ_RichestList)(nil),         // 24: netproto.WRTTZ_RichestList
	(*WRTTZ_Richest)(nil),             // 25: netproto.WRTTZ_Richest
	(*WRTTZ_Scene)(nil),               // 26: netproto.WRTTZ_Scene
	(*WRTTZ_RtpInfo)(nil),             // 27: netproto.WRTTZ_RtpInfo
	(*WRTTZ_ModulationItem)(nil),      // 28: netproto.WRTTZ_ModulationItem
}
var file_GameMsg_WRTTZ_proto_depIdxs = []int32{
	20, // 0: netproto.WRTTZ_Setting.BetRange:type_name -> netproto.WRTTZ_BetRangeList
	0,  // 1: netproto.WRTTZ_State.State:type_name -> netproto.WRTTZ_Flow
	10, // 2: netproto.WRTTZ_UserBetInfo.BetInfo:type_name -> netproto.WRTTZ_Bet
	10, // 3: netproto.WRTTZ_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.WRTTZ_Bet
	10, // 4: netproto.WRTTZ_BetArr.BetArr:type_name -> netproto.WRTTZ_Bet
	3,  // 5: netproto.WRTTZ_Bet.BetType:type_name -> netproto.WRTTZ_BetType
	1,  // 6: netproto.WRTTZ_BetAck.Ret:type_name -> netproto.WRTTZ_Bet_Ret
	10, // 7: netproto.WRTTZ_BetAck.BetArr:type_name -> netproto.WRTTZ_Bet
	13, // 8: netproto.WRTTZ_CardResult.Result:type_name -> netproto.WRTTZ_HandCard
	3,  // 9: netproto.WRTTZ_HandCard.BetType:type_name -> netproto.WRTTZ_BetType
	2,  // 10: netproto.WRTTZ_HandCard.CardType:type_name -> netproto.WRTTZ_CardType
	15, // 11: netproto.WRTTZ_GameResult.Result:type_name -> netproto.WRTTZ_BetTypeJiang
	3,  // 12: netproto.WRTTZ_BetTypeJiang.BetType:type_name -> netproto.WRTTZ_BetType
	4,  // 13: netproto.WRTTZ_BetTypeJiang.Jiang:type_name -> netproto.WRTTZ_JiangType
	10, // 14: netproto.WRTTZ_GameResultUserMoney.BetRet:type_name -> netproto.WRTTZ_Bet
	21, // 15: netproto.WRTTZ_BetRangeList.data:type_name -> netproto.WRTTZ_Range
	3,  // 16: netproto.WRTTZ_Range.BetType:type_name -> netproto.WRTTZ_BetType
	14, // 17: netproto.WRTTZ_ResultList.ResultList:type_name -> netproto.WRTTZ_GameResult
	25, // 18: netproto.WRTTZ_RichestList.RichestList:type_name -> netproto.WRTTZ_Richest
	6,  // 19: netproto.WRTTZ_Scene.State:type_name -> netproto.WRTTZ_State
	22, // 20: netproto.WRTTZ_Scene.ResultList:type_name -> netproto.WRTTZ_ResultList
	24, // 21: netproto.WRTTZ_Scene.RichList:type_name -> netproto.WRTTZ_RichestList
	7,  // 22: netproto.WRTTZ_Scene.UserBet:type_name -> netproto.WRTTZ_UserBetInfo
	8,  // 23: netproto.WRTTZ_Scene.TotalUserBet:type_name -> netproto.WRTTZ_BroadCastBetArr
	5,  // 24: netproto.WRTTZ_Scene.Setting:type_name -> netproto.WRTTZ_Setting
	12, // 25: netproto.WRTTZ_Scene.CardResult:type_name -> netproto.WRTTZ_CardResult
	14, // 26: netproto.WRTTZ_Scene.GameResult:type_name -> netproto.WRTTZ_GameResult
	16, // 27: netproto.WRTTZ_Scene.GameResultUserMoney:type_name -> netproto.WRTTZ_GameResultUserMoney
	28, // 28: netproto.WRTTZ_RtpInfo.Modulation:type_name -> netproto.WRTTZ_ModulationItem
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_GameMsg_WRTTZ_proto_init() }
func file_GameMsg_WRTTZ_proto_init() {
	if File_GameMsg_WRTTZ_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_WRTTZ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_BetAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_CardResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_HandCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_BetTypeJiang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_StageUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_BetRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_ResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_BetClearRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_RichestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_Richest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_RtpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRTTZ_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRTTZ_ModulationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_WRTTZ_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_WRTTZ_proto_goTypes,
		DependencyIndexes: file_GameMsg_WRTTZ_proto_depIdxs,
		EnumInfos:         file_GameMsg_WRTTZ_proto_enumTypes,
		MessageInfos:      file_GameMsg_WRTTZ_proto_msgTypes,
	}.Build()
	File_GameMsg_WRTTZ_proto = out.File
	file_GameMsg_WRTTZ_proto_rawDesc = nil
	file_GameMsg_WRTTZ_proto_goTypes = nil
	file_GameMsg_WRTTZ_proto_depIdxs = nil
}
