// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_Slot.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// [訊息] 遊戲狀態 Server to Client -> Slot_StatusID = 20002
type Slot_MSG_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"` // 遊戲狀態 0: 玩家可下注, 1: 開獎, 2: 開獎動畫, 3: 結算動畫, 4: 等待遊戲開始
}

func (x *Slot_MSG_Status) Reset() {
	*x = Slot_MSG_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_MSG_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_MSG_Status) ProtoMessage() {}

func (x *Slot_MSG_Status) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_MSG_Status.ProtoReflect.Descriptor instead.
func (*Slot_MSG_Status) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{0}
}

func (x *Slot_MSG_Status) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

// [訊息] 下注結果 Server to Client -> Slot_BetStatusID = 20003
type Slot_MSG_BetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *int32 `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`     // 下注狀態 0: 下注成功, -1: 用戶金額不足, -2: 下注的類型未找到, -3: 莊家不能下注, -4: 此類下注已達到上限, -5: 非下注階段, -6: 用戶金額小於下注限制
	Money *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"` // 下注金額
}

func (x *Slot_MSG_BetStatus) Reset() {
	*x = Slot_MSG_BetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_MSG_BetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_MSG_BetStatus) ProtoMessage() {}

func (x *Slot_MSG_BetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_MSG_BetStatus.ProtoReflect.Descriptor instead.
func (*Slot_MSG_BetStatus) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{1}
}

func (x *Slot_MSG_BetStatus) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *Slot_MSG_BetStatus) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

// [訊息] 遊戲結果 (轉出內容，中獎項目，中獎金額) Server to Client -> Slot_GameResultID = 20004
type Slot_MSG_GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetMoney     *int64             `protobuf:"varint,1,req,name=BetMoney" json:"BetMoney,omitempty"`         // 下注金額
	WinMoney     *int64             `protobuf:"varint,2,req,name=WinMoney" json:"WinMoney,omitempty"`         // 贏得獎金
	FinalMoney   *int64             `protobuf:"varint,3,req,name=FinalMoney" json:"FinalMoney,omitempty"`     // 最終身上金額
	JackpotMoney *int64             `protobuf:"varint,4,opt,name=JackpotMoney" json:"JackpotMoney,omitempty"` // 贏得的Jackpot金額
	ReelResult   []*Slot_ReelResult `protobuf:"bytes,5,rep,name=ReelResult" json:"ReelResult,omitempty"`      // 輪軸結果
	PayGroups    []*Slot_PayGroup   `protobuf:"bytes,6,rep,name=PayGroups" json:"PayGroups,omitempty"`        // 中獎內容，賠付線結果(派彩線)
}

func (x *Slot_MSG_GameResult) Reset() {
	*x = Slot_MSG_GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_MSG_GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_MSG_GameResult) ProtoMessage() {}

func (x *Slot_MSG_GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_MSG_GameResult.ProtoReflect.Descriptor instead.
func (*Slot_MSG_GameResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{2}
}

func (x *Slot_MSG_GameResult) GetBetMoney() int64 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *Slot_MSG_GameResult) GetWinMoney() int64 {
	if x != nil && x.WinMoney != nil {
		return *x.WinMoney
	}
	return 0
}

func (x *Slot_MSG_GameResult) GetFinalMoney() int64 {
	if x != nil && x.FinalMoney != nil {
		return *x.FinalMoney
	}
	return 0
}

func (x *Slot_MSG_GameResult) GetJackpotMoney() int64 {
	if x != nil && x.JackpotMoney != nil {
		return *x.JackpotMoney
	}
	return 0
}

func (x *Slot_MSG_GameResult) GetReelResult() []*Slot_ReelResult {
	if x != nil {
		return x.ReelResult
	}
	return nil
}

func (x *Slot_MSG_GameResult) GetPayGroups() []*Slot_PayGroup {
	if x != nil {
		return x.PayGroups
	}
	return nil
}

// [訊息] 玩家Spin Client to Server -> Slot_ActionSpinID = 21001
type Slot_MSG_Spin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` // 下注金額
	Rate  *int32 `protobuf:"varint,2,opt,name=Rate" json:"Rate,omitempty"`   // 下注倍率
}

func (x *Slot_MSG_Spin) Reset() {
	*x = Slot_MSG_Spin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_MSG_Spin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_MSG_Spin) ProtoMessage() {}

func (x *Slot_MSG_Spin) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_MSG_Spin.ProtoReflect.Descriptor instead.
func (*Slot_MSG_Spin) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{3}
}

func (x *Slot_MSG_Spin) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *Slot_MSG_Spin) GetRate() int32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

// 輪軸表演設置
type Slot_ReelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealID  *int32         `protobuf:"varint,1,req,name=RealID" json:"RealID,omitempty"`  // 輪軸編號
	Symbols []*Slot_Symbol `protobuf:"bytes,2,rep,name=Symbols" json:"Symbols,omitempty"` // 該輪軸群組的符號
}

func (x *Slot_ReelSetting) Reset() {
	*x = Slot_ReelSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_ReelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_ReelSetting) ProtoMessage() {}

func (x *Slot_ReelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_ReelSetting.ProtoReflect.Descriptor instead.
func (*Slot_ReelSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{4}
}

func (x *Slot_ReelSetting) GetRealID() int32 {
	if x != nil && x.RealID != nil {
		return *x.RealID
	}
	return 0
}

func (x *Slot_ReelSetting) GetSymbols() []*Slot_Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 位置資訊
type Slot_ReelPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reel *int32 `protobuf:"varint,1,req,name=Reel" json:"Reel,omitempty"` // 直的軸
	Row  *int32 `protobuf:"varint,2,req,name=Row" json:"Row,omitempty"`   // 橫的列
}

func (x *Slot_ReelPosition) Reset() {
	*x = Slot_ReelPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_ReelPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_ReelPosition) ProtoMessage() {}

func (x *Slot_ReelPosition) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_ReelPosition.ProtoReflect.Descriptor instead.
func (*Slot_ReelPosition) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{5}
}

func (x *Slot_ReelPosition) GetReel() int32 {
	if x != nil && x.Reel != nil {
		return *x.Reel
	}
	return 0
}

func (x *Slot_ReelPosition) GetRow() int32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

// 輪軸結果
type Slot_ReelResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Slot_ReelPosition `protobuf:"bytes,1,req,name=Position" json:"Position,omitempty"` // 輪軸位置
	Symbol   *Slot_Symbol       `protobuf:"bytes,2,req,name=Symbol" json:"Symbol,omitempty"`     // 該輪軸群組的符號
	Blink    *bool              `protobuf:"varint,3,req,name=Blink" json:"Blink,omitempty"`      // 是否亮符號
}

func (x *Slot_ReelResult) Reset() {
	*x = Slot_ReelResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_ReelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_ReelResult) ProtoMessage() {}

func (x *Slot_ReelResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_ReelResult.ProtoReflect.Descriptor instead.
func (*Slot_ReelResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{6}
}

func (x *Slot_ReelResult) GetPosition() *Slot_ReelPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Slot_ReelResult) GetSymbol() *Slot_Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *Slot_ReelResult) GetBlink() bool {
	if x != nil && x.Blink != nil {
		return *x.Blink
	}
	return false
}

// 符號
type Slot_Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID   *int32  `protobuf:"varint,1,req,name=SymbolID" json:"SymbolID,omitempty"`    // 符號ID
	SymbolName *string `protobuf:"bytes,2,req,name=SymbolName" json:"SymbolName,omitempty"` // 符號Name
}

func (x *Slot_Symbol) Reset() {
	*x = Slot_Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_Symbol) ProtoMessage() {}

func (x *Slot_Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_Symbol.ProtoReflect.Descriptor instead.
func (*Slot_Symbol) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{7}
}

func (x *Slot_Symbol) GetSymbolID() int32 {
	if x != nil && x.SymbolID != nil {
		return *x.SymbolID
	}
	return 0
}

func (x *Slot_Symbol) GetSymbolName() string {
	if x != nil && x.SymbolName != nil {
		return *x.SymbolName
	}
	return ""
}

// 賠線資訊
type Slot_PayLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayLineID *int32               `protobuf:"varint,1,req,name=PayLineID" json:"PayLineID,omitempty"` // 賠線ID
	Positions []*Slot_ReelPosition `protobuf:"bytes,2,rep,name=Positions" json:"Positions,omitempty"`  // 賠線位置 [{Reel: 1, Row: 2},{Reel: 2, Row: 2},{Reel: 3, Row: 2},{Reel: 4, Row: 2},{Reel: 5, Row: 2}]
}

func (x *Slot_PayLine) Reset() {
	*x = Slot_PayLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_PayLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_PayLine) ProtoMessage() {}

func (x *Slot_PayLine) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_PayLine.ProtoReflect.Descriptor instead.
func (*Slot_PayLine) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{8}
}

func (x *Slot_PayLine) GetPayLineID() int32 {
	if x != nil && x.PayLineID != nil {
		return *x.PayLineID
	}
	return 0
}

func (x *Slot_PayLine) GetPositions() []*Slot_ReelPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

// 中獎內容，賠付線結果(派彩線)
type Slot_PayGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayLines       *Slot_PayLine        `protobuf:"bytes,1,req,name=PayLines" json:"PayLines,omitempty"`             // 中獎的賠線     [{Reel:1,Row:2},{Reel:2,Row:2},{Reel:3,Row:2}] , 給多少畫多少線
	WinMoney       *int64               `protobuf:"varint,2,req,name=WinMoney" json:"WinMoney,omitempty"`            // 這條連線中獎金額
	LinkType       *string              `protobuf:"bytes,3,opt,name=LinkType" json:"LinkType,omitempty"`             // 連線方式. left: 由左至右連線，right: 由右至左連線
	Count          *int32               `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty"`                  // 連線符號數量
	BlinkPositions []*Slot_ReelPosition `protobuf:"bytes,5,rep,name=BlinkPositions" json:"BlinkPositions,omitempty"` // 亮符號位置
}

func (x *Slot_PayGroup) Reset() {
	*x = Slot_PayGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_PayGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_PayGroup) ProtoMessage() {}

func (x *Slot_PayGroup) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_PayGroup.ProtoReflect.Descriptor instead.
func (*Slot_PayGroup) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{9}
}

func (x *Slot_PayGroup) GetPayLines() *Slot_PayLine {
	if x != nil {
		return x.PayLines
	}
	return nil
}

func (x *Slot_PayGroup) GetWinMoney() int64 {
	if x != nil && x.WinMoney != nil {
		return *x.WinMoney
	}
	return 0
}

func (x *Slot_PayGroup) GetLinkType() string {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return ""
}

func (x *Slot_PayGroup) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Slot_PayGroup) GetBlinkPositions() []*Slot_ReelPosition {
	if x != nil {
		return x.BlinkPositions
	}
	return nil
}

// 符號賠率設定
type Slot_SymbolPayTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol *Slot_Symbol `protobuf:"bytes,1,req,name=Symbol" json:"Symbol,omitempty"`  // Symbol
	Count  *int32       `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`   // 連續幾個Symbol
	Type   *string      `protobuf:"bytes,3,req,name=Type" json:"Type,omitempty"`      // 獎項類型。 chip: 賠倍率, jackpot: 中jackpot, pickgame: 中bonus gamehandler
	Payout *int32       `protobuf:"varint,4,req,name=Payout" json:"Payout,omitempty"` // 該項獎勵數量。 chip: 倍率, jackpot: 最大出獎金額, pickgame: 幾pick
	Title  *string      `protobuf:"bytes,5,opt,name=Title" json:"Title,omitempty"`    // 符號在賠付表要顯示的標題
	Desc   *string      `protobuf:"bytes,6,opt,name=Desc" json:"Desc,omitempty"`      // 符號在賠付表要顯示的說明
}

func (x *Slot_SymbolPayTable) Reset() {
	*x = Slot_SymbolPayTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_SymbolPayTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_SymbolPayTable) ProtoMessage() {}

func (x *Slot_SymbolPayTable) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_SymbolPayTable.ProtoReflect.Descriptor instead.
func (*Slot_SymbolPayTable) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{10}
}

func (x *Slot_SymbolPayTable) GetSymbol() *Slot_Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *Slot_SymbolPayTable) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Slot_SymbolPayTable) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Slot_SymbolPayTable) GetPayout() int32 {
	if x != nil && x.Payout != nil {
		return *x.Payout
	}
	return 0
}

func (x *Slot_SymbolPayTable) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Slot_SymbolPayTable) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

// 寫入歷程紀錄
type Slot_HistoryLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`                // 玩家ID
	GameID        *int32  `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`                // 遊戲ID
	ServerID      *int32  `protobuf:"varint,3,req,name=ServerID" json:"ServerID,omitempty"`            // ServerID
	CurrentAmount *int64  `protobuf:"varint,4,req,name=CurrentAmount" json:"CurrentAmount,omitempty"`  // 原始分數
	BetMoney      *int64  `protobuf:"varint,5,req,name=BetMoney" json:"BetMoney,omitempty"`            // 押分
	WinMoney      *int64  `protobuf:"varint,6,req,name=WinMoney" json:"WinMoney,omitempty"`            // 贏分
	FinalScore    *int64  `protobuf:"varint,7,req,name=FinalScore" json:"FinalScore,omitempty"`        // 結算分數
	GameType      *int32  `protobuf:"varint,8,req,name=GameType" json:"GameType,omitempty"`            // 遊戲形式
	LogType       *int32  `protobuf:"varint,9,req,name=LogType" json:"LogType,omitempty"`              // 牌型紀錄種類
	GameData      *string `protobuf:"bytes,10,req,name=GameData" json:"GameData,omitempty"`            // 牌型紀錄
	CurrentCoupon *int64  `protobuf:"varint,11,req,name=CurrentCoupon" json:"CurrentCoupon,omitempty"` // 原始Coupon
	BetCoupon     *int64  `protobuf:"varint,12,req,name=BetCoupon" json:"BetCoupon,omitempty"`         // 押Coupon
	FinalCoupon   *int64  `protobuf:"varint,13,req,name=FinalCoupon" json:"FinalCoupon,omitempty"`     // 結算Coupon
}

func (x *Slot_HistoryLogData) Reset() {
	*x = Slot_HistoryLogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_HistoryLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_HistoryLogData) ProtoMessage() {}

func (x *Slot_HistoryLogData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_HistoryLogData.ProtoReflect.Descriptor instead.
func (*Slot_HistoryLogData) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{11}
}

func (x *Slot_HistoryLogData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *Slot_HistoryLogData) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *Slot_HistoryLogData) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *Slot_HistoryLogData) GetCurrentAmount() int64 {
	if x != nil && x.CurrentAmount != nil {
		return *x.CurrentAmount
	}
	return 0
}

func (x *Slot_HistoryLogData) GetBetMoney() int64 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *Slot_HistoryLogData) GetWinMoney() int64 {
	if x != nil && x.WinMoney != nil {
		return *x.WinMoney
	}
	return 0
}

func (x *Slot_HistoryLogData) GetFinalScore() int64 {
	if x != nil && x.FinalScore != nil {
		return *x.FinalScore
	}
	return 0
}

func (x *Slot_HistoryLogData) GetGameType() int32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *Slot_HistoryLogData) GetLogType() int32 {
	if x != nil && x.LogType != nil {
		return *x.LogType
	}
	return 0
}

func (x *Slot_HistoryLogData) GetGameData() string {
	if x != nil && x.GameData != nil {
		return *x.GameData
	}
	return ""
}

func (x *Slot_HistoryLogData) GetCurrentCoupon() int64 {
	if x != nil && x.CurrentCoupon != nil {
		return *x.CurrentCoupon
	}
	return 0
}

func (x *Slot_HistoryLogData) GetBetCoupon() int64 {
	if x != nil && x.BetCoupon != nil {
		return *x.BetCoupon
	}
	return 0
}

func (x *Slot_HistoryLogData) GetFinalCoupon() int64 {
	if x != nil && x.FinalCoupon != nil {
		return *x.FinalCoupon
	}
	return 0
}

// 讀取歷程紀錄
type Slot_LoadHistoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`       // 玩家ID
	GameID    *int32  `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`       // 遊戲ID
	StartTime *string `protobuf:"bytes,3,req,name=StartTime" json:"StartTime,omitempty"`  // ServerID
	EndTime   *string `protobuf:"bytes,4,req,name=EndTime" json:"EndTime,omitempty"`      // 原始分數
	PageIndex *int32  `protobuf:"varint,5,opt,name=PageIndex" json:"PageIndex,omitempty"` // 第幾頁
	PageSize  *int32  `protobuf:"varint,6,opt,name=PageSize" json:"PageSize,omitempty"`   // 一頁幾筆
}

func (x *Slot_LoadHistoryData) Reset() {
	*x = Slot_LoadHistoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_LoadHistoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_LoadHistoryData) ProtoMessage() {}

func (x *Slot_LoadHistoryData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_LoadHistoryData.ProtoReflect.Descriptor instead.
func (*Slot_LoadHistoryData) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{12}
}

func (x *Slot_LoadHistoryData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *Slot_LoadHistoryData) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *Slot_LoadHistoryData) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *Slot_LoadHistoryData) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *Slot_LoadHistoryData) GetPageIndex() int32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *Slot_LoadHistoryData) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

// 歷程紀錄結果
type Slot_SendHistoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         *int32                 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`                // 回傳玩家ID
	GameID         *int32                 `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`                // 回傳遊戲ID
	PageCount      *int32                 `protobuf:"varint,3,req,name=PageCount" json:"PageCount,omitempty"`          // 回傳全部筆數
	SendHistoryLog []*Slot_SendHistoryLog `protobuf:"bytes,4,rep,name=SendHistoryLog" json:"SendHistoryLog,omitempty"` //歷程紀錄
}

func (x *Slot_SendHistoryData) Reset() {
	*x = Slot_SendHistoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_SendHistoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_SendHistoryData) ProtoMessage() {}

func (x *Slot_SendHistoryData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_SendHistoryData.ProtoReflect.Descriptor instead.
func (*Slot_SendHistoryData) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{13}
}

func (x *Slot_SendHistoryData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *Slot_SendHistoryData) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *Slot_SendHistoryData) GetPageCount() int32 {
	if x != nil && x.PageCount != nil {
		return *x.PageCount
	}
	return 0
}

func (x *Slot_SendHistoryData) GetSendHistoryLog() []*Slot_SendHistoryLog {
	if x != nil {
		return x.SendHistoryLog
	}
	return nil
}

// 傳送歷程紀錄
type Slot_SendHistoryLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowNum     *int32  `protobuf:"varint,1,req,name=RowNum" json:"RowNum,omitempty"`        //流水號
	CreateTime *string `protobuf:"bytes,2,req,name=CreateTime" json:"CreateTime,omitempty"` //訂單時間
	OrderID    *int64  `protobuf:"varint,3,req,name=OrderID" json:"OrderID,omitempty"`      //訂單編號
	BetMoney   *int64  `protobuf:"varint,4,req,name=BetMoney" json:"BetMoney,omitempty"`    //投注金額
	Profit     *int64  `protobuf:"varint,5,req,name=Profit" json:"Profit,omitempty"`        //盈利/輸贏(計算方式:結算分數-原始分數)
}

func (x *Slot_SendHistoryLog) Reset() {
	*x = Slot_SendHistoryLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_Slot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_SendHistoryLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_SendHistoryLog) ProtoMessage() {}

func (x *Slot_SendHistoryLog) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_Slot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_SendHistoryLog.ProtoReflect.Descriptor instead.
func (*Slot_SendHistoryLog) Descriptor() ([]byte, []int) {
	return file_GameMsg_Slot_proto_rawDescGZIP(), []int{14}
}

func (x *Slot_SendHistoryLog) GetRowNum() int32 {
	if x != nil && x.RowNum != nil {
		return *x.RowNum
	}
	return 0
}

func (x *Slot_SendHistoryLog) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *Slot_SendHistoryLog) GetOrderID() int64 {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return 0
}

func (x *Slot_SendHistoryLog) GetBetMoney() int64 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *Slot_SendHistoryLog) GetProfit() int64 {
	if x != nil && x.Profit != nil {
		return *x.Profit
	}
	return 0
}

var File_GameMsg_Slot_proto protoreflect.FileDescriptor

var file_GameMsg_Slot_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27,
	0x0a, 0x0f, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x6c, 0x6f, 0x74, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x52, 0x65, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x65,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x52, 0x65, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x50, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x09, 0x50, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x53,
	0x6c, 0x6f, 0x74, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x10, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52,
	0x65, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x61, 0x6c,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x65, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x65, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x52, 0x65, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x52, 0x6f, 0x77, 0x22, 0x8f,
	0x01, 0x0a, 0x0f, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x42, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x49, 0x0a, 0x0b, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x0c, 0x53,
	0x6c, 0x6f, 0x74, 0x5f, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x65,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0d, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x50, 0x61,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69,
	0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69,
	0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x42, 0x6c, 0x69, 0x6e,
	0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x5f, 0x52, 0x65, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x42,
	0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb0, 0x01,
	0x0a, 0x13, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63,
	0x22, 0x97, 0x03, 0x0a, 0x13, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x42,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x53,
	0x6c, 0x6f, 0x74, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53,
	0x65, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0e,
	0x53, 0x65, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x6f, 0x67, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x6f, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x65, 0x6e,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x77,
	0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_Slot_proto_rawDescOnce sync.Once
	file_GameMsg_Slot_proto_rawDescData = file_GameMsg_Slot_proto_rawDesc
)

func file_GameMsg_Slot_proto_rawDescGZIP() []byte {
	file_GameMsg_Slot_proto_rawDescOnce.Do(func() {
		file_GameMsg_Slot_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_Slot_proto_rawDescData)
	})
	return file_GameMsg_Slot_proto_rawDescData
}

var file_GameMsg_Slot_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_GameMsg_Slot_proto_goTypes = []interface{}{
	(*Slot_MSG_Status)(nil),      // 0: netproto.Slot_MSG_Status
	(*Slot_MSG_BetStatus)(nil),   // 1: netproto.Slot_MSG_BetStatus
	(*Slot_MSG_GameResult)(nil),  // 2: netproto.Slot_MSG_GameResult
	(*Slot_MSG_Spin)(nil),        // 3: netproto.Slot_MSG_Spin
	(*Slot_ReelSetting)(nil),     // 4: netproto.Slot_ReelSetting
	(*Slot_ReelPosition)(nil),    // 5: netproto.Slot_ReelPosition
	(*Slot_ReelResult)(nil),      // 6: netproto.Slot_ReelResult
	(*Slot_Symbol)(nil),          // 7: netproto.Slot_Symbol
	(*Slot_PayLine)(nil),         // 8: netproto.Slot_PayLine
	(*Slot_PayGroup)(nil),        // 9: netproto.Slot_PayGroup
	(*Slot_SymbolPayTable)(nil),  // 10: netproto.Slot_SymbolPayTable
	(*Slot_HistoryLogData)(nil),  // 11: netproto.Slot_HistoryLogData
	(*Slot_LoadHistoryData)(nil), // 12: netproto.Slot_LoadHistoryData
	(*Slot_SendHistoryData)(nil), // 13: netproto.Slot_SendHistoryData
	(*Slot_SendHistoryLog)(nil),  // 14: netproto.Slot_SendHistoryLog
}
var file_GameMsg_Slot_proto_depIdxs = []int32{
	6,  // 0: netproto.Slot_MSG_GameResult.ReelResult:type_name -> netproto.Slot_ReelResult
	9,  // 1: netproto.Slot_MSG_GameResult.PayGroups:type_name -> netproto.Slot_PayGroup
	7,  // 2: netproto.Slot_ReelSetting.Symbols:type_name -> netproto.Slot_Symbol
	5,  // 3: netproto.Slot_ReelResult.Position:type_name -> netproto.Slot_ReelPosition
	7,  // 4: netproto.Slot_ReelResult.Symbol:type_name -> netproto.Slot_Symbol
	5,  // 5: netproto.Slot_PayLine.Positions:type_name -> netproto.Slot_ReelPosition
	8,  // 6: netproto.Slot_PayGroup.PayLines:type_name -> netproto.Slot_PayLine
	5,  // 7: netproto.Slot_PayGroup.BlinkPositions:type_name -> netproto.Slot_ReelPosition
	7,  // 8: netproto.Slot_SymbolPayTable.Symbol:type_name -> netproto.Slot_Symbol
	14, // 9: netproto.Slot_SendHistoryData.SendHistoryLog:type_name -> netproto.Slot_SendHistoryLog
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_GameMsg_Slot_proto_init() }
func file_GameMsg_Slot_proto_init() {
	if File_GameMsg_Slot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_Slot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_MSG_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_MSG_BetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_MSG_GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_MSG_Spin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_ReelSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_ReelPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_ReelResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_PayLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_PayGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_SymbolPayTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_HistoryLogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_LoadHistoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_SendHistoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_Slot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_SendHistoryLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_Slot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_Slot_proto_goTypes,
		DependencyIndexes: file_GameMsg_Slot_proto_depIdxs,
		MessageInfos:      file_GameMsg_Slot_proto_msgTypes,
	}.Build()
	File_GameMsg_Slot_proto = out.File
	file_GameMsg_Slot_proto_rawDesc = nil
	file_GameMsg_Slot_proto_goTypes = nil
	file_GameMsg_Slot_proto_depIdxs = nil
}
