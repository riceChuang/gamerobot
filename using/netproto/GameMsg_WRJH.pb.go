// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_WRJH.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//下注设置
type WRJH_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCount      []int32 `protobuf:"varint,1,rep,name=BetCount" json:"BetCount,omitempty"`           //一次下注的数量
	BetMoney      *int32  `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`           //一次下注的钱
	ZhuangLimit   *int64  `protobuf:"varint,3,req,name=ZhuangLimit" json:"ZhuangLimit,omitempty"`     //上庄钱限制
	CanBetLimit   *int64  `protobuf:"varint,4,opt,name=CanBetLimit" json:"CanBetLimit,omitempty"`     //可以押注需要的金币下限
	MaxTotalMoney []int64 `protobuf:"varint,5,rep,name=MaxTotalMoney" json:"MaxTotalMoney,omitempty"` //每個區塊下注最大上限
	TaxScale      *int32  `protobuf:"varint,6,opt,name=TaxScale" json:"TaxScale,omitempty"`           //稅收
}

func (x *WRJH_Setting) Reset() {
	*x = WRJH_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_Setting) ProtoMessage() {}

func (x *WRJH_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_Setting.ProtoReflect.Descriptor instead.
func (*WRJH_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{0}
}

func (x *WRJH_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *WRJH_Setting) GetBetMoney() int32 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *WRJH_Setting) GetZhuangLimit() int64 {
	if x != nil && x.ZhuangLimit != nil {
		return *x.ZhuangLimit
	}
	return 0
}

func (x *WRJH_Setting) GetCanBetLimit() int64 {
	if x != nil && x.CanBetLimit != nil {
		return *x.CanBetLimit
	}
	return 0
}

func (x *WRJH_Setting) GetMaxTotalMoney() []int64 {
	if x != nil {
		return x.MaxTotalMoney
	}
	return nil
}

func (x *WRJH_Setting) GetTaxScale() int32 {
	if x != nil && x.TaxScale != nil {
		return *x.TaxScale
	}
	return 0
}

//状态消息
type WRJH_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"` //状态
	Time  *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`   //此状态的剩余时间
}

func (x *WRJH_Sate) Reset() {
	*x = WRJH_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_Sate) ProtoMessage() {}

func (x *WRJH_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_Sate.ProtoReflect.Descriptor instead.
func (*WRJH_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{1}
}

func (x *WRJH_Sate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *WRJH_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户断线重连下注消息
type WRJH_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMoney  *int64                  `protobuf:"varint,1,req,name=UserMoney" json:"UserMoney,omitempty"`
	BetInfo    []*WRJH_BroadCastBet    `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
	AllUserBet []*WRJH_BroadCastBetArr `protobuf:"bytes,3,rep,name=AllUserBet" json:"AllUserBet,omitempty"` //当前桌上所有玩家所有押注信息
}

func (x *WRJH_UserBetInfo) Reset() {
	*x = WRJH_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_UserBetInfo) ProtoMessage() {}

func (x *WRJH_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_UserBetInfo.ProtoReflect.Descriptor instead.
func (*WRJH_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{2}
}

func (x *WRJH_UserBetInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *WRJH_UserBetInfo) GetBetInfo() []*WRJH_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

func (x *WRJH_UserBetInfo) GetAllUserBet() []*WRJH_BroadCastBetArr {
	if x != nil {
		return x.AllUserBet
	}
	return nil
}

//广播用户下注的数组
type WRJH_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32               `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*WRJH_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
	BetArrSelf      []*WRJH_Bet          `protobuf:"bytes,3,rep,name=BetArrSelf" json:"BetArrSelf,omitempty"`
}

func (x *WRJH_BroadCastBetArr) Reset() {
	*x = WRJH_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_BroadCastBetArr) ProtoMessage() {}

func (x *WRJH_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*WRJH_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{3}
}

func (x *WRJH_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *WRJH_BroadCastBetArr) GetBroadCastBetArr() []*WRJH_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

func (x *WRJH_BroadCastBetArr) GetBetArrSelf() []*WRJH_Bet {
	if x != nil {
		return x.BetArrSelf
	}
	return nil
}

//广播用户下注内容数据结构
type WRJH_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Money *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
}

func (x *WRJH_BroadCastBet) Reset() {
	*x = WRJH_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_BroadCastBet) ProtoMessage() {}

func (x *WRJH_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_BroadCastBet.ProtoReflect.Descriptor instead.
func (*WRJH_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{4}
}

func (x *WRJH_BroadCastBet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WRJH_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

//用户下注数组
type WRJH_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*WRJH_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *WRJH_BetArr) Reset() {
	*x = WRJH_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_BetArr) ProtoMessage() {}

func (x *WRJH_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_BetArr.ProtoReflect.Descriptor instead.
func (*WRJH_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{5}
}

func (x *WRJH_BetArr) GetBetArr() []*WRJH_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type WRJH_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *int32 `protobuf:"varint,1,req,name=BetType" json:"BetType,omitempty"`
	Count   *int32 `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
}

func (x *WRJH_Bet) Reset() {
	*x = WRJH_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_Bet) ProtoMessage() {}

func (x *WRJH_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_Bet.ProtoReflect.Descriptor instead.
func (*WRJH_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{6}
}

func (x *WRJH_Bet) GetBetType() int32 {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return 0
}

func (x *WRJH_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//万人金花下注的结果
type WRJH_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32      `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`      //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4此类下注已达到上限
	Money  *int64      `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`  //用户的钱，下注以后的金额。
	Type   *int32      `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`    //下注超过限制的下注类型
	BetArr []*WRJH_Bet `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"` //用户下注数据
}

func (x *WRJH_BetRet) Reset() {
	*x = WRJH_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_BetRet) ProtoMessage() {}

func (x *WRJH_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_BetRet.ProtoReflect.Descriptor instead.
func (*WRJH_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{7}
}

func (x *WRJH_BetRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *WRJH_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *WRJH_BetRet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WRJH_BetRet) GetBetArr() []*WRJH_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

type WRJH_SeatPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo      *int32       `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"` //0、1、2、3、4分别代表庄、天、地、玄、黄
	Cards       []*PokerCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
	TargetCards []*PokerCard `protobuf:"bytes,3,rep,name=TargetCards" json:"TargetCards,omitempty"` //从5张牌中选出的3张牌，只发了2张牌时这里的值为空
	PokerType   *int32       `protobuf:"varint,4,opt,name=PokerType" json:"PokerType,omitempty"`    //牌型：单牌-豹子 1-6，0代表只有两张牌未定牌型
	WinLose     *int32       `protobuf:"varint,5,opt,name=WinLose" json:"WinLose,omitempty"`        //1代表赢，-1代表输，0代表只有两张牌暂未判定，如果是庄也保持为0不判定
}

func (x *WRJH_SeatPoker) Reset() {
	*x = WRJH_SeatPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_SeatPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_SeatPoker) ProtoMessage() {}

func (x *WRJH_SeatPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_SeatPoker.ProtoReflect.Descriptor instead.
func (*WRJH_SeatPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{8}
}

func (x *WRJH_SeatPoker) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *WRJH_SeatPoker) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *WRJH_SeatPoker) GetTargetCards() []*PokerCard {
	if x != nil {
		return x.TargetCards
	}
	return nil
}

func (x *WRJH_SeatPoker) GetPokerType() int32 {
	if x != nil && x.PokerType != nil {
		return *x.PokerType
	}
	return 0
}

func (x *WRJH_SeatPoker) GetWinLose() int32 {
	if x != nil && x.WinLose != nil {
		return *x.WinLose
	}
	return 0
}

//游戏扑克结果
type WRJH_GameResultPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poker []*WRJH_SeatPoker `protobuf:"bytes,1,rep,name=Poker" json:"Poker,omitempty"` //庄、天、地、玄、黄
}

func (x *WRJH_GameResultPoker) Reset() {
	*x = WRJH_GameResultPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_GameResultPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_GameResultPoker) ProtoMessage() {}

func (x *WRJH_GameResultPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_GameResultPoker.ProtoReflect.Descriptor instead.
func (*WRJH_GameResultPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{9}
}

func (x *WRJH_GameResultPoker) GetPoker() []*WRJH_SeatPoker {
	if x != nil {
		return x.Poker
	}
	return nil
}

//游戏用户赢钱结果
type WRJH_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin   *int64             `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`
	SelfWin     *int64             `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	WinUserInfo []*WRJH_WinUerInfo `protobuf:"bytes,3,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"` //金币最多6个人信息
	JiangType   *WRJH_JiangType    `protobuf:"bytes,4,req,name=JiangType" json:"JiangType,omitempty"`     //本次开奖结果
}

func (x *WRJH_GameResultUserMoney) Reset() {
	*x = WRJH_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_GameResultUserMoney) ProtoMessage() {}

func (x *WRJH_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*WRJH_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{10}
}

func (x *WRJH_GameResultUserMoney) GetZhuangWin() int64 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *WRJH_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *WRJH_GameResultUserMoney) GetWinUserInfo() []*WRJH_WinUerInfo {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

func (x *WRJH_GameResultUserMoney) GetJiangType() *WRJH_JiangType {
	if x != nil {
		return x.JiangType
	}
	return nil
}

//赢钱玩家信息
type WRJH_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
	UserID   *int32  `protobuf:"varint,3,opt,name=UserID" json:"UserID,omitempty"`
}

func (x *WRJH_WinUerInfo) Reset() {
	*x = WRJH_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_WinUerInfo) ProtoMessage() {}

func (x *WRJH_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_WinUerInfo.ProtoReflect.Descriptor instead.
func (*WRJH_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{11}
}

func (x *WRJH_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *WRJH_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

func (x *WRJH_WinUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

//前20次开出的牌
type WRJH_ResultCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList []*WRJH_JiangType `protobuf:"bytes,1,rep,name=CardList" json:"CardList,omitempty"`
	ServerID *int32            `protobuf:"varint,2,opt,name=ServerID" json:"ServerID,omitempty"`
	State    *int32            `protobuf:"varint,3,opt,name=State" json:"State,omitempty"`
	Time     *int32            `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty"`
}

func (x *WRJH_ResultCardList) Reset() {
	*x = WRJH_ResultCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_ResultCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_ResultCardList) ProtoMessage() {}

func (x *WRJH_ResultCardList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_ResultCardList.ProtoReflect.Descriptor instead.
func (*WRJH_ResultCardList) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{12}
}

func (x *WRJH_ResultCardList) GetCardList() []*WRJH_JiangType {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *WRJH_ResultCardList) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *WRJH_ResultCardList) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *WRJH_ResultCardList) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type WRJH_JiangType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JiangType []int32 `protobuf:"varint,1,rep,name=JiangType" json:"JiangType,omitempty"` //四个数字依次代表天地玄黄四个位置的开奖结果，正数代表赢负数代表输，数值大小代表输赢的倍数
}

func (x *WRJH_JiangType) Reset() {
	*x = WRJH_JiangType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_JiangType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_JiangType) ProtoMessage() {}

func (x *WRJH_JiangType) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_JiangType.ProtoReflect.Descriptor instead.
func (*WRJH_JiangType) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{13}
}

func (x *WRJH_JiangType) GetJiangType() []int32 {
	if x != nil {
		return x.JiangType
	}
	return nil
}

//上庄结果
type WRJH_ShangzhuangRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"` //值为1时下庄成功，值为0表示上庄成功，值为-1时上庄失败资金不足，值为-2时已经在上庄列表中。
}

func (x *WRJH_ShangzhuangRet) Reset() {
	*x = WRJH_ShangzhuangRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_ShangzhuangRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_ShangzhuangRet) ProtoMessage() {}

func (x *WRJH_ShangzhuangRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_ShangzhuangRet.ProtoReflect.Descriptor instead.
func (*WRJH_ShangzhuangRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{14}
}

func (x *WRJH_ShangzhuangRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//是否上庄
type WRJH_ShangZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShangZhuang *bool `protobuf:"varint,1,req,name=IsShangZhuang" json:"IsShangZhuang,omitempty"`
}

func (x *WRJH_ShangZhuang) Reset() {
	*x = WRJH_ShangZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_ShangZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_ShangZhuang) ProtoMessage() {}

func (x *WRJH_ShangZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_ShangZhuang.ProtoReflect.Descriptor instead.
func (*WRJH_ShangZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{15}
}

func (x *WRJH_ShangZhuang) GetIsShangZhuang() bool {
	if x != nil && x.IsShangZhuang != nil {
		return *x.IsShangZhuang
	}
	return false
}

//庄家信息
type WRJH_ZhuangInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         *int32      `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	LastTurn       *int32      `protobuf:"varint,2,req,name=LastTurn" json:"LastTurn,omitempty"`
	UserInfo       []*GameUser `protobuf:"bytes,3,rep,name=UserInfo" json:"UserInfo,omitempty"`
	ZhuangTotalWin *int64      `protobuf:"varint,4,opt,name=ZhuangTotalWin" json:"ZhuangTotalWin,omitempty"`
}

func (x *WRJH_ZhuangInfo) Reset() {
	*x = WRJH_ZhuangInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_ZhuangInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_ZhuangInfo) ProtoMessage() {}

func (x *WRJH_ZhuangInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_ZhuangInfo.ProtoReflect.Descriptor instead.
func (*WRJH_ZhuangInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{16}
}

func (x *WRJH_ZhuangInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *WRJH_ZhuangInfo) GetLastTurn() int32 {
	if x != nil && x.LastTurn != nil {
		return *x.LastTurn
	}
	return 0
}

func (x *WRJH_ZhuangInfo) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *WRJH_ZhuangInfo) GetZhuangTotalWin() int64 {
	if x != nil && x.ZhuangTotalWin != nil {
		return *x.ZhuangTotalWin
	}
	return 0
}

//上庄列表
type WRJH_ZhuangList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*GameUser `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *WRJH_ZhuangList) Reset() {
	*x = WRJH_ZhuangList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_ZhuangList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_ZhuangList) ProtoMessage() {}

func (x *WRJH_ZhuangList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_ZhuangList.ProtoReflect.Descriptor instead.
func (*WRJH_ZhuangList) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{17}
}

func (x *WRJH_ZhuangList) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//金币最多的6个玩家
type WRJH_MostScoreUsrList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*GameUser `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *WRJH_MostScoreUsrList) Reset() {
	*x = WRJH_MostScoreUsrList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_MostScoreUsrList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_MostScoreUsrList) ProtoMessage() {}

func (x *WRJH_MostScoreUsrList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_MostScoreUsrList.ProtoReflect.Descriptor instead.
func (*WRJH_MostScoreUsrList) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{18}
}

func (x *WRJH_MostScoreUsrList) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//清除结果回应消息
type WRJH_BetClearRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` //当前的钱
	Ret   *int32 `protobuf:"varint,2,req,name=Ret" json:"Ret,omitempty"`     //清除结果-1，清理失败，达到清理上限，0清理成功
}

func (x *WRJH_BetClearRet) Reset() {
	*x = WRJH_BetClearRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_BetClearRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_BetClearRet) ProtoMessage() {}

func (x *WRJH_BetClearRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_BetClearRet.ProtoReflect.Descriptor instead.
func (*WRJH_BetClearRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{19}
}

func (x *WRJH_BetClearRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *WRJH_BetClearRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//富豪列表
type WRJH_RichestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichestList []*WRJH_Richest `protobuf:"bytes,1,rep,name=RichestList" json:"RichestList,omitempty"`
}

func (x *WRJH_RichestList) Reset() {
	*x = WRJH_RichestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_RichestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_RichestList) ProtoMessage() {}

func (x *WRJH_RichestList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_RichestList.ProtoReflect.Descriptor instead.
func (*WRJH_RichestList) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{20}
}

func (x *WRJH_RichestList) GetRichestList() []*WRJH_Richest {
	if x != nil {
		return x.RichestList
	}
	return nil
}

type WRJH_Richest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking       *int32 `protobuf:"varint,1,req,name=Ranking" json:"Ranking,omitempty"`             //富豪排名
	UserID        *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`               //富豪ID
	UserFaceID    *int32 `protobuf:"varint,3,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //富豪頭像ID
	Money         *int64 `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`                 //富豪当前身上的钱
	AvatarFrameID *int32 `protobuf:"varint,5,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
	LastBetTotal  *int64 `protobuf:"varint,6,opt,name=LastBetTotal" json:"LastBetTotal,omitempty"`   //上局下注總量
}

func (x *WRJH_Richest) Reset() {
	*x = WRJH_Richest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_Richest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_Richest) ProtoMessage() {}

func (x *WRJH_Richest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_Richest.ProtoReflect.Descriptor instead.
func (*WRJH_Richest) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{21}
}

func (x *WRJH_Richest) GetRanking() int32 {
	if x != nil && x.Ranking != nil {
		return *x.Ranking
	}
	return 0
}

func (x *WRJH_Richest) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *WRJH_Richest) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *WRJH_Richest) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *WRJH_Richest) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

func (x *WRJH_Richest) GetLastBetTotal() int64 {
	if x != nil && x.LastBetTotal != nil {
		return *x.LastBetTotal
	}
	return 0
}

type WRJH_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *WRJH_GameNoInfo) Reset() {
	*x = WRJH_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_WRJH_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WRJH_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WRJH_GameNoInfo) ProtoMessage() {}

func (x *WRJH_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_WRJH_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WRJH_GameNoInfo.ProtoReflect.Descriptor instead.
func (*WRJH_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_WRJH_proto_rawDescGZIP(), []int{22}
}

func (x *WRJH_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

var File_GameMsg_WRJH_proto protoreflect.FileDescriptor

var file_GameMsg_WRJH_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x57, 0x52, 0x4a, 0x48, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x01,
	0x0a, 0x0c, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43,
	0x61, 0x6e, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61,
	0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x35, 0x0a, 0x09,
	0x57, 0x52, 0x4a, 0x48, 0x5f, 0x53, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a,
	0x0a, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a,
	0x48, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x22, 0xa9, 0x01,
	0x0a, 0x14, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74,
	0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x45,
	0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x53,
	0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x0a, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x22, 0x3d, 0x0a, 0x11, 0x57, 0x52, 0x4a,
	0x48, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x0b, 0x57, 0x52, 0x4a, 0x48,
	0x5f, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74,
	0x41, 0x72, 0x72, 0x22, 0x3a, 0x0a, 0x08, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x75, 0x0a, 0x0b, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06,
	0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x57, 0x52, 0x4a, 0x48, 0x5f,
	0x53, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x57,
	0x52, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52,
	0x4a, 0x48, 0x5f, 0x53, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x18, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x57, 0x69,
	0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a,
	0x0f, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x57, 0x52, 0x4a, 0x48, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48,
	0x5f, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x0e, 0x57, 0x52,
	0x4a, 0x48, 0x5f, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x13, 0x57, 0x52,
	0x4a, 0x48, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x52, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x53, 0x68, 0x61, 0x6e,
	0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x61,
	0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d,
	0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x22, 0x9d, 0x01,
	0x0a, 0x0f, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x22, 0x41, 0x0a,
	0x0f, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x47, 0x0a, 0x15, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x10, 0x57, 0x52, 0x4a,
	0x48, 0x5f, 0x42, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x4c, 0x0a, 0x10, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x52, 0x69,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x52, 0x69, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x52,
	0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x52, 0x69, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x29, 0x0a, 0x0f, 0x57, 0x52, 0x4a, 0x48, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_WRJH_proto_rawDescOnce sync.Once
	file_GameMsg_WRJH_proto_rawDescData = file_GameMsg_WRJH_proto_rawDesc
)

func file_GameMsg_WRJH_proto_rawDescGZIP() []byte {
	file_GameMsg_WRJH_proto_rawDescOnce.Do(func() {
		file_GameMsg_WRJH_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_WRJH_proto_rawDescData)
	})
	return file_GameMsg_WRJH_proto_rawDescData
}

var file_GameMsg_WRJH_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_GameMsg_WRJH_proto_goTypes = []interface{}{
	(*WRJH_Setting)(nil),             // 0: netproto.WRJH_Setting
	(*WRJH_Sate)(nil),                // 1: netproto.WRJH_Sate
	(*WRJH_UserBetInfo)(nil),         // 2: netproto.WRJH_UserBetInfo
	(*WRJH_BroadCastBetArr)(nil),     // 3: netproto.WRJH_BroadCastBetArr
	(*WRJH_BroadCastBet)(nil),        // 4: netproto.WRJH_BroadCastBet
	(*WRJH_BetArr)(nil),              // 5: netproto.WRJH_BetArr
	(*WRJH_Bet)(nil),                 // 6: netproto.WRJH_Bet
	(*WRJH_BetRet)(nil),              // 7: netproto.WRJH_BetRet
	(*WRJH_SeatPoker)(nil),           // 8: netproto.WRJH_SeatPoker
	(*WRJH_GameResultPoker)(nil),     // 9: netproto.WRJH_GameResultPoker
	(*WRJH_GameResultUserMoney)(nil), // 10: netproto.WRJH_GameResultUserMoney
	(*WRJH_WinUerInfo)(nil),          // 11: netproto.WRJH_WinUerInfo
	(*WRJH_ResultCardList)(nil),      // 12: netproto.WRJH_ResultCardList
	(*WRJH_JiangType)(nil),           // 13: netproto.WRJH_JiangType
	(*WRJH_ShangzhuangRet)(nil),      // 14: netproto.WRJH_ShangzhuangRet
	(*WRJH_ShangZhuang)(nil),         // 15: netproto.WRJH_ShangZhuang
	(*WRJH_ZhuangInfo)(nil),          // 16: netproto.WRJH_ZhuangInfo
	(*WRJH_ZhuangList)(nil),          // 17: netproto.WRJH_ZhuangList
	(*WRJH_MostScoreUsrList)(nil),    // 18: netproto.WRJH_MostScoreUsrList
	(*WRJH_BetClearRet)(nil),         // 19: netproto.WRJH_BetClearRet
	(*WRJH_RichestList)(nil),         // 20: netproto.WRJH_RichestList
	(*WRJH_Richest)(nil),             // 21: netproto.WRJH_Richest
	(*WRJH_GameNoInfo)(nil),          // 22: netproto.WRJH_GameNoInfo
	(*PokerCard)(nil),                // 23: netproto.PokerCard
	(*GameUser)(nil),                 // 24: netproto.GameUser
}
var file_GameMsg_WRJH_proto_depIdxs = []int32{
	4,  // 0: netproto.WRJH_UserBetInfo.BetInfo:type_name -> netproto.WRJH_BroadCastBet
	3,  // 1: netproto.WRJH_UserBetInfo.AllUserBet:type_name -> netproto.WRJH_BroadCastBetArr
	4,  // 2: netproto.WRJH_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.WRJH_BroadCastBet
	6,  // 3: netproto.WRJH_BroadCastBetArr.BetArrSelf:type_name -> netproto.WRJH_Bet
	6,  // 4: netproto.WRJH_BetArr.BetArr:type_name -> netproto.WRJH_Bet
	6,  // 5: netproto.WRJH_BetRet.BetArr:type_name -> netproto.WRJH_Bet
	23, // 6: netproto.WRJH_SeatPoker.Cards:type_name -> netproto.PokerCard
	23, // 7: netproto.WRJH_SeatPoker.TargetCards:type_name -> netproto.PokerCard
	8,  // 8: netproto.WRJH_GameResultPoker.Poker:type_name -> netproto.WRJH_SeatPoker
	11, // 9: netproto.WRJH_GameResultUserMoney.WinUserInfo:type_name -> netproto.WRJH_WinUerInfo
	13, // 10: netproto.WRJH_GameResultUserMoney.JiangType:type_name -> netproto.WRJH_JiangType
	13, // 11: netproto.WRJH_ResultCardList.CardList:type_name -> netproto.WRJH_JiangType
	24, // 12: netproto.WRJH_ZhuangInfo.UserInfo:type_name -> netproto.GameUser
	24, // 13: netproto.WRJH_ZhuangList.UserInfo:type_name -> netproto.GameUser
	24, // 14: netproto.WRJH_MostScoreUsrList.UserInfo:type_name -> netproto.GameUser
	21, // 15: netproto.WRJH_RichestList.RichestList:type_name -> netproto.WRJH_Richest
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_GameMsg_WRJH_proto_init() }
func file_GameMsg_WRJH_proto_init() {
	if File_GameMsg_WRJH_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_WRJH_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_SeatPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_GameResultPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_ResultCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_JiangType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_ShangzhuangRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_ShangZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_ZhuangInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_ZhuangList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_MostScoreUsrList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_BetClearRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_RichestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_Richest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_WRJH_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WRJH_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_WRJH_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_WRJH_proto_goTypes,
		DependencyIndexes: file_GameMsg_WRJH_proto_depIdxs,
		MessageInfos:      file_GameMsg_WRJH_proto_msgTypes,
	}.Build()
	File_GameMsg_WRJH_proto = out.File
	file_GameMsg_WRJH_proto_rawDesc = nil
	file_GameMsg_WRJH_proto_goTypes = nil
	file_GameMsg_WRJH_proto_depIdxs = nil
}
