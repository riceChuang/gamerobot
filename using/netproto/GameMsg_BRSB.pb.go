// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: GameMsg_BRSB.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BRSB_Flow int32

const (
	BRSB_Flow_BRSBReady          BRSB_Flow = 0 //准备中
	BRSB_Flow_BRSBStartAction    BRSB_Flow = 1 //遊戲開始, 摇骰中.
	BRSB_Flow_BRSBStartBet       BRSB_Flow = 2 //下注前准备动画.
	BRSB_Flow_BRSBBet            BRSB_Flow = 3 //下注状态
	BRSB_Flow_BRSBEndBet         BRSB_Flow = 4 //下注后结束动画.买定离手
	BRSB_Flow_BRSBKaiJiang       BRSB_Flow = 5 //开奖状态, 开骰中
	BRSB_Flow_BRSBKaiJiangAction BRSB_Flow = 6 //开奖动画, 派奖中.
	BRSB_Flow_BRSBEndAction      BRSB_Flow = 7 //结算动画, 休息中. Done
)

// Enum value maps for BRSB_Flow.
var (
	BRSB_Flow_name = map[int32]string{
		0: "BRSBReady",
		1: "BRSBStartAction",
		2: "BRSBStartBet",
		3: "BRSBBet",
		4: "BRSBEndBet",
		5: "BRSBKaiJiang",
		6: "BRSBKaiJiangAction",
		7: "BRSBEndAction",
	}
	BRSB_Flow_value = map[string]int32{
		"BRSBReady":          0,
		"BRSBStartAction":    1,
		"BRSBStartBet":       2,
		"BRSBBet":            3,
		"BRSBEndBet":         4,
		"BRSBKaiJiang":       5,
		"BRSBKaiJiangAction": 6,
		"BRSBEndAction":      7,
	}
)

func (x BRSB_Flow) Enum() *BRSB_Flow {
	p := new(BRSB_Flow)
	*p = x
	return p
}

func (x BRSB_Flow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BRSB_Flow) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_BRSB_proto_enumTypes[0].Descriptor()
}

func (BRSB_Flow) Type() protoreflect.EnumType {
	return &file_GameMsg_BRSB_proto_enumTypes[0]
}

func (x BRSB_Flow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BRSB_Flow) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BRSB_Flow(num)
	return nil
}

// Deprecated: Use BRSB_Flow.Descriptor instead.
func (BRSB_Flow) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{0}
}

type BRSB_Bet_Ret int32

const (
	BRSB_Bet_Ret_BRSB_Bet_SUCC         BRSB_Bet_Ret = 0  //下注成功
	BRSB_Bet_Ret_BRSB_Bet_NotnotEnough BRSB_Bet_Ret = -1 //用户金额不足
	BRSB_Bet_Ret_BRSB_Bet_NotFound     BRSB_Bet_Ret = -2 //下注的类型未找到
	BRSB_Bet_Ret_BRSB_Bet_Max          BRSB_Bet_Ret = -3 //下注上限
	BRSB_Bet_Ret_BRSB_Bet_Min          BRSB_Bet_Ret = -4 //下注下限
)

// Enum value maps for BRSB_Bet_Ret.
var (
	BRSB_Bet_Ret_name = map[int32]string{
		0:  "BRSB_Bet_SUCC",
		-1: "BRSB_Bet_NotnotEnough",
		-2: "BRSB_Bet_NotFound",
		-3: "BRSB_Bet_Max",
		-4: "BRSB_Bet_Min",
	}
	BRSB_Bet_Ret_value = map[string]int32{
		"BRSB_Bet_SUCC":         0,
		"BRSB_Bet_NotnotEnough": -1,
		"BRSB_Bet_NotFound":     -2,
		"BRSB_Bet_Max":          -3,
		"BRSB_Bet_Min":          -4,
	}
)

func (x BRSB_Bet_Ret) Enum() *BRSB_Bet_Ret {
	p := new(BRSB_Bet_Ret)
	*p = x
	return p
}

func (x BRSB_Bet_Ret) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BRSB_Bet_Ret) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_BRSB_proto_enumTypes[1].Descriptor()
}

func (BRSB_Bet_Ret) Type() protoreflect.EnumType {
	return &file_GameMsg_BRSB_proto_enumTypes[1]
}

func (x BRSB_Bet_Ret) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BRSB_Bet_Ret) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BRSB_Bet_Ret(num)
	return nil
}

// Deprecated: Use BRSB_Bet_Ret.Descriptor instead.
func (BRSB_Bet_Ret) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{1}
}

//下注区域
type BRSB_BetType int32

const (
	BRSB_BetType_BRSB_Bet_Type_Dan    BRSB_BetType = 1    //单
	BRSB_BetType_BRSB_Bet_Type_Shuang BRSB_BetType = 2    //双
	BRSB_BetType_BRSB_Bet_Type_Da     BRSB_BetType = 3    //大
	BRSB_BetType_BRSB_Bet_Type_Xiao   BRSB_BetType = 4    //小
	BRSB_BetType_BRSB_Bet_Type_Shu4   BRSB_BetType = 104  //点数:4
	BRSB_BetType_BRSB_Bet_Type_Shu5   BRSB_BetType = 105  //点数:5
	BRSB_BetType_BRSB_Bet_Type_Shu6   BRSB_BetType = 106  //点数:6
	BRSB_BetType_BRSB_Bet_Type_Shu7   BRSB_BetType = 107  //点数:7
	BRSB_BetType_BRSB_Bet_Type_Shu8   BRSB_BetType = 108  //点数:8
	BRSB_BetType_BRSB_Bet_Type_Shu9   BRSB_BetType = 109  //点数:9
	BRSB_BetType_BRSB_Bet_Type_Shu10  BRSB_BetType = 110  //点数:10
	BRSB_BetType_BRSB_Bet_Type_Shu11  BRSB_BetType = 111  //点数:11
	BRSB_BetType_BRSB_Bet_Type_Shu12  BRSB_BetType = 112  //点数:12
	BRSB_BetType_BRSB_Bet_Type_Shu13  BRSB_BetType = 113  //点数:13
	BRSB_BetType_BRSB_Bet_Type_Shu14  BRSB_BetType = 114  //点数:14
	BRSB_BetType_BRSB_Bet_Type_Shu15  BRSB_BetType = 115  //点数:15
	BRSB_BetType_BRSB_Bet_Type_Shu16  BRSB_BetType = 116  //点数:16
	BRSB_BetType_BRSB_Bet_Type_Shu17  BRSB_BetType = 117  //点数:17
	BRSB_BetType_BRSB_Bet_Type_Bao    BRSB_BetType = 10   //豹子
	BRSB_BetType_BRSB_Bet_Type_Bao1   BRSB_BetType = 11   //豹子:1
	BRSB_BetType_BRSB_Bet_Type_Bao2   BRSB_BetType = 12   //豹子:2
	BRSB_BetType_BRSB_Bet_Type_Bao3   BRSB_BetType = 13   //豹子:3
	BRSB_BetType_BRSB_Bet_Type_Bao4   BRSB_BetType = 14   //豹子:4
	BRSB_BetType_BRSB_Bet_Type_Bao5   BRSB_BetType = 15   //豹子:5
	BRSB_BetType_BRSB_Bet_Type_Bao6   BRSB_BetType = 16   //豹子:6
	BRSB_BetType_BRSB_Bet_Type_Sm1    BRSB_BetType = 1001 //骰面:1
	BRSB_BetType_BRSB_Bet_Type_Sm2    BRSB_BetType = 1002 //骰面:2
	BRSB_BetType_BRSB_Bet_Type_Sm3    BRSB_BetType = 1003 //骰面:3
	BRSB_BetType_BRSB_Bet_Type_Sm4    BRSB_BetType = 1004 //骰面:4
	BRSB_BetType_BRSB_Bet_Type_Sm5    BRSB_BetType = 1005 //骰面:5
	BRSB_BetType_BRSB_Bet_Type_Sm6    BRSB_BetType = 1006 //骰面:6
)

// Enum value maps for BRSB_BetType.
var (
	BRSB_BetType_name = map[int32]string{
		1:    "BRSB_Bet_Type_Dan",
		2:    "BRSB_Bet_Type_Shuang",
		3:    "BRSB_Bet_Type_Da",
		4:    "BRSB_Bet_Type_Xiao",
		104:  "BRSB_Bet_Type_Shu4",
		105:  "BRSB_Bet_Type_Shu5",
		106:  "BRSB_Bet_Type_Shu6",
		107:  "BRSB_Bet_Type_Shu7",
		108:  "BRSB_Bet_Type_Shu8",
		109:  "BRSB_Bet_Type_Shu9",
		110:  "BRSB_Bet_Type_Shu10",
		111:  "BRSB_Bet_Type_Shu11",
		112:  "BRSB_Bet_Type_Shu12",
		113:  "BRSB_Bet_Type_Shu13",
		114:  "BRSB_Bet_Type_Shu14",
		115:  "BRSB_Bet_Type_Shu15",
		116:  "BRSB_Bet_Type_Shu16",
		117:  "BRSB_Bet_Type_Shu17",
		10:   "BRSB_Bet_Type_Bao",
		11:   "BRSB_Bet_Type_Bao1",
		12:   "BRSB_Bet_Type_Bao2",
		13:   "BRSB_Bet_Type_Bao3",
		14:   "BRSB_Bet_Type_Bao4",
		15:   "BRSB_Bet_Type_Bao5",
		16:   "BRSB_Bet_Type_Bao6",
		1001: "BRSB_Bet_Type_Sm1",
		1002: "BRSB_Bet_Type_Sm2",
		1003: "BRSB_Bet_Type_Sm3",
		1004: "BRSB_Bet_Type_Sm4",
		1005: "BRSB_Bet_Type_Sm5",
		1006: "BRSB_Bet_Type_Sm6",
	}
	BRSB_BetType_value = map[string]int32{
		"BRSB_Bet_Type_Dan":    1,
		"BRSB_Bet_Type_Shuang": 2,
		"BRSB_Bet_Type_Da":     3,
		"BRSB_Bet_Type_Xiao":   4,
		"BRSB_Bet_Type_Shu4":   104,
		"BRSB_Bet_Type_Shu5":   105,
		"BRSB_Bet_Type_Shu6":   106,
		"BRSB_Bet_Type_Shu7":   107,
		"BRSB_Bet_Type_Shu8":   108,
		"BRSB_Bet_Type_Shu9":   109,
		"BRSB_Bet_Type_Shu10":  110,
		"BRSB_Bet_Type_Shu11":  111,
		"BRSB_Bet_Type_Shu12":  112,
		"BRSB_Bet_Type_Shu13":  113,
		"BRSB_Bet_Type_Shu14":  114,
		"BRSB_Bet_Type_Shu15":  115,
		"BRSB_Bet_Type_Shu16":  116,
		"BRSB_Bet_Type_Shu17":  117,
		"BRSB_Bet_Type_Bao":    10,
		"BRSB_Bet_Type_Bao1":   11,
		"BRSB_Bet_Type_Bao2":   12,
		"BRSB_Bet_Type_Bao3":   13,
		"BRSB_Bet_Type_Bao4":   14,
		"BRSB_Bet_Type_Bao5":   15,
		"BRSB_Bet_Type_Bao6":   16,
		"BRSB_Bet_Type_Sm1":    1001,
		"BRSB_Bet_Type_Sm2":    1002,
		"BRSB_Bet_Type_Sm3":    1003,
		"BRSB_Bet_Type_Sm4":    1004,
		"BRSB_Bet_Type_Sm5":    1005,
		"BRSB_Bet_Type_Sm6":    1006,
	}
)

func (x BRSB_BetType) Enum() *BRSB_BetType {
	p := new(BRSB_BetType)
	*p = x
	return p
}

func (x BRSB_BetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BRSB_BetType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_BRSB_proto_enumTypes[2].Descriptor()
}

func (BRSB_BetType) Type() protoreflect.EnumType {
	return &file_GameMsg_BRSB_proto_enumTypes[2]
}

func (x BRSB_BetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BRSB_BetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BRSB_BetType(num)
	return nil
}

// Deprecated: Use BRSB_BetType.Descriptor instead.
func (BRSB_BetType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{2}
}

//下注设置
type BRSB_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetRange []*BRSB_Range `protobuf:"bytes,1,rep,name=BetRange" json:"BetRange,omitempty"` //個人下注上下限紅
	Chips    []int32       `protobuf:"varint,2,rep,name=Chips" json:"Chips,omitempty"`      //四个筹码
}

func (x *BRSB_Setting) Reset() {
	*x = BRSB_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_Setting) ProtoMessage() {}

func (x *BRSB_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_Setting.ProtoReflect.Descriptor instead.
func (*BRSB_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{0}
}

func (x *BRSB_Setting) GetBetRange() []*BRSB_Range {
	if x != nil {
		return x.BetRange
	}
	return nil
}

func (x *BRSB_Setting) GetChips() []int32 {
	if x != nil {
		return x.Chips
	}
	return nil
}

//游戏编号
type BRSB_GameNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *BRSB_GameNo) Reset() {
	*x = BRSB_GameNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_GameNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_GameNo) ProtoMessage() {}

func (x *BRSB_GameNo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_GameNo.ProtoReflect.Descriptor instead.
func (*BRSB_GameNo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{1}
}

func (x *BRSB_GameNo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

//状态消息
type BRSB_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BRSB_Flow `protobuf:"varint,1,req,name=State,enum=netproto.BRSB_Flow" json:"State,omitempty"` //状态
	Time  *int32     `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`                           //此状态的剩余时间
}

func (x *BRSB_State) Reset() {
	*x = BRSB_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_State) ProtoMessage() {}

func (x *BRSB_State) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_State.ProtoReflect.Descriptor instead.
func (*BRSB_State) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{2}
}

func (x *BRSB_State) GetState() BRSB_Flow {
	if x != nil && x.State != nil {
		return *x.State
	}
	return BRSB_Flow_BRSBReady
}

func (x *BRSB_State) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户断线重连下注消息
type BRSB_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score   *int64      `protobuf:"varint,1,req,name=Score" json:"Score,omitempty"`
	BetInfo []*BRSB_Bet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *BRSB_UserBetInfo) Reset() {
	*x = BRSB_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_UserBetInfo) ProtoMessage() {}

func (x *BRSB_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_UserBetInfo.ProtoReflect.Descriptor instead.
func (*BRSB_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{3}
}

func (x *BRSB_UserBetInfo) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *BRSB_UserBetInfo) GetBetInfo() []*BRSB_Bet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//广播用户下注的数组
type BRSB_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32      `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*BRSB_Bet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *BRSB_BroadCastBetArr) Reset() {
	*x = BRSB_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_BroadCastBetArr) ProtoMessage() {}

func (x *BRSB_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*BRSB_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{4}
}

func (x *BRSB_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BRSB_BroadCastBetArr) GetBroadCastBetArr() []*BRSB_Bet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//用户下注数组
type BRSB_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*BRSB_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *BRSB_BetArr) Reset() {
	*x = BRSB_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_BetArr) ProtoMessage() {}

func (x *BRSB_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_BetArr.ProtoReflect.Descriptor instead.
func (*BRSB_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{5}
}

func (x *BRSB_BetArr) GetBetArr() []*BRSB_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type BRSB_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *BRSB_BetType `protobuf:"varint,1,req,name=BetType,enum=netproto.BRSB_BetType" json:"BetType,omitempty"`
	Score   *int64        `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`
}

func (x *BRSB_Bet) Reset() {
	*x = BRSB_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_Bet) ProtoMessage() {}

func (x *BRSB_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_Bet.ProtoReflect.Descriptor instead.
func (*BRSB_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{6}
}

func (x *BRSB_Bet) GetBetType() BRSB_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return BRSB_BetType_BRSB_Bet_Type_Dan
}

func (x *BRSB_Bet) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

//下注的结果
type BRSB_BetAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *BRSB_Bet_Ret `protobuf:"varint,1,req,name=Ret,enum=netproto.BRSB_Bet_Ret" json:"Ret,omitempty"`
	Score  *int64        `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`  //用户的钱，下注以后的金额。
	BetArr []*BRSB_Bet   `protobuf:"bytes,3,rep,name=BetArr" json:"BetArr,omitempty"` //用户下注数据
}

func (x *BRSB_BetAck) Reset() {
	*x = BRSB_BetAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_BetAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_BetAck) ProtoMessage() {}

func (x *BRSB_BetAck) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_BetAck.ProtoReflect.Descriptor instead.
func (*BRSB_BetAck) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{7}
}

func (x *BRSB_BetAck) GetRet() BRSB_Bet_Ret {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return BRSB_Bet_Ret_BRSB_Bet_SUCC
}

func (x *BRSB_BetAck) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *BRSB_BetAck) GetBetArr() []*BRSB_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//骰子结果
type BRSB_GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     []BRSB_BetType `protobuf:"varint,1,rep,name=Result,enum=netproto.BRSB_BetType" json:"Result,omitempty"` //骰子类型
	Dice       []int32        `protobuf:"varint,2,rep,name=Dice" json:"Dice,omitempty"`                                //骰子数据
	DicePoints *int32         `protobuf:"varint,3,req,name=DicePoints" json:"DicePoints,omitempty"`                    //骰子总点数
}

func (x *BRSB_GameResult) Reset() {
	*x = BRSB_GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_GameResult) ProtoMessage() {}

func (x *BRSB_GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_GameResult.ProtoReflect.Descriptor instead.
func (*BRSB_GameResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{8}
}

func (x *BRSB_GameResult) GetResult() []BRSB_BetType {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BRSB_GameResult) GetDice() []int32 {
	if x != nil {
		return x.Dice
	}
	return nil
}

func (x *BRSB_GameResult) GetDicePoints() int32 {
	if x != nil && x.DicePoints != nil {
		return *x.DicePoints
	}
	return 0
}

//游戏用户赢钱结果
type BRSB_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemWin *int64      `protobuf:"varint,1,req,name=SystemWin" json:"SystemWin,omitempty"`
	SelfWin   *int64      `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	BetRet    []*BRSB_Bet `protobuf:"bytes,3,rep,name=BetRet" json:"BetRet,omitempty"`
}

func (x *BRSB_GameResultUserMoney) Reset() {
	*x = BRSB_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_GameResultUserMoney) ProtoMessage() {}

func (x *BRSB_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*BRSB_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{9}
}

func (x *BRSB_GameResultUserMoney) GetSystemWin() int64 {
	if x != nil && x.SystemWin != nil {
		return *x.SystemWin
	}
	return 0
}

func (x *BRSB_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *BRSB_GameResultUserMoney) GetBetRet() []*BRSB_Bet {
	if x != nil {
		return x.BetRet
	}
	return nil
}

type BRSB_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *BRSB_BetType `protobuf:"varint,1,req,name=BetType,enum=netproto.BRSB_BetType" json:"BetType,omitempty"`
	Max     *int64        `protobuf:"varint,2,req,name=Max" json:"Max,omitempty"`
	Odd     *int32        `protobuf:"varint,3,req,name=Odd" json:"Odd,omitempty"`
}

func (x *BRSB_Range) Reset() {
	*x = BRSB_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_Range) ProtoMessage() {}

func (x *BRSB_Range) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_Range.ProtoReflect.Descriptor instead.
func (*BRSB_Range) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{10}
}

func (x *BRSB_Range) GetBetType() BRSB_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return BRSB_BetType_BRSB_Bet_Type_Dan
}

func (x *BRSB_Range) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *BRSB_Range) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

//前20次开出的牌
type BRSB_ResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*BRSB_GameResult `protobuf:"bytes,1,rep,name=Result" json:"Result,omitempty"`
}

func (x *BRSB_ResultList) Reset() {
	*x = BRSB_ResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_ResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_ResultList) ProtoMessage() {}

func (x *BRSB_ResultList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_ResultList.ProtoReflect.Descriptor instead.
func (*BRSB_ResultList) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{11}
}

func (x *BRSB_ResultList) GetResult() []*BRSB_GameResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type BRSB_Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        *BRSB_State               `protobuf:"bytes,1,req,name=State" json:"State,omitempty"`
	Settings     *BRSB_Setting             `protobuf:"bytes,2,req,name=Settings" json:"Settings,omitempty"`
	ResultList   *BRSB_ResultList          `protobuf:"bytes,3,opt,name=ResultList" json:"ResultList,omitempty"`
	UserBet      *BRSB_UserBetInfo         `protobuf:"bytes,4,opt,name=UserBet" json:"UserBet,omitempty"`
	TotalUserBet *BRSB_BroadCastBetArr     `protobuf:"bytes,5,opt,name=TotalUserBet" json:"TotalUserBet,omitempty"`
	GameResult   *BRSB_GameResult          `protobuf:"bytes,6,opt,name=GameResult" json:"GameResult,omitempty"`
	UserWinLose  *BRSB_GameResultUserMoney `protobuf:"bytes,7,opt,name=UserWinLose" json:"UserWinLose,omitempty"`
}

func (x *BRSB_Scene) Reset() {
	*x = BRSB_Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRSB_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRSB_Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRSB_Scene) ProtoMessage() {}

func (x *BRSB_Scene) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRSB_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRSB_Scene.ProtoReflect.Descriptor instead.
func (*BRSB_Scene) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRSB_proto_rawDescGZIP(), []int{12}
}

func (x *BRSB_Scene) GetState() *BRSB_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BRSB_Scene) GetSettings() *BRSB_Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *BRSB_Scene) GetResultList() *BRSB_ResultList {
	if x != nil {
		return x.ResultList
	}
	return nil
}

func (x *BRSB_Scene) GetUserBet() *BRSB_UserBetInfo {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *BRSB_Scene) GetTotalUserBet() *BRSB_BroadCastBetArr {
	if x != nil {
		return x.TotalUserBet
	}
	return nil
}

func (x *BRSB_Scene) GetGameResult() *BRSB_GameResult {
	if x != nil {
		return x.GameResult
	}
	return nil
}

func (x *BRSB_Scene) GetUserWinLose() *BRSB_GameResultUserMoney {
	if x != nil {
		return x.UserWinLose
	}
	return nil
}

var File_GameMsg_BRSB_proto protoreflect.FileDescriptor

var file_GameMsg_BRSB_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x52, 0x53, 0x42, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56,
	0x0a, 0x0c, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42,
	0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x22, 0x4b, 0x0a,
	0x0a, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x42, 0x52,
	0x53, 0x42, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x14, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x52,
	0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72,
	0x22, 0x39, 0x0a, 0x0b, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12,
	0x2a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f,
	0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x52, 0x0a, 0x08, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x79, 0x0a, 0x0b, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x28,
	0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f,
	0x52, 0x65, 0x74, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42,
	0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x75, 0x0a, 0x0f, 0x42, 0x52,
	0x53, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x44, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x7e, 0x0a, 0x18, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65,
	0x6c, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x74, 0x22, 0x62, 0x0a, 0x0a, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42,
	0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03,
	0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x64, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x4f, 0x64, 0x64, 0x22, 0x44, 0x0a, 0x0f, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa2, 0x03, 0x0a, 0x0a,
	0x42, 0x52, 0x53, 0x42, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53,
	0x42, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x53, 0x42, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65,
	0x2a, 0x9b, 0x01, 0x0a, 0x09, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x52, 0x53, 0x42, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x52, 0x53, 0x42, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x53, 0x42, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x52, 0x53, 0x42, 0x42, 0x65, 0x74, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x53, 0x42, 0x45, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x53, 0x42, 0x4b, 0x61, 0x69, 0x4a, 0x69, 0x61, 0x6e,
	0x67, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x4b, 0x61, 0x69, 0x4a, 0x69,
	0x61, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x52, 0x53, 0x42, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x2a, 0x9b,
	0x01, 0x0a, 0x0c, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x74, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x15, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x4e,
	0x6f, 0x74, 0x6e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42,
	0x65, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xfe, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x19, 0x0a, 0x0c, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42,
	0x65, 0x74, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x19, 0x0a, 0x0c, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x4d, 0x69,
	0x6e, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xfc, 0x05, 0x0a,
	0x0c, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x61, 0x6e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x61, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x69, 0x61, 0x6f, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68,
	0x75, 0x34, 0x10, 0x68, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x35, 0x10, 0x69, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68,
	0x75, 0x36, 0x10, 0x6a, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x37, 0x10, 0x6b, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68,
	0x75, 0x38, 0x10, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x39, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68,
	0x75, 0x31, 0x30, 0x10, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65,
	0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x31, 0x31, 0x10, 0x6f, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x68, 0x75, 0x31, 0x32, 0x10, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x53, 0x42, 0x5f,
	0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x31, 0x33, 0x10, 0x71,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x68, 0x75, 0x31, 0x34, 0x10, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x53,
	0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x31, 0x35,
	0x10, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75, 0x31, 0x36, 0x10, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x75,
	0x31, 0x37, 0x10, 0x75, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6f, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6f,
	0x31, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6f, 0x32, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6f,
	0x33, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6f, 0x34, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6f,
	0x35, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6f, 0x36, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x11, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6d, 0x31,
	0x10, 0xe9, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6d, 0x32, 0x10, 0xea, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6d, 0x33,
	0x10, 0xeb, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6d, 0x34, 0x10, 0xec, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x42,
	0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6d, 0x35,
	0x10, 0xed, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x52, 0x53, 0x42, 0x5f, 0x42, 0x65, 0x74, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6d, 0x36, 0x10, 0xee, 0x07, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_BRSB_proto_rawDescOnce sync.Once
	file_GameMsg_BRSB_proto_rawDescData = file_GameMsg_BRSB_proto_rawDesc
)

func file_GameMsg_BRSB_proto_rawDescGZIP() []byte {
	file_GameMsg_BRSB_proto_rawDescOnce.Do(func() {
		file_GameMsg_BRSB_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_BRSB_proto_rawDescData)
	})
	return file_GameMsg_BRSB_proto_rawDescData
}

var file_GameMsg_BRSB_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_GameMsg_BRSB_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_GameMsg_BRSB_proto_goTypes = []interface{}{
	(BRSB_Flow)(0),                   // 0: netproto.BRSB_Flow
	(BRSB_Bet_Ret)(0),                // 1: netproto.BRSB_Bet_Ret
	(BRSB_BetType)(0),                // 2: netproto.BRSB_BetType
	(*BRSB_Setting)(nil),             // 3: netproto.BRSB_Setting
	(*BRSB_GameNo)(nil),              // 4: netproto.BRSB_GameNo
	(*BRSB_State)(nil),               // 5: netproto.BRSB_State
	(*BRSB_UserBetInfo)(nil),         // 6: netproto.BRSB_UserBetInfo
	(*BRSB_BroadCastBetArr)(nil),     // 7: netproto.BRSB_BroadCastBetArr
	(*BRSB_BetArr)(nil),              // 8: netproto.BRSB_BetArr
	(*BRSB_Bet)(nil),                 // 9: netproto.BRSB_Bet
	(*BRSB_BetAck)(nil),              // 10: netproto.BRSB_BetAck
	(*BRSB_GameResult)(nil),          // 11: netproto.BRSB_GameResult
	(*BRSB_GameResultUserMoney)(nil), // 12: netproto.BRSB_GameResultUserMoney
	(*BRSB_Range)(nil),               // 13: netproto.BRSB_Range
	(*BRSB_ResultList)(nil),          // 14: netproto.BRSB_ResultList
	(*BRSB_Scene)(nil),               // 15: netproto.BRSB_Scene
}
var file_GameMsg_BRSB_proto_depIdxs = []int32{
	13, // 0: netproto.BRSB_Setting.BetRange:type_name -> netproto.BRSB_Range
	0,  // 1: netproto.BRSB_State.State:type_name -> netproto.BRSB_Flow
	9,  // 2: netproto.BRSB_UserBetInfo.BetInfo:type_name -> netproto.BRSB_Bet
	9,  // 3: netproto.BRSB_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.BRSB_Bet
	9,  // 4: netproto.BRSB_BetArr.BetArr:type_name -> netproto.BRSB_Bet
	2,  // 5: netproto.BRSB_Bet.BetType:type_name -> netproto.BRSB_BetType
	1,  // 6: netproto.BRSB_BetAck.Ret:type_name -> netproto.BRSB_Bet_Ret
	9,  // 7: netproto.BRSB_BetAck.BetArr:type_name -> netproto.BRSB_Bet
	2,  // 8: netproto.BRSB_GameResult.Result:type_name -> netproto.BRSB_BetType
	9,  // 9: netproto.BRSB_GameResultUserMoney.BetRet:type_name -> netproto.BRSB_Bet
	2,  // 10: netproto.BRSB_Range.BetType:type_name -> netproto.BRSB_BetType
	11, // 11: netproto.BRSB_ResultList.Result:type_name -> netproto.BRSB_GameResult
	5,  // 12: netproto.BRSB_Scene.State:type_name -> netproto.BRSB_State
	3,  // 13: netproto.BRSB_Scene.Settings:type_name -> netproto.BRSB_Setting
	14, // 14: netproto.BRSB_Scene.ResultList:type_name -> netproto.BRSB_ResultList
	6,  // 15: netproto.BRSB_Scene.UserBet:type_name -> netproto.BRSB_UserBetInfo
	7,  // 16: netproto.BRSB_Scene.TotalUserBet:type_name -> netproto.BRSB_BroadCastBetArr
	11, // 17: netproto.BRSB_Scene.GameResult:type_name -> netproto.BRSB_GameResult
	12, // 18: netproto.BRSB_Scene.UserWinLose:type_name -> netproto.BRSB_GameResultUserMoney
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_GameMsg_BRSB_proto_init() }
func file_GameMsg_BRSB_proto_init() {
	if File_GameMsg_BRSB_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_BRSB_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_GameNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_BetAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_ResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRSB_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRSB_Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_BRSB_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_BRSB_proto_goTypes,
		DependencyIndexes: file_GameMsg_BRSB_proto_depIdxs,
		EnumInfos:         file_GameMsg_BRSB_proto_enumTypes,
		MessageInfos:      file_GameMsg_BRSB_proto_msgTypes,
	}.Build()
	File_GameMsg_BRSB_proto = out.File
	file_GameMsg_BRSB_proto_rawDesc = nil
	file_GameMsg_BRSB_proto_goTypes = nil
	file_GameMsg_BRSB_proto_depIdxs = nil
}
