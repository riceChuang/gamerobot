// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: GameMsg_ZJH.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ZJH_GameStatus int32

const (
	ZJH_GameStatus_ZJHGaming    ZJH_GameStatus = 1 //遊玩中
	ZJH_GameStatus_ZJHSettled   ZJH_GameStatus = 2 //已結算
	ZJH_GameStatus_ZJHBetting   ZJH_GameStatus = 3 //下注中
	ZJH_GameStatus_ZJHComparing ZJH_GameStatus = 4 //比牌中
	ZJH_GameStatus_ZJHAllIn     ZJH_GameStatus = 5 //全壓狀態中
	ZJH_GameStatus_ZJHWaiting   ZJH_GameStatus = 6 //遊戲等待中(尚未開始)
)

// Enum value maps for ZJH_GameStatus.
var (
	ZJH_GameStatus_name = map[int32]string{
		1: "ZJHGaming",
		2: "ZJHSettled",
		3: "ZJHBetting",
		4: "ZJHComparing",
		5: "ZJHAllIn",
		6: "ZJHWaiting",
	}
	ZJH_GameStatus_value = map[string]int32{
		"ZJHGaming":    1,
		"ZJHSettled":   2,
		"ZJHBetting":   3,
		"ZJHComparing": 4,
		"ZJHAllIn":     5,
		"ZJHWaiting":   6,
	}
)

func (x ZJH_GameStatus) Enum() *ZJH_GameStatus {
	p := new(ZJH_GameStatus)
	*p = x
	return p
}

func (x ZJH_GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZJH_GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_ZJH_proto_enumTypes[0].Descriptor()
}

func (ZJH_GameStatus) Type() protoreflect.EnumType {
	return &file_GameMsg_ZJH_proto_enumTypes[0]
}

func (x ZJH_GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ZJH_GameStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ZJH_GameStatus(num)
	return nil
}

// Deprecated: Use ZJH_GameStatus.Descriptor instead.
func (ZJH_GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{0}
}

type ZJH_UserAction int32

const (
	ZJH_UserAction_ZJHNoAction    ZJH_UserAction = 1 //無動作
	ZJH_UserAction_ZJHCall        ZJH_UserAction = 2 //跟注
	ZJH_UserAction_ZJHRaise       ZJH_UserAction = 3 //加注
	ZJH_UserAction_ZJHCompare     ZJH_UserAction = 4 //比牌
	ZJH_UserAction_ZJHCompareLose ZJH_UserAction = 5 //比牌失敗
	ZJH_UserAction_ZJHDrop        ZJH_UserAction = 6 //棄牌
	ZJH_UserAction_ZJHSeen        ZJH_UserAction = 7 //看牌
	ZJH_UserAction_ZJHAllin       ZJH_UserAction = 8 //全壓下注
)

// Enum value maps for ZJH_UserAction.
var (
	ZJH_UserAction_name = map[int32]string{
		1: "ZJHNoAction",
		2: "ZJHCall",
		3: "ZJHRaise",
		4: "ZJHCompare",
		5: "ZJHCompareLose",
		6: "ZJHDrop",
		7: "ZJHSeen",
		8: "ZJHAllin",
	}
	ZJH_UserAction_value = map[string]int32{
		"ZJHNoAction":    1,
		"ZJHCall":        2,
		"ZJHRaise":       3,
		"ZJHCompare":     4,
		"ZJHCompareLose": 5,
		"ZJHDrop":        6,
		"ZJHSeen":        7,
		"ZJHAllin":       8,
	}
)

func (x ZJH_UserAction) Enum() *ZJH_UserAction {
	p := new(ZJH_UserAction)
	*p = x
	return p
}

func (x ZJH_UserAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZJH_UserAction) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_ZJH_proto_enumTypes[1].Descriptor()
}

func (ZJH_UserAction) Type() protoreflect.EnumType {
	return &file_GameMsg_ZJH_proto_enumTypes[1]
}

func (x ZJH_UserAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ZJH_UserAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ZJH_UserAction(num)
	return nil
}

// Deprecated: Use ZJH_UserAction.Descriptor instead.
func (ZJH_UserAction) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{1}
}

type ZJH_ErrorCode int32

const (
	ZJH_ErrorCode_ZJHServerError          ZJH_ErrorCode = 20000
	ZJH_ErrorCode_ZJHCallError            ZJH_ErrorCode = 20001
	ZJH_ErrorCode_ZJHRaiseError           ZJH_ErrorCode = 20002
	ZJH_ErrorCode_ZJHCompareError         ZJH_ErrorCode = 20003
	ZJH_ErrorCode_ZJHDropError            ZJH_ErrorCode = 20004
	ZJH_ErrorCode_ZJHCheckError           ZJH_ErrorCode = 20005
	ZJH_ErrorCode_ZJHAllinError           ZJH_ErrorCode = 20006
	ZJH_ErrorCode_ZJHProtectOverTimeError ZJH_ErrorCode = 20007
	ZJH_ErrorCode_ZJHEarlyChangeError     ZJH_ErrorCode = 20008
)

// Enum value maps for ZJH_ErrorCode.
var (
	ZJH_ErrorCode_name = map[int32]string{
		20000: "ZJHServerError",
		20001: "ZJHCallError",
		20002: "ZJHRaiseError",
		20003: "ZJHCompareError",
		20004: "ZJHDropError",
		20005: "ZJHCheckError",
		20006: "ZJHAllinError",
		20007: "ZJHProtectOverTimeError",
		20008: "ZJHEarlyChangeError",
	}
	ZJH_ErrorCode_value = map[string]int32{
		"ZJHServerError":          20000,
		"ZJHCallError":            20001,
		"ZJHRaiseError":           20002,
		"ZJHCompareError":         20003,
		"ZJHDropError":            20004,
		"ZJHCheckError":           20005,
		"ZJHAllinError":           20006,
		"ZJHProtectOverTimeError": 20007,
		"ZJHEarlyChangeError":     20008,
	}
)

func (x ZJH_ErrorCode) Enum() *ZJH_ErrorCode {
	p := new(ZJH_ErrorCode)
	*p = x
	return p
}

func (x ZJH_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZJH_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_ZJH_proto_enumTypes[2].Descriptor()
}

func (ZJH_ErrorCode) Type() protoreflect.EnumType {
	return &file_GameMsg_ZJH_proto_enumTypes[2]
}

func (x ZJH_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ZJH_ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ZJH_ErrorCode(num)
	return nil
}

// Deprecated: Use ZJH_ErrorCode.Descriptor instead.
func (ZJH_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{2}
}

type ZJH_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"` //遊戲局號
}

func (x *ZJH_GameNoInfo) Reset() {
	*x = ZJH_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_GameNoInfo) ProtoMessage() {}

func (x *ZJH_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_GameNoInfo.ProtoReflect.Descriptor instead.
func (*ZJH_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{0}
}

func (x *ZJH_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

type ZJH_BetBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetBase  *int32 `protobuf:"varint,1,req,name=BetBase" json:"BetBase,omitempty"`   //底注
	BetCount *int32 `protobuf:"varint,2,req,name=BetCount" json:"BetCount,omitempty"` //用户人数统计
}

func (x *ZJH_BetBase) Reset() {
	*x = ZJH_BetBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_BetBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_BetBase) ProtoMessage() {}

func (x *ZJH_BetBase) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_BetBase.ProtoReflect.Descriptor instead.
func (*ZJH_BetBase) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{1}
}

func (x *ZJH_BetBase) GetBetBase() int32 {
	if x != nil && x.BetBase != nil {
		return *x.BetBase
	}
	return 0
}

func (x *ZJH_BetBase) GetBetCount() int32 {
	if x != nil && x.BetCount != nil {
		return *x.BetCount
	}
	return 0
}

//Sclass: FaPaiId
type ZJH_FaiPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo  *int32  `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`   //庄家座位号
	IsFirst *bool   `protobuf:"varint,2,req,name=IsFirst" json:"IsFirst,omitempty"` //是否第一局
	BetArr  []int32 `protobuf:"varint,3,rep,name=BetArr" json:"BetArr,omitempty"`   //下注選項
}

func (x *ZJH_FaiPai) Reset() {
	*x = ZJH_FaiPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_FaiPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_FaiPai) ProtoMessage() {}

func (x *ZJH_FaiPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_FaiPai.ProtoReflect.Descriptor instead.
func (*ZJH_FaiPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{2}
}

func (x *ZJH_FaiPai) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *ZJH_FaiPai) GetIsFirst() bool {
	if x != nil && x.IsFirst != nil {
		return *x.IsFirst
	}
	return false
}

func (x *ZJH_FaiPai) GetBetArr() []int32 {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//Sclass: WaitOptID
type ZJH_WaitOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Check            *bool   `protobuf:"varint,1,req,name=Check" json:"Check,omitempty"`                        //是否看牌
	Drop             *bool   `protobuf:"varint,2,req,name=Drop" json:"Drop,omitempty"`                          //是否棄牌
	Compare          *bool   `protobuf:"varint,3,req,name=Compare" json:"Compare,omitempty"`                    //是否能比牌
	Call             *bool   `protobuf:"varint,4,req,name=Call" json:"Call,omitempty"`                          //是否能跟牌
	Raise            *bool   `protobuf:"varint,5,req,name=Raise" json:"Raise,omitempty"`                        //是否能加注
	Allin            *bool   `protobuf:"varint,6,req,name=Allin" json:"Allin,omitempty"`                        //是否能全押
	ProtectOverTime  *bool   `protobuf:"varint,7,req,name=ProtectOverTime" json:"ProtectOverTime,omitempty"`    //是否能防超時
	First            *bool   `protobuf:"varint,8,req,name=First" json:"First,omitempty"`                        //是否是第一个操作的玩家
	OptTime          *int32  `protobuf:"varint,9,req,name=OptTime" json:"OptTime,omitempty"`                    //可操作时间
	RaiseOption      []int32 `protobuf:"varint,10,rep,name=RaiseOption" json:"RaiseOption,omitempty"`           //可加注選項
	BetValue         *int32  `protobuf:"varint,11,req,name=BetValue" json:"BetValue,omitempty"`                 //玩家基礎下注(跟注,比牌,全壓)
	CompareUserSeats []int32 `protobuf:"varint,12,rep,name=CompareUserSeats" json:"CompareUserSeats,omitempty"` //可比牌玩家
}

func (x *ZJH_WaitOpt) Reset() {
	*x = ZJH_WaitOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_WaitOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_WaitOpt) ProtoMessage() {}

func (x *ZJH_WaitOpt) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_WaitOpt.ProtoReflect.Descriptor instead.
func (*ZJH_WaitOpt) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{3}
}

func (x *ZJH_WaitOpt) GetCheck() bool {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return false
}

func (x *ZJH_WaitOpt) GetDrop() bool {
	if x != nil && x.Drop != nil {
		return *x.Drop
	}
	return false
}

func (x *ZJH_WaitOpt) GetCompare() bool {
	if x != nil && x.Compare != nil {
		return *x.Compare
	}
	return false
}

func (x *ZJH_WaitOpt) GetCall() bool {
	if x != nil && x.Call != nil {
		return *x.Call
	}
	return false
}

func (x *ZJH_WaitOpt) GetRaise() bool {
	if x != nil && x.Raise != nil {
		return *x.Raise
	}
	return false
}

func (x *ZJH_WaitOpt) GetAllin() bool {
	if x != nil && x.Allin != nil {
		return *x.Allin
	}
	return false
}

func (x *ZJH_WaitOpt) GetProtectOverTime() bool {
	if x != nil && x.ProtectOverTime != nil {
		return *x.ProtectOverTime
	}
	return false
}

func (x *ZJH_WaitOpt) GetFirst() bool {
	if x != nil && x.First != nil {
		return *x.First
	}
	return false
}

func (x *ZJH_WaitOpt) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

func (x *ZJH_WaitOpt) GetRaiseOption() []int32 {
	if x != nil {
		return x.RaiseOption
	}
	return nil
}

func (x *ZJH_WaitOpt) GetBetValue() int32 {
	if x != nil && x.BetValue != nil {
		return *x.BetValue
	}
	return 0
}

func (x *ZJH_WaitOpt) GetCompareUserSeats() []int32 {
	if x != nil {
		return x.CompareUserSeats
	}
	return nil
}

//Sclass: CurrOptID
type ZJH_WaitOptSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seatno  *int32 `protobuf:"varint,1,req,name=Seatno" json:"Seatno,omitempty"`   //当前操作的座位号
	OptTime *int32 `protobuf:"varint,2,req,name=OptTime" json:"OptTime,omitempty"` //可操作时间
}

func (x *ZJH_WaitOptSeat) Reset() {
	*x = ZJH_WaitOptSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_WaitOptSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_WaitOptSeat) ProtoMessage() {}

func (x *ZJH_WaitOptSeat) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_WaitOptSeat.ProtoReflect.Descriptor instead.
func (*ZJH_WaitOptSeat) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{4}
}

func (x *ZJH_WaitOptSeat) GetSeatno() int32 {
	if x != nil && x.Seatno != nil {
		return *x.Seatno
	}
	return 0
}

func (x *ZJH_WaitOptSeat) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

type ZJH_Currturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currturn *int32 `protobuf:"varint,1,req,name=Currturn" json:"Currturn,omitempty"` //第幾輪
}

func (x *ZJH_Currturn) Reset() {
	*x = ZJH_Currturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_Currturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_Currturn) ProtoMessage() {}

func (x *ZJH_Currturn) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_Currturn.ProtoReflect.Descriptor instead.
func (*ZJH_Currturn) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{5}
}

func (x *ZJH_Currturn) GetCurrturn() int32 {
	if x != nil && x.Currturn != nil {
		return *x.Currturn
	}
	return 0
}

//Sclass: GameResultID
type ZJH_GameRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ZJH_GameEndUserInfo `protobuf:"bytes,1,rep,name=Result" json:"Result,omitempty"` //遊戲結束輸贏結果
}

func (x *ZJH_GameRet) Reset() {
	*x = ZJH_GameRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_GameRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_GameRet) ProtoMessage() {}

func (x *ZJH_GameRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_GameRet.ProtoReflect.Descriptor instead.
func (*ZJH_GameRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{6}
}

func (x *ZJH_GameRet) GetResult() []*ZJH_GameEndUserInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

//當所有人都跟全押時, 輪到主動全押玩家就進入結算
//ComparePokerID
type ZJH_EndUserPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherPoker []*ZJH_Poker `protobuf:"bytes,1,rep,name=OtherPoker" json:"OtherPoker,omitempty"`
}

func (x *ZJH_EndUserPoker) Reset() {
	*x = ZJH_EndUserPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_EndUserPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_EndUserPoker) ProtoMessage() {}

func (x *ZJH_EndUserPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_EndUserPoker.ProtoReflect.Descriptor instead.
func (*ZJH_EndUserPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{7}
}

func (x *ZJH_EndUserPoker) GetOtherPoker() []*ZJH_Poker {
	if x != nil {
		return x.OtherPoker
	}
	return nil
}

//Slass: UserCardType
type ZJH_Poker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PokerType      *int32     `protobuf:"varint,1,req,name=PokerType" json:"PokerType,omitempty"`
	UserPokerGroup *UserPoker `protobuf:"bytes,2,req,name=UserPokerGroup" json:"UserPokerGroup,omitempty"`
}

func (x *ZJH_Poker) Reset() {
	*x = ZJH_Poker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_Poker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_Poker) ProtoMessage() {}

func (x *ZJH_Poker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_Poker.ProtoReflect.Descriptor instead.
func (*ZJH_Poker) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{8}
}

func (x *ZJH_Poker) GetPokerType() int32 {
	if x != nil && x.PokerType != nil {
		return *x.PokerType
	}
	return 0
}

func (x *ZJH_Poker) GetUserPokerGroup() *UserPoker {
	if x != nil {
		return x.UserPokerGroup
	}
	return nil
}

//Sclass: CheckCards, DropCards
type ZJH_SeatNO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
}

func (x *ZJH_SeatNO) Reset() {
	*x = ZJH_SeatNO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_SeatNO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_SeatNO) ProtoMessage() {}

func (x *ZJH_SeatNO) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_SeatNO.ProtoReflect.Descriptor instead.
func (*ZJH_SeatNO) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{9}
}

func (x *ZJH_SeatNO) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

type ZJH_Compare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`
	Bet    *int32 `protobuf:"varint,2,req,name=Bet" json:"Bet,omitempty"`
}

func (x *ZJH_Compare) Reset() {
	*x = ZJH_Compare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_Compare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_Compare) ProtoMessage() {}

func (x *ZJH_Compare) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_Compare.ProtoReflect.Descriptor instead.
func (*ZJH_Compare) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{10}
}

func (x *ZJH_Compare) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *ZJH_Compare) GetBet() int32 {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return 0
}

//Sclass: CompareRetID
type ZJH_CompareCardsRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *int32 `protobuf:"varint,1,req,name=Result" json:"Result,omitempty"`             //比牌結果, 1:發起座位贏,2:被發起座位贏
	InitSeatNo   *int32 `protobuf:"varint,2,req,name=InitSeatNo" json:"InitSeatNo,omitempty"`     //贏者座位
	TargetSeatNo *int32 `protobuf:"varint,3,req,name=TargetSeatNo" json:"TargetSeatNo,omitempty"` //輸者座位
	Bet          *int32 `protobuf:"varint,4,req,name=Bet" json:"Bet,omitempty"`                   //当前的下注额
	Odd          *int32 `protobuf:"varint,5,req,name=Odd" json:"Odd,omitempty"`                   //倍率
}

func (x *ZJH_CompareCardsRet) Reset() {
	*x = ZJH_CompareCardsRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_CompareCardsRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_CompareCardsRet) ProtoMessage() {}

func (x *ZJH_CompareCardsRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_CompareCardsRet.ProtoReflect.Descriptor instead.
func (*ZJH_CompareCardsRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{11}
}

func (x *ZJH_CompareCardsRet) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *ZJH_CompareCardsRet) GetInitSeatNo() int32 {
	if x != nil && x.InitSeatNo != nil {
		return *x.InitSeatNo
	}
	return 0
}

func (x *ZJH_CompareCardsRet) GetTargetSeatNo() int32 {
	if x != nil && x.TargetSeatNo != nil {
		return *x.TargetSeatNo
	}
	return 0
}

func (x *ZJH_CompareCardsRet) GetBet() int32 {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return 0
}

func (x *ZJH_CompareCardsRet) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

//Sclass: DropBroadCastID
type ZJH_UserDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *int32 `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"` //哪個玩家
}

func (x *ZJH_UserDrop) Reset() {
	*x = ZJH_UserDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_UserDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_UserDrop) ProtoMessage() {}

func (x *ZJH_UserDrop) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_UserDrop.ProtoReflect.Descriptor instead.
func (*ZJH_UserDrop) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{12}
}

func (x *ZJH_UserDrop) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

//加注,跟注, 孤注一直 (CallID, RaiseID, AllinID)
type ZJH_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet *int32 `protobuf:"varint,1,req,name=Bet" json:"Bet,omitempty"` //下注金額
}

func (x *ZJH_Bet) Reset() {
	*x = ZJH_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_Bet) ProtoMessage() {}

func (x *ZJH_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_Bet.ProtoReflect.Descriptor instead.
func (*ZJH_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{13}
}

func (x *ZJH_Bet) GetBet() int32 {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return 0
}

//Sclass: CallBroadCastID , Raise, Allin
type ZJH_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"` //哪個玩家
	Bet    *int32 `protobuf:"varint,2,req,name=Bet" json:"Bet,omitempty"`       //当前的下注额
	Odd    *int32 `protobuf:"varint,3,req,name=Odd" json:"Odd,omitempty"`       //倍率
}

func (x *ZJH_BetRet) Reset() {
	*x = ZJH_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_BetRet) ProtoMessage() {}

func (x *ZJH_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_BetRet.ProtoReflect.Descriptor instead.
func (*ZJH_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{14}
}

func (x *ZJH_BetRet) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *ZJH_BetRet) GetBet() int32 {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return 0
}

func (x *ZJH_BetRet) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

//Sclass: ProtectOverTimeRetID
type ZJH_ProtectOverTimeRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen *bool `protobuf:"varint,1,req,name=IsOpen" json:"IsOpen,omitempty"` //開啟或關閉
}

func (x *ZJH_ProtectOverTimeRet) Reset() {
	*x = ZJH_ProtectOverTimeRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_ProtectOverTimeRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_ProtectOverTimeRet) ProtoMessage() {}

func (x *ZJH_ProtectOverTimeRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_ProtectOverTimeRet.ProtoReflect.Descriptor instead.
func (*ZJH_ProtectOverTimeRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{15}
}

func (x *ZJH_ProtectOverTimeRet) GetIsOpen() bool {
	if x != nil && x.IsOpen != nil {
		return *x.IsOpen
	}
	return false
}

//Sclass: FollowEndRetID
type ZJH_FollowEndRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen *bool `protobuf:"varint,1,req,name=IsOpen" json:"IsOpen,omitempty"` //開啟或關閉
}

func (x *ZJH_FollowEndRet) Reset() {
	*x = ZJH_FollowEndRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_FollowEndRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_FollowEndRet) ProtoMessage() {}

func (x *ZJH_FollowEndRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_FollowEndRet.ProtoReflect.Descriptor instead.
func (*ZJH_FollowEndRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{16}
}

func (x *ZJH_FollowEndRet) GetIsOpen() bool {
	if x != nil && x.IsOpen != nil {
		return *x.IsOpen
	}
	return false
}

type ZJH_GameEndUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`                 //玩家id
	SeatNo         *int32 `protobuf:"varint,2,req,name=SeatNo" json:"SeatNo,omitempty"`                 //玩家座位
	IsWinner       *bool  `protobuf:"varint,3,req,name=IsWinner" json:"IsWinner,omitempty"`             //是否是贏家
	WinLose        *int64 `protobuf:"varint,4,req,name=WinLose" json:"WinLose,omitempty"`               //玩家此局輸贏金額
	UserBet        *int64 `protobuf:"varint,5,req,name=UserBet" json:"UserBet,omitempty"`               //玩家此局總下注額
	IsBaoZiJackpot *bool  `protobuf:"varint,6,req,name=IsBaoZiJackpot" json:"IsBaoZiJackpot,omitempty"` //是否有豹子獎金
	Jackpot        *int64 `protobuf:"varint,7,opt,name=Jackpot" json:"Jackpot,omitempty"`               //獲得喜錢金額
}

func (x *ZJH_GameEndUserInfo) Reset() {
	*x = ZJH_GameEndUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_GameEndUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_GameEndUserInfo) ProtoMessage() {}

func (x *ZJH_GameEndUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_GameEndUserInfo.ProtoReflect.Descriptor instead.
func (*ZJH_GameEndUserInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{17}
}

func (x *ZJH_GameEndUserInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *ZJH_GameEndUserInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *ZJH_GameEndUserInfo) GetIsWinner() bool {
	if x != nil && x.IsWinner != nil {
		return *x.IsWinner
	}
	return false
}

func (x *ZJH_GameEndUserInfo) GetWinLose() int64 {
	if x != nil && x.WinLose != nil {
		return *x.WinLose
	}
	return 0
}

func (x *ZJH_GameEndUserInfo) GetUserBet() int64 {
	if x != nil && x.UserBet != nil {
		return *x.UserBet
	}
	return 0
}

func (x *ZJH_GameEndUserInfo) GetIsBaoZiJackpot() bool {
	if x != nil && x.IsBaoZiJackpot != nil {
		return *x.IsBaoZiJackpot
	}
	return false
}

func (x *ZJH_GameEndUserInfo) GetJackpot() int64 {
	if x != nil && x.Jackpot != nil {
		return *x.Jackpot
	}
	return 0
}

type ZJH_GameScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStatus            *ZJH_GameStatus `protobuf:"varint,1,req,name=GameStatus,enum=netproto.ZJH_GameStatus" json:"GameStatus,omitempty"` //遊戲當前狀態
	CurrOptSeatNo         *int32          `protobuf:"varint,2,req,name=CurrOptSeatNo" json:"CurrOptSeatNo,omitempty"`                        //当前操作的座位号
	OptTime               *int32          `protobuf:"varint,3,req,name=OptTime" json:"OptTime,omitempty"`                                    //剩餘操作時間
	OptTimeTotal          *int32          `protobuf:"varint,4,req,name=OptTimeTotal" json:"OptTimeTotal,omitempty"`                          //總操作時間
	ZhuangSeatNO          *int32          `protobuf:"varint,5,req,name=ZhuangSeatNO" json:"ZhuangSeatNO,omitempty"`                          //庄家座位号
	BetTotal              *int64          `protobuf:"varint,6,req,name=BetTotal" json:"BetTotal,omitempty"`                                  //当前下注总额
	Currturn              *int32          `protobuf:"varint,7,req,name=Currturn" json:"Currturn,omitempty"`                                  //第幾輪
	ProtectOverTimeEnable *bool           `protobuf:"varint,8,req,name=ProtectOverTimeEnable" json:"ProtectOverTimeEnable,omitempty"`        //是否使用防超時
	FollowEndEnable       *bool           `protobuf:"varint,9,req,name=FollowEndEnable" json:"FollowEndEnable,omitempty"`                    //是否能防超時
	BetArr                []int32         `protobuf:"varint,10,rep,name=BetArr" json:"BetArr,omitempty"`                                     //下注選項
	UserInfo              []*ZJH_UserInfo `protobuf:"bytes,11,rep,name=UserInfo" json:"UserInfo,omitempty"`                                  //玩家資訊
	WaitOpt               *ZJH_WaitOpt    `protobuf:"bytes,12,opt,name=WaitOpt" json:"WaitOpt,omitempty"`                                    //若為當前操作玩家,可操作項目
	GameRet               *ZJH_GameRet    `protobuf:"bytes,13,opt,name=GameRet" json:"GameRet,omitempty"`                                    //遊戲結果
}

func (x *ZJH_GameScene) Reset() {
	*x = ZJH_GameScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_GameScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_GameScene) ProtoMessage() {}

func (x *ZJH_GameScene) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_GameScene.ProtoReflect.Descriptor instead.
func (*ZJH_GameScene) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{18}
}

func (x *ZJH_GameScene) GetGameStatus() ZJH_GameStatus {
	if x != nil && x.GameStatus != nil {
		return *x.GameStatus
	}
	return ZJH_GameStatus_ZJHGaming
}

func (x *ZJH_GameScene) GetCurrOptSeatNo() int32 {
	if x != nil && x.CurrOptSeatNo != nil {
		return *x.CurrOptSeatNo
	}
	return 0
}

func (x *ZJH_GameScene) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

func (x *ZJH_GameScene) GetOptTimeTotal() int32 {
	if x != nil && x.OptTimeTotal != nil {
		return *x.OptTimeTotal
	}
	return 0
}

func (x *ZJH_GameScene) GetZhuangSeatNO() int32 {
	if x != nil && x.ZhuangSeatNO != nil {
		return *x.ZhuangSeatNO
	}
	return 0
}

func (x *ZJH_GameScene) GetBetTotal() int64 {
	if x != nil && x.BetTotal != nil {
		return *x.BetTotal
	}
	return 0
}

func (x *ZJH_GameScene) GetCurrturn() int32 {
	if x != nil && x.Currturn != nil {
		return *x.Currturn
	}
	return 0
}

func (x *ZJH_GameScene) GetProtectOverTimeEnable() bool {
	if x != nil && x.ProtectOverTimeEnable != nil {
		return *x.ProtectOverTimeEnable
	}
	return false
}

func (x *ZJH_GameScene) GetFollowEndEnable() bool {
	if x != nil && x.FollowEndEnable != nil {
		return *x.FollowEndEnable
	}
	return false
}

func (x *ZJH_GameScene) GetBetArr() []int32 {
	if x != nil {
		return x.BetArr
	}
	return nil
}

func (x *ZJH_GameScene) GetUserInfo() []*ZJH_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ZJH_GameScene) GetWaitOpt() *ZJH_WaitOpt {
	if x != nil {
		return x.WaitOpt
	}
	return nil
}

func (x *ZJH_GameScene) GetGameRet() *ZJH_GameRet {
	if x != nil {
		return x.GameRet
	}
	return nil
}

type ZJH_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo     *int32            `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`                                      //座位
	BetMoney   []*ZJH_BetHistory `protobuf:"bytes,2,rep,name=BetMoney" json:"BetMoney,omitempty"`                                   //下注的金額
	Check      *bool             `protobuf:"varint,3,req,name=Check" json:"Check,omitempty"`                                        //是否看牌
	LastAction *ZJH_UserAction   `protobuf:"varint,6,req,name=LastAction,enum=netproto.ZJH_UserAction" json:"LastAction,omitempty"` //是否弃牌
	UserPoker  *ZJH_Poker        `protobuf:"bytes,7,opt,name=UserPoker" json:"UserPoker,omitempty"`                                 //是否比牌失败
}

func (x *ZJH_UserInfo) Reset() {
	*x = ZJH_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_UserInfo) ProtoMessage() {}

func (x *ZJH_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_UserInfo.ProtoReflect.Descriptor instead.
func (*ZJH_UserInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{19}
}

func (x *ZJH_UserInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *ZJH_UserInfo) GetBetMoney() []*ZJH_BetHistory {
	if x != nil {
		return x.BetMoney
	}
	return nil
}

func (x *ZJH_UserInfo) GetCheck() bool {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return false
}

func (x *ZJH_UserInfo) GetLastAction() ZJH_UserAction {
	if x != nil && x.LastAction != nil {
		return *x.LastAction
	}
	return ZJH_UserAction_ZJHNoAction
}

func (x *ZJH_UserInfo) GetUserPoker() *ZJH_Poker {
	if x != nil {
		return x.UserPoker
	}
	return nil
}

//玩家的下注歷史紀錄
type ZJH_BetHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet *int32 `protobuf:"varint,1,req,name=Bet" json:"Bet,omitempty"` //下注額
	Odd *int32 `protobuf:"varint,2,req,name=Odd" json:"Odd,omitempty"` //倍率
}

func (x *ZJH_BetHistory) Reset() {
	*x = ZJH_BetHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_BetHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_BetHistory) ProtoMessage() {}

func (x *ZJH_BetHistory) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_BetHistory.ProtoReflect.Descriptor instead.
func (*ZJH_BetHistory) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{20}
}

func (x *ZJH_BetHistory) GetBet() int32 {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return 0
}

func (x *ZJH_BetHistory) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

//准备时间
type ZJH_ReadyTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadyTime *int32 `protobuf:"varint,1,req,name=ReadyTime" json:"ReadyTime,omitempty"`
}

func (x *ZJH_ReadyTime) Reset() {
	*x = ZJH_ReadyTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_ReadyTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_ReadyTime) ProtoMessage() {}

func (x *ZJH_ReadyTime) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_ReadyTime.ProtoReflect.Descriptor instead.
func (*ZJH_ReadyTime) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{21}
}

func (x *ZJH_ReadyTime) GetReadyTime() int32 {
	if x != nil && x.ReadyTime != nil {
		return *x.ReadyTime
	}
	return 0
}

//超過輪數廣播
type ZJH_OverRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *int32 `protobuf:"varint,1,req,name=time" json:"time,omitempty"` //表演時間
}

func (x *ZJH_OverRound) Reset() {
	*x = ZJH_OverRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_OverRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_OverRound) ProtoMessage() {}

func (x *ZJH_OverRound) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_OverRound.ProtoReflect.Descriptor instead.
func (*ZJH_OverRound) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{22}
}

func (x *ZJH_OverRound) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//錯誤回應
type ZJH_ErrorRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode *ZJH_ErrorCode `protobuf:"varint,1,req,name=ErrorCode,enum=netproto.ZJH_ErrorCode" json:"ErrorCode,omitempty"` //錯誤代碼
	Message   *string        `protobuf:"bytes,2,req,name=Message" json:"Message,omitempty"`                                  //錯誤訊息
}

func (x *ZJH_ErrorRet) Reset() {
	*x = ZJH_ErrorRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ZJH_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZJH_ErrorRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZJH_ErrorRet) ProtoMessage() {}

func (x *ZJH_ErrorRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ZJH_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZJH_ErrorRet.ProtoReflect.Descriptor instead.
func (*ZJH_ErrorRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_ZJH_proto_rawDescGZIP(), []int{23}
}

func (x *ZJH_ErrorRet) GetErrorCode() ZJH_ErrorCode {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ZJH_ErrorCode_ZJHServerError
}

func (x *ZJH_ErrorRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

var File_GameMsg_ZJH_proto protoreflect.FileDescriptor

var file_GameMsg_ZJH_proto_rawDesc = []byte{
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x5a, 0x4a, 0x48, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0e,
	0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x22, 0x43, 0x0a, 0x0b, 0x5a, 0x4a, 0x48, 0x5f, 0x42, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x0a, 0x5a,
	0x4a, 0x48, 0x5f, 0x46, 0x61, 0x69, 0x50, 0x61, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x42, 0x65, 0x74,
	0x41, 0x72, 0x72, 0x22, 0xd5, 0x02, 0x0a, 0x0b, 0x5a, 0x4a, 0x48, 0x5f, 0x57, 0x61, 0x69, 0x74,
	0x4f, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x72, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x61, 0x69, 0x73, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x52, 0x61, 0x69, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x05, 0x41, 0x6c, 0x6c, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x05, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x61, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x61, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x5a,
	0x4a, 0x48, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x2a, 0x0a, 0x0c, 0x5a, 0x4a, 0x48, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x44, 0x0a, 0x0b,
	0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x47, 0x0a, 0x10, 0x5a, 0x4a, 0x48, 0x5f, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x09, 0x5a,
	0x4a, 0x48, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x24, 0x0a, 0x0a, 0x5a, 0x4a, 0x48, 0x5f, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x4f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x22, 0x37, 0x0a, 0x0b, 0x5a, 0x4a, 0x48,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x42,
	0x65, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x5a, 0x4a, 0x48, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x4e, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x42, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x64, 0x64, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4f, 0x64, 0x64, 0x22, 0x26, 0x0a, 0x0c, 0x5a, 0x4a,
	0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x1b, 0x0a, 0x07, 0x5a, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x42, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x42, 0x65, 0x74, 0x22,
	0x48, 0x0a, 0x0a, 0x5a, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x42, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x64, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4f, 0x64, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x5a, 0x4a, 0x48,
	0x5f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x2a, 0x0a, 0x10, 0x5a,
	0x4a, 0x48, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x5a, 0x4a, 0x48, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x57,
	0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x57, 0x69,
	0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x49, 0x73, 0x42, 0x61, 0x6f, 0x5a, 0x69, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x42, 0x61, 0x6f, 0x5a, 0x69,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x22, 0x97, 0x04, 0x0a, 0x0d, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x4f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x34, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x15, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x57, 0x61, 0x69,
	0x74, 0x4f, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70,
	0x74, 0x52, 0x07, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x74, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x0c,
	0x5a, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x38, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x5a, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x34, 0x0a,
	0x0e, 0x5a, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x42, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x64, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x4f, 0x64, 0x64, 0x22, 0x2d, 0x0a, 0x0d, 0x5a, 0x4a, 0x48, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x5a, 0x4a, 0x48, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x5a, 0x4a, 0x48, 0x5f, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x4a, 0x48, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x6f, 0x0a, 0x0e, 0x5a, 0x4a, 0x48, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x5a, 0x4a,
	0x48, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x4a, 0x48,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x4a, 0x48,
	0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x4a, 0x48,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x5a,
	0x4a, 0x48, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x4a, 0x48,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x2a, 0x88, 0x01, 0x0a, 0x0e, 0x5a, 0x4a,
	0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b,
	0x5a, 0x4a, 0x48, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x5a, 0x4a, 0x48, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x4a,
	0x48, 0x52, 0x61, 0x69, 0x73, 0x65, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x4a, 0x48, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x5a, 0x4a, 0x48, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x5a, 0x4a, 0x48, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x5a, 0x4a, 0x48,
	0x53, 0x65, 0x65, 0x6e, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x4a, 0x48, 0x41, 0x6c, 0x6c,
	0x69, 0x6e, 0x10, 0x08, 0x2a, 0xdd, 0x01, 0x0a, 0x0d, 0x5a, 0x4a, 0x48, 0x5f, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x0e, 0x5a, 0x4a, 0x48, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa0, 0x9c, 0x01, 0x12, 0x12, 0x0a, 0x0c,
	0x5a, 0x4a, 0x48, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa1, 0x9c, 0x01,
	0x12, 0x13, 0x0a, 0x0d, 0x5a, 0x4a, 0x48, 0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xa2, 0x9c, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x5a, 0x4a, 0x48, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa3, 0x9c, 0x01, 0x12, 0x12, 0x0a, 0x0c,
	0x5a, 0x4a, 0x48, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa4, 0x9c, 0x01,
	0x12, 0x13, 0x0a, 0x0d, 0x5a, 0x4a, 0x48, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xa5, 0x9c, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x5a, 0x4a, 0x48, 0x41, 0x6c, 0x6c, 0x69,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa6, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x5a, 0x4a,
	0x48, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa7, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x5a, 0x4a, 0x48,
	0x45, 0x61, 0x72, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0xa8, 0x9c, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f,
}

var (
	file_GameMsg_ZJH_proto_rawDescOnce sync.Once
	file_GameMsg_ZJH_proto_rawDescData = file_GameMsg_ZJH_proto_rawDesc
)

func file_GameMsg_ZJH_proto_rawDescGZIP() []byte {
	file_GameMsg_ZJH_proto_rawDescOnce.Do(func() {
		file_GameMsg_ZJH_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_ZJH_proto_rawDescData)
	})
	return file_GameMsg_ZJH_proto_rawDescData
}

var file_GameMsg_ZJH_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_GameMsg_ZJH_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_GameMsg_ZJH_proto_goTypes = []interface{}{
	(ZJH_GameStatus)(0),            // 0: netproto.ZJH_GameStatus
	(ZJH_UserAction)(0),            // 1: netproto.ZJH_UserAction
	(ZJH_ErrorCode)(0),             // 2: netproto.ZJH_ErrorCode
	(*ZJH_GameNoInfo)(nil),         // 3: netproto.ZJH_GameNoInfo
	(*ZJH_BetBase)(nil),            // 4: netproto.ZJH_BetBase
	(*ZJH_FaiPai)(nil),             // 5: netproto.ZJH_FaiPai
	(*ZJH_WaitOpt)(nil),            // 6: netproto.ZJH_WaitOpt
	(*ZJH_WaitOptSeat)(nil),        // 7: netproto.ZJH_WaitOptSeat
	(*ZJH_Currturn)(nil),           // 8: netproto.ZJH_Currturn
	(*ZJH_GameRet)(nil),            // 9: netproto.ZJH_GameRet
	(*ZJH_EndUserPoker)(nil),       // 10: netproto.ZJH_EndUserPoker
	(*ZJH_Poker)(nil),              // 11: netproto.ZJH_Poker
	(*ZJH_SeatNO)(nil),             // 12: netproto.ZJH_SeatNO
	(*ZJH_Compare)(nil),            // 13: netproto.ZJH_Compare
	(*ZJH_CompareCardsRet)(nil),    // 14: netproto.ZJH_CompareCardsRet
	(*ZJH_UserDrop)(nil),           // 15: netproto.ZJH_UserDrop
	(*ZJH_Bet)(nil),                // 16: netproto.ZJH_Bet
	(*ZJH_BetRet)(nil),             // 17: netproto.ZJH_BetRet
	(*ZJH_ProtectOverTimeRet)(nil), // 18: netproto.ZJH_ProtectOverTimeRet
	(*ZJH_FollowEndRet)(nil),       // 19: netproto.ZJH_FollowEndRet
	(*ZJH_GameEndUserInfo)(nil),    // 20: netproto.ZJH_GameEndUserInfo
	(*ZJH_GameScene)(nil),          // 21: netproto.ZJH_GameScene
	(*ZJH_UserInfo)(nil),           // 22: netproto.ZJH_UserInfo
	(*ZJH_BetHistory)(nil),         // 23: netproto.ZJH_BetHistory
	(*ZJH_ReadyTime)(nil),          // 24: netproto.ZJH_ReadyTime
	(*ZJH_OverRound)(nil),          // 25: netproto.ZJH_OverRound
	(*ZJH_ErrorRet)(nil),           // 26: netproto.ZJH_ErrorRet
	(*UserPoker)(nil),              // 27: netproto.UserPoker
}
var file_GameMsg_ZJH_proto_depIdxs = []int32{
	20, // 0: netproto.ZJH_GameRet.Result:type_name -> netproto.ZJH_GameEndUserInfo
	11, // 1: netproto.ZJH_EndUserPoker.OtherPoker:type_name -> netproto.ZJH_Poker
	27, // 2: netproto.ZJH_Poker.UserPokerGroup:type_name -> netproto.UserPoker
	0,  // 3: netproto.ZJH_GameScene.GameStatus:type_name -> netproto.ZJH_GameStatus
	22, // 4: netproto.ZJH_GameScene.UserInfo:type_name -> netproto.ZJH_UserInfo
	6,  // 5: netproto.ZJH_GameScene.WaitOpt:type_name -> netproto.ZJH_WaitOpt
	9,  // 6: netproto.ZJH_GameScene.GameRet:type_name -> netproto.ZJH_GameRet
	23, // 7: netproto.ZJH_UserInfo.BetMoney:type_name -> netproto.ZJH_BetHistory
	1,  // 8: netproto.ZJH_UserInfo.LastAction:type_name -> netproto.ZJH_UserAction
	11, // 9: netproto.ZJH_UserInfo.UserPoker:type_name -> netproto.ZJH_Poker
	2,  // 10: netproto.ZJH_ErrorRet.ErrorCode:type_name -> netproto.ZJH_ErrorCode
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_GameMsg_ZJH_proto_init() }
func file_GameMsg_ZJH_proto_init() {
	if File_GameMsg_ZJH_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_ZJH_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_BetBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_FaiPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_WaitOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_WaitOptSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_Currturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_GameRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_EndUserPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_Poker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_SeatNO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_Compare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_CompareCardsRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_UserDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_ProtectOverTimeRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_FollowEndRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_GameEndUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_GameScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_BetHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_ReadyTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_OverRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ZJH_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZJH_ErrorRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_ZJH_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_ZJH_proto_goTypes,
		DependencyIndexes: file_GameMsg_ZJH_proto_depIdxs,
		EnumInfos:         file_GameMsg_ZJH_proto_enumTypes,
		MessageInfos:      file_GameMsg_ZJH_proto_msgTypes,
	}.Build()
	File_GameMsg_ZJH_proto = out.File
	file_GameMsg_ZJH_proto_rawDesc = nil
	file_GameMsg_ZJH_proto_goTypes = nil
	file_GameMsg_ZJH_proto_depIdxs = nil
}
