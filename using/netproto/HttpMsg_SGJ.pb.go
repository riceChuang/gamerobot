// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: HttpMsg_SGJ.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Http_SGJ_GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableList []*Http_SGJ_TableList `protobuf:"bytes,1,rep,name=TableList" json:"TableList,omitempty"` //桌子信息
}

func (x *Http_SGJ_GameInfo) Reset() {
	*x = Http_SGJ_GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HttpMsg_SGJ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http_SGJ_GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http_SGJ_GameInfo) ProtoMessage() {}

func (x *Http_SGJ_GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HttpMsg_SGJ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http_SGJ_GameInfo.ProtoReflect.Descriptor instead.
func (*Http_SGJ_GameInfo) Descriptor() ([]byte, []int) {
	return file_HttpMsg_SGJ_proto_rawDescGZIP(), []int{0}
}

func (x *Http_SGJ_GameInfo) GetTableList() []*Http_SGJ_TableList {
	if x != nil {
		return x.TableList
	}
	return nil
}

type Http_SGJ_TableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNo           *int32 `protobuf:"varint,1,req,name=TableNo" json:"TableNo,omitempty"`                     //桌子号
	Status            *int32 `protobuf:"varint,2,req,name=Status" json:"Status,omitempty"`                       //当前状态 0 下注中 1 开奖中 2结算动画 3等待开始游戏
	GameUserCount     *int32 `protobuf:"varint,3,req,name=GameUserCount" json:"GameUserCount,omitempty"`         //玩家人数(包含未下注玩家)
	RobotCount        *int32 `protobuf:"varint,4,req,name=RobotCount" json:"RobotCount,omitempty"`               //机器人数(包含未下注机器人)
	SumEarnAmount     *int64 `protobuf:"varint,5,req,name=SumEarnAmount" json:"SumEarnAmount,omitempty"`         //系统从开服到现在的总收益
	LastEarnAmount    *int32 `protobuf:"varint,6,req,name=LastEarnAmount" json:"LastEarnAmount,omitempty"`       //最后一局收益
	PoolCurrentAmount *int64 `protobuf:"varint,7,req,name=PoolCurrentAmount" json:"PoolCurrentAmount,omitempty"` //水池剩餘金币数
	SysTaxIncome      *int64 `protobuf:"varint,8,req,name=SysTaxIncome" json:"SysTaxIncome,omitempty"`           //系統稅收
	ZhuShuiMoney      *int64 `protobuf:"varint,9,req,name=ZhuShuiMoney" json:"ZhuShuiMoney,omitempty"`           //当前水池金币数
}

func (x *Http_SGJ_TableList) Reset() {
	*x = Http_SGJ_TableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HttpMsg_SGJ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http_SGJ_TableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http_SGJ_TableList) ProtoMessage() {}

func (x *Http_SGJ_TableList) ProtoReflect() protoreflect.Message {
	mi := &file_HttpMsg_SGJ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http_SGJ_TableList.ProtoReflect.Descriptor instead.
func (*Http_SGJ_TableList) Descriptor() ([]byte, []int) {
	return file_HttpMsg_SGJ_proto_rawDescGZIP(), []int{1}
}

func (x *Http_SGJ_TableList) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *Http_SGJ_TableList) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Http_SGJ_TableList) GetGameUserCount() int32 {
	if x != nil && x.GameUserCount != nil {
		return *x.GameUserCount
	}
	return 0
}

func (x *Http_SGJ_TableList) GetRobotCount() int32 {
	if x != nil && x.RobotCount != nil {
		return *x.RobotCount
	}
	return 0
}

func (x *Http_SGJ_TableList) GetSumEarnAmount() int64 {
	if x != nil && x.SumEarnAmount != nil {
		return *x.SumEarnAmount
	}
	return 0
}

func (x *Http_SGJ_TableList) GetLastEarnAmount() int32 {
	if x != nil && x.LastEarnAmount != nil {
		return *x.LastEarnAmount
	}
	return 0
}

func (x *Http_SGJ_TableList) GetPoolCurrentAmount() int64 {
	if x != nil && x.PoolCurrentAmount != nil {
		return *x.PoolCurrentAmount
	}
	return 0
}

func (x *Http_SGJ_TableList) GetSysTaxIncome() int64 {
	if x != nil && x.SysTaxIncome != nil {
		return *x.SysTaxIncome
	}
	return 0
}

func (x *Http_SGJ_TableList) GetZhuShuiMoney() int64 {
	if x != nil && x.ZhuShuiMoney != nil {
		return *x.ZhuShuiMoney
	}
	return 0
}

type Http_SGJ_BetBlackDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlackUserList *string `protobuf:"bytes,1,req,name=BlackUserList" json:"BlackUserList,omitempty"` //黑名單UserId
}

func (x *Http_SGJ_BetBlackDetail) Reset() {
	*x = Http_SGJ_BetBlackDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HttpMsg_SGJ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http_SGJ_BetBlackDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http_SGJ_BetBlackDetail) ProtoMessage() {}

func (x *Http_SGJ_BetBlackDetail) ProtoReflect() protoreflect.Message {
	mi := &file_HttpMsg_SGJ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http_SGJ_BetBlackDetail.ProtoReflect.Descriptor instead.
func (*Http_SGJ_BetBlackDetail) Descriptor() ([]byte, []int) {
	return file_HttpMsg_SGJ_proto_rawDescGZIP(), []int{2}
}

func (x *Http_SGJ_BetBlackDetail) GetBlackUserList() string {
	if x != nil && x.BlackUserList != nil {
		return *x.BlackUserList
	}
	return ""
}

type Http_SGJ_TableDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNo                  *int32               `protobuf:"varint,1,req,name=TableNo" json:"TableNo,omitempty"`                                    //桌子号
	Status                   *int32               `protobuf:"varint,2,req,name=Status" json:"Status,omitempty"`                                      //当前状态 0 下注中 1 开奖中 2结算动画 3等待开始游戏
	SumEarnAmount            *int64               `protobuf:"varint,3,req,name=SumEarnAmount" json:"SumEarnAmount,omitempty"`                        //系统从开服到现在的总收益
	LastEarnAmount           *int32               `protobuf:"varint,4,req,name=LastEarnAmount" json:"LastEarnAmount,omitempty"`                      //最后一局收益
	PoolCurrentAmount        *int64               `protobuf:"varint,5,req,name=PoolCurrentAmount" json:"PoolCurrentAmount,omitempty"`                //水池剩餘金币数
	GameUserCount            *int32               `protobuf:"varint,6,req,name=GameUserCount" json:"GameUserCount,omitempty"`                        //游戏玩家人数(包含未下注玩家)
	RobotCount               *int32               `protobuf:"varint,7,req,name=RobotCount" json:"RobotCount,omitempty"`                              //机器人数(包含未下注机器人)
	PopWaterRate             *int32               `protobuf:"varint,8,req,name=PopWaterRate" json:"PopWaterRate,omitempty"`                          //当前注水率
	ZhuangType               *int32               `protobuf:"varint,9,req,name=ZhuangType" json:"ZhuangType,omitempty"`                              //庄家类型	0系统 1机器人当庄 2玩家上庄
	ZhuangNickName           *string              `protobuf:"bytes,10,req,name=ZhuangNickName" json:"ZhuangNickName,omitempty"`                      //庄家昵称
	ZhuangUserID             *int32               `protobuf:"varint,11,req,name=ZhuangUserID" json:"ZhuangUserID,omitempty"`                         //庄家用户ID
	ZhuangSurplusTotal       *int32               `protobuf:"varint,12,req,name=ZhuangSurplusTotal" json:"ZhuangSurplusTotal,omitempty"`             //庄家剩余局数
	ZhuangCurrentMoneyAmount *int64               `protobuf:"varint,13,req,name=ZhuangCurrentMoneyAmount" json:"ZhuangCurrentMoneyAmount,omitempty"` //庄家当前金币数 系统或机器人坐庄则表示水池金币数量
	ZhuangInitMoneyAmount    *int64               `protobuf:"varint,14,req,name=ZhuangInitMoneyAmount" json:"ZhuangInitMoneyAmount,omitempty"`       //庄家初始上庄金币数 系统或机器人坐庄则用0表示
	OpenResultApple          *int64               `protobuf:"varint,15,req,name=OpenResultApple" json:"OpenResultApple,omitempty"`                   //当前开奖结果为苹果的收益数量
	OpenResultAppleMin       *int64               `protobuf:"varint,16,req,name=OpenResultAppleMin" json:"OpenResultAppleMin,omitempty"`             //当前开奖结果为苹果小的收益数量
	OpenResultOrange         *int64               `protobuf:"varint,17,req,name=OpenResultOrange" json:"OpenResultOrange,omitempty"`                 //当前开奖结果为桔子的收益数量
	OpenResultOrangeMin      *int64               `protobuf:"varint,18,req,name=OpenResultOrangeMin" json:"OpenResultOrangeMin,omitempty"`           //当前开奖结果为桔子小的收益数量
	OpenResultMango          *int64               `protobuf:"varint,19,req,name=OpenResultMango" json:"OpenResultMango,omitempty"`                   //当前开奖结果为芒果的收益数量
	OpenResultMangoMin       *int64               `protobuf:"varint,20,req,name=OpenResultMangoMin" json:"OpenResultMangoMin,omitempty"`             //当前开奖结果为芒果小的收益数量
	OpenResultBell           *int64               `protobuf:"varint,21,req,name=OpenResultBell" json:"OpenResultBell,omitempty"`                     //当前开奖结果为铃铛的收益数量
	OpenResultBellMin        *int64               `protobuf:"varint,22,req,name=OpenResultBellMin" json:"OpenResultBellMin,omitempty"`               //当前开奖结果为铃铛小的收益数量
	OpenResultWatermelon     *int64               `protobuf:"varint,23,req,name=OpenResultWatermelon" json:"OpenResultWatermelon,omitempty"`         //当前开奖结果为西瓜的收益数量
	OpenResultWatermelonMin  *int64               `protobuf:"varint,24,req,name=OpenResultWatermelonMin" json:"OpenResultWatermelonMin,omitempty"`   //当前开奖结果为西瓜小的收益数量
	OpenResultDobuleStar     *int64               `protobuf:"varint,25,req,name=OpenResultDobuleStar" json:"OpenResultDobuleStar,omitempty"`         //当前开奖结果为双星的收益数量
	OpenResultDobuleStarMin  *int64               `protobuf:"varint,26,req,name=OpenResultDobuleStarMin" json:"OpenResultDobuleStarMin,omitempty"`   //当前开奖结果为双星小的收益数量
	OpenResult77             *int64               `protobuf:"varint,27,req,name=OpenResult77" json:"OpenResult77,omitempty"`                         //当前开奖结果为77的收益数量
	OpenResult77Min          *int64               `protobuf:"varint,28,req,name=OpenResult77Min" json:"OpenResult77Min,omitempty"`                   //当前开奖结果为77小的收益数量
	OpenResultBar            *int64               `protobuf:"varint,29,req,name=OpenResultBar" json:"OpenResultBar,omitempty"`                       //当前开奖结果为BAR的收益数量
	OpenResultBarMin         *int64               `protobuf:"varint,30,req,name=OpenResultBarMin" json:"OpenResultBarMin,omitempty"`                 //当前开奖结果为BAR小的收益数量
	OpenResultLuckLose       *int64               `protobuf:"varint,31,req,name=OpenResultLuckLose" json:"OpenResultLuckLose,omitempty"`             //当前开奖结果为LuckLose的收益数量
	CurentOpenResult         *string              `protobuf:"bytes,32,req,name=CurentOpenResult" json:"CurentOpenResult,omitempty"`                  //当前开奖结果,只有在开奖动画状态下有值
	CurentOpenResultEarn     *int64               `protobuf:"varint,33,req,name=CurentOpenResultEarn" json:"CurentOpenResultEarn,omitempty"`         //当前开奖收益,只有在开奖动画状态下有值
	UserInfo                 []*Http_SGJ_UserInfo `protobuf:"bytes,34,rep,name=UserInfo" json:"UserInfo,omitempty"`                                  //玩家信息
	SysTaxIncome             *int64               `protobuf:"varint,35,req,name=SysTaxIncome" json:"SysTaxIncome,omitempty"`                         //系統稅收
	ZhuShuiMoney             *int64               `protobuf:"varint,36,req,name=ZhuShuiMoney" json:"ZhuShuiMoney,omitempty"`                         //当前水池金币数
	BetTime                  *int32               `protobuf:"varint,37,req,name=BetTime" json:"BetTime,omitempty"`                                   //下注時間
}

func (x *Http_SGJ_TableDetail) Reset() {
	*x = Http_SGJ_TableDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HttpMsg_SGJ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http_SGJ_TableDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http_SGJ_TableDetail) ProtoMessage() {}

func (x *Http_SGJ_TableDetail) ProtoReflect() protoreflect.Message {
	mi := &file_HttpMsg_SGJ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http_SGJ_TableDetail.ProtoReflect.Descriptor instead.
func (*Http_SGJ_TableDetail) Descriptor() ([]byte, []int) {
	return file_HttpMsg_SGJ_proto_rawDescGZIP(), []int{3}
}

func (x *Http_SGJ_TableDetail) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetSumEarnAmount() int64 {
	if x != nil && x.SumEarnAmount != nil {
		return *x.SumEarnAmount
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetLastEarnAmount() int32 {
	if x != nil && x.LastEarnAmount != nil {
		return *x.LastEarnAmount
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetPoolCurrentAmount() int64 {
	if x != nil && x.PoolCurrentAmount != nil {
		return *x.PoolCurrentAmount
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetGameUserCount() int32 {
	if x != nil && x.GameUserCount != nil {
		return *x.GameUserCount
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetRobotCount() int32 {
	if x != nil && x.RobotCount != nil {
		return *x.RobotCount
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetPopWaterRate() int32 {
	if x != nil && x.PopWaterRate != nil {
		return *x.PopWaterRate
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetZhuangType() int32 {
	if x != nil && x.ZhuangType != nil {
		return *x.ZhuangType
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetZhuangNickName() string {
	if x != nil && x.ZhuangNickName != nil {
		return *x.ZhuangNickName
	}
	return ""
}

func (x *Http_SGJ_TableDetail) GetZhuangUserID() int32 {
	if x != nil && x.ZhuangUserID != nil {
		return *x.ZhuangUserID
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetZhuangSurplusTotal() int32 {
	if x != nil && x.ZhuangSurplusTotal != nil {
		return *x.ZhuangSurplusTotal
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetZhuangCurrentMoneyAmount() int64 {
	if x != nil && x.ZhuangCurrentMoneyAmount != nil {
		return *x.ZhuangCurrentMoneyAmount
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetZhuangInitMoneyAmount() int64 {
	if x != nil && x.ZhuangInitMoneyAmount != nil {
		return *x.ZhuangInitMoneyAmount
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultApple() int64 {
	if x != nil && x.OpenResultApple != nil {
		return *x.OpenResultApple
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultAppleMin() int64 {
	if x != nil && x.OpenResultAppleMin != nil {
		return *x.OpenResultAppleMin
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultOrange() int64 {
	if x != nil && x.OpenResultOrange != nil {
		return *x.OpenResultOrange
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultOrangeMin() int64 {
	if x != nil && x.OpenResultOrangeMin != nil {
		return *x.OpenResultOrangeMin
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultMango() int64 {
	if x != nil && x.OpenResultMango != nil {
		return *x.OpenResultMango
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultMangoMin() int64 {
	if x != nil && x.OpenResultMangoMin != nil {
		return *x.OpenResultMangoMin
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultBell() int64 {
	if x != nil && x.OpenResultBell != nil {
		return *x.OpenResultBell
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultBellMin() int64 {
	if x != nil && x.OpenResultBellMin != nil {
		return *x.OpenResultBellMin
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultWatermelon() int64 {
	if x != nil && x.OpenResultWatermelon != nil {
		return *x.OpenResultWatermelon
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultWatermelonMin() int64 {
	if x != nil && x.OpenResultWatermelonMin != nil {
		return *x.OpenResultWatermelonMin
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultDobuleStar() int64 {
	if x != nil && x.OpenResultDobuleStar != nil {
		return *x.OpenResultDobuleStar
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultDobuleStarMin() int64 {
	if x != nil && x.OpenResultDobuleStarMin != nil {
		return *x.OpenResultDobuleStarMin
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResult77() int64 {
	if x != nil && x.OpenResult77 != nil {
		return *x.OpenResult77
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResult77Min() int64 {
	if x != nil && x.OpenResult77Min != nil {
		return *x.OpenResult77Min
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultBar() int64 {
	if x != nil && x.OpenResultBar != nil {
		return *x.OpenResultBar
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultBarMin() int64 {
	if x != nil && x.OpenResultBarMin != nil {
		return *x.OpenResultBarMin
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetOpenResultLuckLose() int64 {
	if x != nil && x.OpenResultLuckLose != nil {
		return *x.OpenResultLuckLose
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetCurentOpenResult() string {
	if x != nil && x.CurentOpenResult != nil {
		return *x.CurentOpenResult
	}
	return ""
}

func (x *Http_SGJ_TableDetail) GetCurentOpenResultEarn() int64 {
	if x != nil && x.CurentOpenResultEarn != nil {
		return *x.CurentOpenResultEarn
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetUserInfo() []*Http_SGJ_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Http_SGJ_TableDetail) GetSysTaxIncome() int64 {
	if x != nil && x.SysTaxIncome != nil {
		return *x.SysTaxIncome
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetZhuShuiMoney() int64 {
	if x != nil && x.ZhuShuiMoney != nil {
		return *x.ZhuShuiMoney
	}
	return 0
}

func (x *Http_SGJ_TableDetail) GetBetTime() int32 {
	if x != nil && x.BetTime != nil {
		return *x.BetTime
	}
	return 0
}

type Http_SGJ_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`                                //玩家ID
	UserType              *int32  `protobuf:"varint,2,req,name=UserType" json:"UserType,omitempty"`                            //玩家类型 0机器人 1玩家
	NickName              *string `protobuf:"bytes,3,req,name=NickName" json:"NickName,omitempty"`                             //玩家昵称
	GameScore             *int64  `protobuf:"varint,4,req,name=GameScore" json:"GameScore,omitempty"`                          //游戏总输赢
	InitMoney             *int64  `protobuf:"varint,5,req,name=InitMoney" json:"InitMoney,omitempty"`                          //初始金币
	CurrentMoney          *int64  `protobuf:"varint,6,req,name=CurrentMoney" json:"CurrentMoney,omitempty"`                    //当前金币
	BetInfoUserApple      *int64  `protobuf:"varint,7,req,name=BetInfoUserApple" json:"BetInfoUserApple,omitempty"`            //下注苹果的金币数量
	BetInfoUserOrange     *int64  `protobuf:"varint,8,req,name=BetInfoUserOrange" json:"BetInfoUserOrange,omitempty"`          //下注桔子的金币数量
	BetInfoUserMango      *int64  `protobuf:"varint,9,req,name=BetInfoUserMango" json:"BetInfoUserMango,omitempty"`            //下注芒果的金币数量
	BetInfoUserBell       *int64  `protobuf:"varint,10,req,name=BetInfoUserBell" json:"BetInfoUserBell,omitempty"`             //下注铃铛的金币数量
	BetInfoUserWatermelon *int64  `protobuf:"varint,11,req,name=BetInfoUserWatermelon" json:"BetInfoUserWatermelon,omitempty"` //下注西瓜的金币数量
	BetInfoUserDobuleStar *int64  `protobuf:"varint,12,req,name=BetInfoUserDobuleStar" json:"BetInfoUserDobuleStar,omitempty"` //下注双星的金币数量
	BetInfoUser77         *int64  `protobuf:"varint,13,req,name=BetInfoUser77" json:"BetInfoUser77,omitempty"`                 //下注77的金币数量
	BetInfoUserBar        *int64  `protobuf:"varint,14,req,name=BetInfoUserBar" json:"BetInfoUserBar,omitempty"`               //下注BAR的金币数量
	SumCharge             *int64  `protobuf:"varint,15,req,name=SumCharge" json:"SumCharge,omitempty"`                         //總充值
	SumConvert            *int64  `protobuf:"varint,16,req,name=SumConvert" json:"SumConvert,omitempty"`                       //總兌換
}

func (x *Http_SGJ_UserInfo) Reset() {
	*x = Http_SGJ_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HttpMsg_SGJ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http_SGJ_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http_SGJ_UserInfo) ProtoMessage() {}

func (x *Http_SGJ_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HttpMsg_SGJ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http_SGJ_UserInfo.ProtoReflect.Descriptor instead.
func (*Http_SGJ_UserInfo) Descriptor() ([]byte, []int) {
	return file_HttpMsg_SGJ_proto_rawDescGZIP(), []int{4}
}

func (x *Http_SGJ_UserInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetUserType() int32 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *Http_SGJ_UserInfo) GetGameScore() int64 {
	if x != nil && x.GameScore != nil {
		return *x.GameScore
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetInitMoney() int64 {
	if x != nil && x.InitMoney != nil {
		return *x.InitMoney
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetCurrentMoney() int64 {
	if x != nil && x.CurrentMoney != nil {
		return *x.CurrentMoney
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUserApple() int64 {
	if x != nil && x.BetInfoUserApple != nil {
		return *x.BetInfoUserApple
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUserOrange() int64 {
	if x != nil && x.BetInfoUserOrange != nil {
		return *x.BetInfoUserOrange
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUserMango() int64 {
	if x != nil && x.BetInfoUserMango != nil {
		return *x.BetInfoUserMango
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUserBell() int64 {
	if x != nil && x.BetInfoUserBell != nil {
		return *x.BetInfoUserBell
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUserWatermelon() int64 {
	if x != nil && x.BetInfoUserWatermelon != nil {
		return *x.BetInfoUserWatermelon
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUserDobuleStar() int64 {
	if x != nil && x.BetInfoUserDobuleStar != nil {
		return *x.BetInfoUserDobuleStar
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUser77() int64 {
	if x != nil && x.BetInfoUser77 != nil {
		return *x.BetInfoUser77
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetBetInfoUserBar() int64 {
	if x != nil && x.BetInfoUserBar != nil {
		return *x.BetInfoUserBar
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetSumCharge() int64 {
	if x != nil && x.SumCharge != nil {
		return *x.SumCharge
	}
	return 0
}

func (x *Http_SGJ_UserInfo) GetSumConvert() int64 {
	if x != nil && x.SumConvert != nil {
		return *x.SumConvert
	}
	return 0
}

//上一次开奖结果
type SGJ_LastGameResultType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultTypeOdd []*SGJ_JiangTypeOdd `protobuf:"bytes,1,rep,name=ResultTypeOdd" json:"ResultTypeOdd,omitempty"` //上20次开奖结果
	BetMoney      *int64              `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`          //当前下注的总钱数
}

func (x *SGJ_LastGameResultType) Reset() {
	*x = SGJ_LastGameResultType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HttpMsg_SGJ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGJ_LastGameResultType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGJ_LastGameResultType) ProtoMessage() {}

func (x *SGJ_LastGameResultType) ProtoReflect() protoreflect.Message {
	mi := &file_HttpMsg_SGJ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGJ_LastGameResultType.ProtoReflect.Descriptor instead.
func (*SGJ_LastGameResultType) Descriptor() ([]byte, []int) {
	return file_HttpMsg_SGJ_proto_rawDescGZIP(), []int{5}
}

func (x *SGJ_LastGameResultType) GetResultTypeOdd() []*SGJ_JiangTypeOdd {
	if x != nil {
		return x.ResultTypeOdd
	}
	return nil
}

func (x *SGJ_LastGameResultType) GetBetMoney() int64 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

//一次开奖结果的类型和倍数
type SGJ_JiangTypeOdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType *int32 `protobuf:"varint,1,req,name=ResultType" json:"ResultType,omitempty"`
	Odd        *int32 `protobuf:"varint,2,req,name=Odd" json:"Odd,omitempty"`
}

func (x *SGJ_JiangTypeOdd) Reset() {
	*x = SGJ_JiangTypeOdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HttpMsg_SGJ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGJ_JiangTypeOdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGJ_JiangTypeOdd) ProtoMessage() {}

func (x *SGJ_JiangTypeOdd) ProtoReflect() protoreflect.Message {
	mi := &file_HttpMsg_SGJ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGJ_JiangTypeOdd.ProtoReflect.Descriptor instead.
func (*SGJ_JiangTypeOdd) Descriptor() ([]byte, []int) {
	return file_HttpMsg_SGJ_proto_rawDescGZIP(), []int{6}
}

func (x *SGJ_JiangTypeOdd) GetResultType() int32 {
	if x != nil && x.ResultType != nil {
		return *x.ResultType
	}
	return 0
}

func (x *SGJ_JiangTypeOdd) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

var File_HttpMsg_SGJ_proto protoreflect.FileDescriptor

var file_HttpMsg_SGJ_proto_rawDesc = []byte{
	0x0a, 0x11, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x47, 0x4a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a,
	0x11, 0x48, 0x74, 0x74, 0x70, 0x5f, 0x53, 0x47, 0x4a, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x5f, 0x53, 0x47, 0x4a, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd0,
	0x02, 0x0a, 0x12, 0x48, 0x74, 0x74, 0x70, 0x5f, 0x53, 0x47, 0x4a, 0x5f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x75, 0x6d, 0x45, 0x61, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x75, 0x6d, 0x45, 0x61, 0x72, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x61, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x79, 0x73,
	0x54, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0c, 0x53, 0x79, 0x73, 0x54, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x5a, 0x68, 0x75, 0x53, 0x68, 0x75, 0x69, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0c, 0x5a, 0x68, 0x75, 0x53, 0x68, 0x75, 0x69, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x22, 0x3f, 0x0a, 0x17, 0x48, 0x74, 0x74, 0x70, 0x5f, 0x53, 0x47, 0x4a, 0x5f, 0x42, 0x65,
	0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xcb, 0x0c, 0x0a, 0x14, 0x48, 0x74, 0x74, 0x70, 0x5f, 0x53, 0x47, 0x4a, 0x5f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x75, 0x6d, 0x45, 0x61, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x75, 0x6d, 0x45, 0x61, 0x72, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x61, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x70, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6f, 0x70, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x12, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x12, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x3a, 0x0a, 0x18, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x18, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x03, 0x52, 0x15, 0x5a, 0x68, 0x75, 0x61,
	0x6e, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x18, 0x10, 0x20, 0x02, 0x28, 0x03, 0x52, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x11, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x12,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x67, 0x6f, 0x18, 0x13, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x61,
	0x6e, 0x67, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x61, 0x6e, 0x67, 0x6f, 0x4d, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x12, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x67, 0x6f,
	0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x65, 0x6c, 0x6c, 0x18, 0x15, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x6c, 0x6c, 0x4d, 0x69, 0x6e,
	0x18, 0x16, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x65, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x6c, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x02, 0x28, 0x03, 0x52, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x6c, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x17, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x6c, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x02, 0x28, 0x03, 0x52, 0x17,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x6c, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x62, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x18,
	0x19, 0x20, 0x02, 0x28, 0x03, 0x52, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x6f, 0x62, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x62, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x02, 0x28, 0x03, 0x52, 0x17, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x62, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x37, 0x37, 0x18, 0x1b, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x37, 0x37, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x37, 0x37, 0x4d, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x37, 0x37,
	0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x61, 0x72, 0x18, 0x1d, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x1e, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x61, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x75, 0x63,
	0x6b, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x20, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x10, 0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x18, 0x21, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x14, 0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x61, 0x72, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x5f, 0x53, 0x47, 0x4a, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x79, 0x73, 0x54, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x23,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x79, 0x73, 0x54, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x5a, 0x68, 0x75, 0x53, 0x68, 0x75, 0x69, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x24, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x5a, 0x68, 0x75, 0x53, 0x68, 0x75,
	0x69, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x25, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xeb, 0x04, 0x0a, 0x11, 0x48, 0x74, 0x74, 0x70, 0x5f, 0x53, 0x47, 0x4a, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x10, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x42,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x67, 0x6f, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x67, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6c, 0x6c, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x6c, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x02, 0x28, 0x03, 0x52, 0x15, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x6c, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x62, 0x75, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x15, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x62, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x37, 0x37, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x37, 0x37, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0f, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x10, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0a, 0x53, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x22, 0x76,
	0x0a, 0x16, 0x53, 0x47, 0x4a, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x47, 0x4a, 0x5f, 0x4a,
	0x69, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64, 0x64, 0x52, 0x0d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x44, 0x0a, 0x10, 0x53, 0x47, 0x4a, 0x5f, 0x4a, 0x69,
	0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x64,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4f, 0x64, 0x64, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_HttpMsg_SGJ_proto_rawDescOnce sync.Once
	file_HttpMsg_SGJ_proto_rawDescData = file_HttpMsg_SGJ_proto_rawDesc
)

func file_HttpMsg_SGJ_proto_rawDescGZIP() []byte {
	file_HttpMsg_SGJ_proto_rawDescOnce.Do(func() {
		file_HttpMsg_SGJ_proto_rawDescData = protoimpl.X.CompressGZIP(file_HttpMsg_SGJ_proto_rawDescData)
	})
	return file_HttpMsg_SGJ_proto_rawDescData
}

var file_HttpMsg_SGJ_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_HttpMsg_SGJ_proto_goTypes = []interface{}{
	(*Http_SGJ_GameInfo)(nil),       // 0: netproto.Http_SGJ_GameInfo
	(*Http_SGJ_TableList)(nil),      // 1: netproto.Http_SGJ_TableList
	(*Http_SGJ_BetBlackDetail)(nil), // 2: netproto.Http_SGJ_BetBlackDetail
	(*Http_SGJ_TableDetail)(nil),    // 3: netproto.Http_SGJ_TableDetail
	(*Http_SGJ_UserInfo)(nil),       // 4: netproto.Http_SGJ_UserInfo
	(*SGJ_LastGameResultType)(nil),  // 5: netproto.SGJ_LastGameResultType
	(*SGJ_JiangTypeOdd)(nil),        // 6: netproto.SGJ_JiangTypeOdd
}
var file_HttpMsg_SGJ_proto_depIdxs = []int32{
	1, // 0: netproto.Http_SGJ_GameInfo.TableList:type_name -> netproto.Http_SGJ_TableList
	4, // 1: netproto.Http_SGJ_TableDetail.UserInfo:type_name -> netproto.Http_SGJ_UserInfo
	6, // 2: netproto.SGJ_LastGameResultType.ResultTypeOdd:type_name -> netproto.SGJ_JiangTypeOdd
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_HttpMsg_SGJ_proto_init() }
func file_HttpMsg_SGJ_proto_init() {
	if File_HttpMsg_SGJ_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_HttpMsg_SGJ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http_SGJ_GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HttpMsg_SGJ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http_SGJ_TableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HttpMsg_SGJ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http_SGJ_BetBlackDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HttpMsg_SGJ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http_SGJ_TableDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HttpMsg_SGJ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http_SGJ_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HttpMsg_SGJ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SGJ_LastGameResultType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HttpMsg_SGJ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SGJ_JiangTypeOdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_HttpMsg_SGJ_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_HttpMsg_SGJ_proto_goTypes,
		DependencyIndexes: file_HttpMsg_SGJ_proto_depIdxs,
		MessageInfos:      file_HttpMsg_SGJ_proto_msgTypes,
	}.Build()
	File_HttpMsg_SGJ_proto = out.File
	file_HttpMsg_SGJ_proto_rawDesc = nil
	file_HttpMsg_SGJ_proto_goTypes = nil
	file_HttpMsg_SGJ_proto_depIdxs = nil
}
