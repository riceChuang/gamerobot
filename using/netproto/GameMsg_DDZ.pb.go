// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_DDZ.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//错误消息定义
type DDZ_ErrorCode int32

const (
	DDZ_ErrorCode_OK   DDZ_ErrorCode = 1 //成功
	DDZ_ErrorCode_Fail DDZ_ErrorCode = 2 //失败
)

// Enum value maps for DDZ_ErrorCode.
var (
	DDZ_ErrorCode_name = map[int32]string{
		1: "OK",
		2: "Fail",
	}
	DDZ_ErrorCode_value = map[string]int32{
		"OK":   1,
		"Fail": 2,
	}
)

func (x DDZ_ErrorCode) Enum() *DDZ_ErrorCode {
	p := new(DDZ_ErrorCode)
	*p = x
	return p
}

func (x DDZ_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DDZ_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_DDZ_proto_enumTypes[0].Descriptor()
}

func (DDZ_ErrorCode) Type() protoreflect.EnumType {
	return &file_GameMsg_DDZ_proto_enumTypes[0]
}

func (x DDZ_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DDZ_ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DDZ_ErrorCode(num)
	return nil
}

// Deprecated: Use DDZ_ErrorCode.Descriptor instead.
func (DDZ_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{0}
}

type UserActionDo int32

const (
	UserActionDo_UANONE  UserActionDo = 1
	UserActionDo_UANOTDO UserActionDo = 2
	UserActionDo_UADO    UserActionDo = 3
)

// Enum value maps for UserActionDo.
var (
	UserActionDo_name = map[int32]string{
		1: "UANONE",
		2: "UANOTDO",
		3: "UADO",
	}
	UserActionDo_value = map[string]int32{
		"UANONE":  1,
		"UANOTDO": 2,
		"UADO":    3,
	}
)

func (x UserActionDo) Enum() *UserActionDo {
	p := new(UserActionDo)
	*p = x
	return p
}

func (x UserActionDo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserActionDo) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_DDZ_proto_enumTypes[1].Descriptor()
}

func (UserActionDo) Type() protoreflect.EnumType {
	return &file_GameMsg_DDZ_proto_enumTypes[1]
}

func (x UserActionDo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserActionDo) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserActionDo(num)
	return nil
}

// Deprecated: Use UserActionDo.Descriptor instead.
func (UserActionDo) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{1}
}

//倍率改变类型
type OddsChangeType int32

const (
	OddsChangeType_null        OddsChangeType = 1
	OddsChangeType_mingpai     OddsChangeType = 2  //明牌
	OddsChangeType_jiaodizhu   OddsChangeType = 3  //叫地主
	OddsChangeType_qiangdizhu  OddsChangeType = 4  //抢地主
	OddsChangeType_zhadan      OddsChangeType = 5  //炸弹
	OddsChangeType_chuntian    OddsChangeType = 6  //春天
	OddsChangeType_sanpai      OddsChangeType = 7  //地主牌是散牌
	OddsChangeType_duizi       OddsChangeType = 8  //地主牌是对子
	OddsChangeType_shunzi      OddsChangeType = 9  //地主牌是顺子
	OddsChangeType_tonghua     OddsChangeType = 10 //地主牌是同花
	OddsChangeType_xiaowang    OddsChangeType = 11 //地主牌是小王
	OddsChangeType_dawang      OddsChangeType = 12 //地主牌是大王
	OddsChangeType_baozi       OddsChangeType = 13 //地主牌是豹子
	OddsChangeType_rocket      OddsChangeType = 14 //火箭
	OddsChangeType_fanchuntian OddsChangeType = 15 //反春天
)

// Enum value maps for OddsChangeType.
var (
	OddsChangeType_name = map[int32]string{
		1:  "null",
		2:  "mingpai",
		3:  "jiaodizhu",
		4:  "qiangdizhu",
		5:  "zhadan",
		6:  "chuntian",
		7:  "sanpai",
		8:  "duizi",
		9:  "shunzi",
		10: "tonghua",
		11: "xiaowang",
		12: "dawang",
		13: "baozi",
		14: "rocket",
		15: "fanchuntian",
	}
	OddsChangeType_value = map[string]int32{
		"null":        1,
		"mingpai":     2,
		"jiaodizhu":   3,
		"qiangdizhu":  4,
		"zhadan":      5,
		"chuntian":    6,
		"sanpai":      7,
		"duizi":       8,
		"shunzi":      9,
		"tonghua":     10,
		"xiaowang":    11,
		"dawang":      12,
		"baozi":       13,
		"rocket":      14,
		"fanchuntian": 15,
	}
)

func (x OddsChangeType) Enum() *OddsChangeType {
	p := new(OddsChangeType)
	*p = x
	return p
}

func (x OddsChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OddsChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_DDZ_proto_enumTypes[2].Descriptor()
}

func (OddsChangeType) Type() protoreflect.EnumType {
	return &file_GameMsg_DDZ_proto_enumTypes[2]
}

func (x OddsChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OddsChangeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OddsChangeType(num)
	return nil
}

// Deprecated: Use OddsChangeType.Descriptor instead.
func (OddsChangeType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{2}
}

//牌对象定义
//黑桃  3
//红桃  2
//梅花  1
//方块  0
//大小王4
//皮子  5
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number *int32 `protobuf:"varint,1,req,name=Number" json:"Number,omitempty"` //点数
	Color  *int32 `protobuf:"varint,2,req,name=Color" json:"Color,omitempty"`   //花色
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *Card) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

//叫地主
type DDZ_JiaoDiZhu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsJiaoDiZhu *bool `protobuf:"varint,2,req,name=IsJiaoDiZhu" json:"IsJiaoDiZhu,omitempty"` //true 叫地主 false 不叫
}

func (x *DDZ_JiaoDiZhu) Reset() {
	*x = DDZ_JiaoDiZhu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_JiaoDiZhu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_JiaoDiZhu) ProtoMessage() {}

func (x *DDZ_JiaoDiZhu) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_JiaoDiZhu.ProtoReflect.Descriptor instead.
func (*DDZ_JiaoDiZhu) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{1}
}

func (x *DDZ_JiaoDiZhu) GetIsJiaoDiZhu() bool {
	if x != nil && x.IsJiaoDiZhu != nil {
		return *x.IsJiaoDiZhu
	}
	return false
}

//叫地主返回消息
type DDZ_JiaoDiZhuRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *DDZ_ErrorCode `protobuf:"varint,1,req,name=Code,enum=netproto.DDZ_ErrorCode" json:"Code,omitempty"` //错误id
	Msg  *string        `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`                                //错误描述
}

func (x *DDZ_JiaoDiZhuRet) Reset() {
	*x = DDZ_JiaoDiZhuRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_JiaoDiZhuRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_JiaoDiZhuRet) ProtoMessage() {}

func (x *DDZ_JiaoDiZhuRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_JiaoDiZhuRet.ProtoReflect.Descriptor instead.
func (*DDZ_JiaoDiZhuRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{2}
}

func (x *DDZ_JiaoDiZhuRet) GetCode() DDZ_ErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return DDZ_ErrorCode_OK
}

func (x *DDZ_JiaoDiZhuRet) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

//抢地主
type DDZ_QiangDiZhu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRob *bool `protobuf:"varint,2,req,name=IsRob" json:"IsRob,omitempty"` //true 抢 false 不抢
}

func (x *DDZ_QiangDiZhu) Reset() {
	*x = DDZ_QiangDiZhu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_QiangDiZhu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_QiangDiZhu) ProtoMessage() {}

func (x *DDZ_QiangDiZhu) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_QiangDiZhu.ProtoReflect.Descriptor instead.
func (*DDZ_QiangDiZhu) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{3}
}

func (x *DDZ_QiangDiZhu) GetIsRob() bool {
	if x != nil && x.IsRob != nil {
		return *x.IsRob
	}
	return false
}

//抢地主 返回消息
type DDZ_QiangDiZhuRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *DDZ_ErrorCode `protobuf:"varint,1,req,name=Code,enum=netproto.DDZ_ErrorCode" json:"Code,omitempty"` //错误id
	Msg  *string        `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`                                //错误描述
}

func (x *DDZ_QiangDiZhuRet) Reset() {
	*x = DDZ_QiangDiZhuRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_QiangDiZhuRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_QiangDiZhuRet) ProtoMessage() {}

func (x *DDZ_QiangDiZhuRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_QiangDiZhuRet.ProtoReflect.Descriptor instead.
func (*DDZ_QiangDiZhuRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{4}
}

func (x *DDZ_QiangDiZhuRet) GetCode() DDZ_ErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return DDZ_ErrorCode_OK
}

func (x *DDZ_QiangDiZhuRet) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

//明牌
type DDZ_MingPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMingPai *bool `protobuf:"varint,2,req,name=IsMingPai" json:"IsMingPai,omitempty"` //true明牌  false 不明牌
}

func (x *DDZ_MingPai) Reset() {
	*x = DDZ_MingPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_MingPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_MingPai) ProtoMessage() {}

func (x *DDZ_MingPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_MingPai.ProtoReflect.Descriptor instead.
func (*DDZ_MingPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{5}
}

func (x *DDZ_MingPai) GetIsMingPai() bool {
	if x != nil && x.IsMingPai != nil {
		return *x.IsMingPai
	}
	return false
}

//明牌 返回消息
type DDZ_MingPaiRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *DDZ_ErrorCode `protobuf:"varint,1,req,name=Code,enum=netproto.DDZ_ErrorCode" json:"Code,omitempty"` //错误id
	Msg  *string        `protobuf:"bytes,2,req,name=Msg" json:"Msg,omitempty"`                                //错误描述
}

func (x *DDZ_MingPaiRet) Reset() {
	*x = DDZ_MingPaiRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_MingPaiRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_MingPaiRet) ProtoMessage() {}

func (x *DDZ_MingPaiRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_MingPaiRet.ProtoReflect.Descriptor instead.
func (*DDZ_MingPaiRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{6}
}

func (x *DDZ_MingPaiRet) GetCode() DDZ_ErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return DDZ_ErrorCode_OK
}

func (x *DDZ_MingPaiRet) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

//出牌
type DDZ_ChuPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"` //用户选择的 要出的牌
}

func (x *DDZ_ChuPai) Reset() {
	*x = DDZ_ChuPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_ChuPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_ChuPai) ProtoMessage() {}

func (x *DDZ_ChuPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_ChuPai.ProtoReflect.Descriptor instead.
func (*DDZ_ChuPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{7}
}

func (x *DDZ_ChuPai) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

//出牌 返回消息
type DDZ_ChuPaiRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *DDZ_ErrorCode `protobuf:"varint,1,req,name=Code,enum=netproto.DDZ_ErrorCode" json:"Code,omitempty"` //错误id
	Msg  *string        `protobuf:"bytes,2,req,name=Msg" json:"Msg,omitempty"`                                //错误描述
}

func (x *DDZ_ChuPaiRet) Reset() {
	*x = DDZ_ChuPaiRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_ChuPaiRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_ChuPaiRet) ProtoMessage() {}

func (x *DDZ_ChuPaiRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_ChuPaiRet.ProtoReflect.Descriptor instead.
func (*DDZ_ChuPaiRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{8}
}

func (x *DDZ_ChuPaiRet) GetCode() DDZ_ErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return DDZ_ErrorCode_OK
}

func (x *DDZ_ChuPaiRet) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type DDZ_Pass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DDZ_Pass) Reset() {
	*x = DDZ_Pass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_Pass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_Pass) ProtoMessage() {}

func (x *DDZ_Pass) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_Pass.ProtoReflect.Descriptor instead.
func (*DDZ_Pass) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{9}
}

type DDZ_PassRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *DDZ_ErrorCode `protobuf:"varint,1,req,name=Code,enum=netproto.DDZ_ErrorCode" json:"Code,omitempty"` //错误id
	Msg  *string        `protobuf:"bytes,2,req,name=Msg" json:"Msg,omitempty"`                                //错误描述
}

func (x *DDZ_PassRet) Reset() {
	*x = DDZ_PassRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_PassRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_PassRet) ProtoMessage() {}

func (x *DDZ_PassRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_PassRet.ProtoReflect.Descriptor instead.
func (*DDZ_PassRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{10}
}

func (x *DDZ_PassRet) GetCode() DDZ_ErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return DDZ_ErrorCode_OK
}

func (x *DDZ_PassRet) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

//托管请求
type DDZ_TuoGuan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DDZ_TuoGuan) Reset() {
	*x = DDZ_TuoGuan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_TuoGuan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_TuoGuan) ProtoMessage() {}

func (x *DDZ_TuoGuan) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_TuoGuan.ProtoReflect.Descriptor instead.
func (*DDZ_TuoGuan) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{11}
}

//托管响应
type DDZ_TuoGuanRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *DDZ_ErrorCode `protobuf:"varint,1,req,name=Code,enum=netproto.DDZ_ErrorCode" json:"Code,omitempty"` //错误id
	Msg  *string        `protobuf:"bytes,2,req,name=Msg" json:"Msg,omitempty"`                                //错误描述
}

func (x *DDZ_TuoGuanRet) Reset() {
	*x = DDZ_TuoGuanRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_TuoGuanRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_TuoGuanRet) ProtoMessage() {}

func (x *DDZ_TuoGuanRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_TuoGuanRet.ProtoReflect.Descriptor instead.
func (*DDZ_TuoGuanRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{12}
}

func (x *DDZ_TuoGuanRet) GetCode() DDZ_ErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return DDZ_ErrorCode_OK
}

func (x *DDZ_TuoGuanRet) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

//其他玩家信息
type DDZ_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       *int32        `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"`
	SeatNo       *int32        `protobuf:"varint,2,req,name=SeatNo" json:"SeatNo,omitempty"`
	IsDiZhu      *bool         `protobuf:"varint,3,req,name=IsDiZhu" json:"IsDiZhu,omitempty"`                                      //是否是地主
	IsMingPai    *bool         `protobuf:"varint,4,req,name=IsMingPai" json:"IsMingPai,omitempty"`                                  //是否选择了明牌
	IsJiaoDiZhu  *UserActionDo `protobuf:"varint,5,req,name=IsJiaoDiZhu,enum=netproto.UserActionDo" json:"IsJiaoDiZhu,omitempty"`   //是否叫地主
	IsQiangDiZhu *UserActionDo `protobuf:"varint,6,req,name=IsQiangDiZhu,enum=netproto.UserActionDo" json:"IsQiangDiZhu,omitempty"` //是否抢地主
	CardsCount   *int32        `protobuf:"varint,7,req,name=CardsCount" json:"CardsCount,omitempty"`                                //手里牌的数量
	Cards        *CardArry     `protobuf:"bytes,8,opt,name=Cards" json:"Cards,omitempty"`                                           //当IsMingPai==true时 该字段存在 否则没有该字段
	IsTuoGuan    *bool         `protobuf:"varint,9,req,name=IsTuoGuan" json:"IsTuoGuan,omitempty"`                                  //是否托管
}

func (x *DDZ_PlayerInfo) Reset() {
	*x = DDZ_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_PlayerInfo) ProtoMessage() {}

func (x *DDZ_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_PlayerInfo.ProtoReflect.Descriptor instead.
func (*DDZ_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{13}
}

func (x *DDZ_PlayerInfo) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *DDZ_PlayerInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_PlayerInfo) GetIsDiZhu() bool {
	if x != nil && x.IsDiZhu != nil {
		return *x.IsDiZhu
	}
	return false
}

func (x *DDZ_PlayerInfo) GetIsMingPai() bool {
	if x != nil && x.IsMingPai != nil {
		return *x.IsMingPai
	}
	return false
}

func (x *DDZ_PlayerInfo) GetIsJiaoDiZhu() UserActionDo {
	if x != nil && x.IsJiaoDiZhu != nil {
		return *x.IsJiaoDiZhu
	}
	return UserActionDo_UANONE
}

func (x *DDZ_PlayerInfo) GetIsQiangDiZhu() UserActionDo {
	if x != nil && x.IsQiangDiZhu != nil {
		return *x.IsQiangDiZhu
	}
	return UserActionDo_UANONE
}

func (x *DDZ_PlayerInfo) GetCardsCount() int32 {
	if x != nil && x.CardsCount != nil {
		return *x.CardsCount
	}
	return 0
}

func (x *DDZ_PlayerInfo) GetCards() *CardArry {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DDZ_PlayerInfo) GetIsTuoGuan() bool {
	if x != nil && x.IsTuoGuan != nil {
		return *x.IsTuoGuan
	}
	return false
}

type DDZ_SendCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo       *int32    `protobuf:"varint,1,opt,name=SeatNo" json:"SeatNo,omitempty"`
	SendType     *int32    `protobuf:"varint,2,opt,name=SendType" json:"SendType,omitempty"`        //0 表示不要 1 表示要 2不处理
	SendOutCards *CardArry `protobuf:"bytes,3,opt,name=SendOutCards" json:"SendOutCards,omitempty"` //当SendType为0 时 该字段不存在
}

func (x *DDZ_SendCardInfo) Reset() {
	*x = DDZ_SendCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_SendCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_SendCardInfo) ProtoMessage() {}

func (x *DDZ_SendCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_SendCardInfo.ProtoReflect.Descriptor instead.
func (*DDZ_SendCardInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{14}
}

func (x *DDZ_SendCardInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_SendCardInfo) GetSendType() int32 {
	if x != nil && x.SendType != nil {
		return *x.SendType
	}
	return 0
}

func (x *DDZ_SendCardInfo) GetSendOutCards() *CardArry {
	if x != nil {
		return x.SendOutCards
	}
	return nil
}

//断线重连后恢复场景
type DDZ_UserRecoverRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        *int32              `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"`
	GameStep      *int32              `protobuf:"varint,2,req,name=GameStep" json:"GameStep,omitempty"`       //游戏进度（阶段）
	Odds          *int32              `protobuf:"varint,3,req,name=Odds" json:"Odds,omitempty"`               //当前总倍率
	OptSeat       *int32              `protobuf:"varint,4,req,name=OptSeat" json:"OptSeat,omitempty"`         //当前该操作的玩家座位
	OptLastTime   *int32              `protobuf:"varint,5,req,name=OptLastTime" json:"OptLastTime,omitempty"` //当前操作玩家剩余超时时间
	DiZhuSeat     *int32              `protobuf:"varint,6,req,name=DiZhuSeat" json:"DiZhuSeat,omitempty"`
	Opi           []*DDZ_PlayerInfo   `protobuf:"bytes,7,rep,name=Opi" json:"Opi,omitempty"`                      //其余两家玩家信息
	DiZhuCards    *CardArry           `protobuf:"bytes,8,opt,name=DiZhuCards" json:"DiZhuCards,omitempty"`        //GameStep>=3（发牌阶段）
	DiZhuCardType *int32              `protobuf:"varint,9,opt,name=DiZhuCardType" json:"DiZhuCardType,omitempty"` //地主牌牌型
	Sci           []*DDZ_SendCardInfo `protobuf:"bytes,10,rep,name=Sci" json:"Sci,omitempty"`
	IsSendCard    *bool               `protobuf:"varint,11,req,name=IsSendCard" json:"IsSendCard,omitempty"`   //是否有人出过牌
	Calculation   *int32              `protobuf:"varint,12,req,name=Calculation" json:"Calculation,omitempty"` //0加法 1乘法
}

func (x *DDZ_UserRecoverRet) Reset() {
	*x = DDZ_UserRecoverRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_UserRecoverRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_UserRecoverRet) ProtoMessage() {}

func (x *DDZ_UserRecoverRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_UserRecoverRet.ProtoReflect.Descriptor instead.
func (*DDZ_UserRecoverRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{15}
}

func (x *DDZ_UserRecoverRet) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *DDZ_UserRecoverRet) GetGameStep() int32 {
	if x != nil && x.GameStep != nil {
		return *x.GameStep
	}
	return 0
}

func (x *DDZ_UserRecoverRet) GetOdds() int32 {
	if x != nil && x.Odds != nil {
		return *x.Odds
	}
	return 0
}

func (x *DDZ_UserRecoverRet) GetOptSeat() int32 {
	if x != nil && x.OptSeat != nil {
		return *x.OptSeat
	}
	return 0
}

func (x *DDZ_UserRecoverRet) GetOptLastTime() int32 {
	if x != nil && x.OptLastTime != nil {
		return *x.OptLastTime
	}
	return 0
}

func (x *DDZ_UserRecoverRet) GetDiZhuSeat() int32 {
	if x != nil && x.DiZhuSeat != nil {
		return *x.DiZhuSeat
	}
	return 0
}

func (x *DDZ_UserRecoverRet) GetOpi() []*DDZ_PlayerInfo {
	if x != nil {
		return x.Opi
	}
	return nil
}

func (x *DDZ_UserRecoverRet) GetDiZhuCards() *CardArry {
	if x != nil {
		return x.DiZhuCards
	}
	return nil
}

func (x *DDZ_UserRecoverRet) GetDiZhuCardType() int32 {
	if x != nil && x.DiZhuCardType != nil {
		return *x.DiZhuCardType
	}
	return 0
}

func (x *DDZ_UserRecoverRet) GetSci() []*DDZ_SendCardInfo {
	if x != nil {
		return x.Sci
	}
	return nil
}

func (x *DDZ_UserRecoverRet) GetIsSendCard() bool {
	if x != nil && x.IsSendCard != nil {
		return *x.IsSendCard
	}
	return false
}

func (x *DDZ_UserRecoverRet) GetCalculation() int32 {
	if x != nil && x.Calculation != nil {
		return *x.Calculation
	}
	return 0
}

//广播类型消息 游戏进度
type DDZ_NotifyGameStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *int32 `protobuf:"varint,1,req,name=Step" json:"Step,omitempty"` //1 初始状态, 2 游戏开始, 3 发牌阶段, 4 叫牌, 5 抢地主, 6 明牌, 7出牌, 8 结束结算
}

func (x *DDZ_NotifyGameStep) Reset() {
	*x = DDZ_NotifyGameStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyGameStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyGameStep) ProtoMessage() {}

func (x *DDZ_NotifyGameStep) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyGameStep.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyGameStep) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{16}
}

func (x *DDZ_NotifyGameStep) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

//广播类型消息 当前进度timer时间广播
type DDZ_NotifyGameTimeOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo  *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`   //当前是哪个玩家正在操作 椅子号
	TimeOut *int32 `protobuf:"varint,2,req,name=TimeOut" json:"TimeOut,omitempty"` //暂停时间
}

func (x *DDZ_NotifyGameTimeOut) Reset() {
	*x = DDZ_NotifyGameTimeOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyGameTimeOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyGameTimeOut) ProtoMessage() {}

func (x *DDZ_NotifyGameTimeOut) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyGameTimeOut.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyGameTimeOut) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{17}
}

func (x *DDZ_NotifyGameTimeOut) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_NotifyGameTimeOut) GetTimeOut() int32 {
	if x != nil && x.TimeOut != nil {
		return *x.TimeOut
	}
	return 0
}

//广播类型消息 叫地主
type DDZ_NotifyJiaoDiZhu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo      *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`           //当前是哪个玩家正在操作
	IsJiaoDiZhu *bool  `protobuf:"varint,2,req,name=IsJiaoDiZhu" json:"IsJiaoDiZhu,omitempty"` //是否叫地主
}

func (x *DDZ_NotifyJiaoDiZhu) Reset() {
	*x = DDZ_NotifyJiaoDiZhu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyJiaoDiZhu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyJiaoDiZhu) ProtoMessage() {}

func (x *DDZ_NotifyJiaoDiZhu) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyJiaoDiZhu.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyJiaoDiZhu) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{18}
}

func (x *DDZ_NotifyJiaoDiZhu) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_NotifyJiaoDiZhu) GetIsJiaoDiZhu() bool {
	if x != nil && x.IsJiaoDiZhu != nil {
		return *x.IsJiaoDiZhu
	}
	return false
}

//广播类型消息 抢地主
type DDZ_NotifyQiangDiZhu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo  *int32 `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`   //当前是哪个玩家正在操作
	IsQiang *bool  `protobuf:"varint,2,req,name=IsQiang" json:"IsQiang,omitempty"` //是否抢地主
}

func (x *DDZ_NotifyQiangDiZhu) Reset() {
	*x = DDZ_NotifyQiangDiZhu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyQiangDiZhu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyQiangDiZhu) ProtoMessage() {}

func (x *DDZ_NotifyQiangDiZhu) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyQiangDiZhu.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyQiangDiZhu) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{19}
}

func (x *DDZ_NotifyQiangDiZhu) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_NotifyQiangDiZhu) GetIsQiang() bool {
	if x != nil && x.IsQiang != nil {
		return *x.IsQiang
	}
	return false
}

//明牌对象定义
type CardArry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"`
}

func (x *CardArry) Reset() {
	*x = CardArry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardArry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardArry) ProtoMessage() {}

func (x *CardArry) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardArry.ProtoReflect.Descriptor instead.
func (*CardArry) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{20}
}

func (x *CardArry) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

//广播类型消息 明牌
type DDZ_NotifyMingPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32    `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"` //明牌操作是由哪个玩家发出的
	IsMing *bool     `protobuf:"varint,2,req,name=IsMing" json:"IsMing,omitempty"` //是否明牌  true 明牌 false 不明牌
	Mpcs   *CardArry `protobuf:"bytes,3,opt,name=Mpcs" json:"Mpcs,omitempty"`      //在IsMing为true时 有值 是该玩家手牌详情
}

func (x *DDZ_NotifyMingPai) Reset() {
	*x = DDZ_NotifyMingPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyMingPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyMingPai) ProtoMessage() {}

func (x *DDZ_NotifyMingPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyMingPai.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyMingPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{21}
}

func (x *DDZ_NotifyMingPai) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_NotifyMingPai) GetIsMing() bool {
	if x != nil && x.IsMing != nil {
		return *x.IsMing
	}
	return false
}

func (x *DDZ_NotifyMingPai) GetMpcs() *CardArry {
	if x != nil {
		return x.Mpcs
	}
	return nil
}

//广播类型消息 出牌
type DDZ_NotifyChuPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo          *int32    `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`                   //出牌操作是由哪个玩家发出的
	CardType        *int32    `protobuf:"varint,2,req,name=CardType" json:"CardType,omitempty"`               //牌型
	MainCards       *int32    `protobuf:"varint,3,req,name=MainCards" json:"MainCards,omitempty"`             //主牌副数
	MainCardsNumber *int32    `protobuf:"varint,4,req,name=MainCardsNumber" json:"MainCardsNumber,omitempty"` //主牌点数
	CurOdds         *int32    `protobuf:"varint,5,req,name=CurOdds" json:"CurOdds,omitempty"`                 //当前出牌倍率
	Cards           *CardArry `protobuf:"bytes,6,opt,name=Cards" json:"Cards,omitempty"`                      //玩家出牌详情
}

func (x *DDZ_NotifyChuPai) Reset() {
	*x = DDZ_NotifyChuPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyChuPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyChuPai) ProtoMessage() {}

func (x *DDZ_NotifyChuPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyChuPai.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyChuPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{22}
}

func (x *DDZ_NotifyChuPai) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_NotifyChuPai) GetCardType() int32 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

func (x *DDZ_NotifyChuPai) GetMainCards() int32 {
	if x != nil && x.MainCards != nil {
		return *x.MainCards
	}
	return 0
}

func (x *DDZ_NotifyChuPai) GetMainCardsNumber() int32 {
	if x != nil && x.MainCardsNumber != nil {
		return *x.MainCardsNumber
	}
	return 0
}

func (x *DDZ_NotifyChuPai) GetCurOdds() int32 {
	if x != nil && x.CurOdds != nil {
		return *x.CurOdds
	}
	return 0
}

func (x *DDZ_NotifyChuPai) GetCards() *CardArry {
	if x != nil {
		return x.Cards
	}
	return nil
}

//广播类型消息  发牌
type DDZ_NotifyFaPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo *int32    `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"` //发牌给哪个玩家
	Cards  *CardArry `protobuf:"bytes,2,opt,name=Cards" json:"Cards,omitempty"`    //发牌详情
}

func (x *DDZ_NotifyFaPai) Reset() {
	*x = DDZ_NotifyFaPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyFaPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyFaPai) ProtoMessage() {}

func (x *DDZ_NotifyFaPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyFaPai.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyFaPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{23}
}

func (x *DDZ_NotifyFaPai) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_NotifyFaPai) GetCards() *CardArry {
	if x != nil {
		return x.Cards
	}
	return nil
}

//广播类型消息  抢地主结果
type DDZ_NotifyDizhuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNo      *int32    `protobuf:"varint,1,req,name=SeatNo" json:"SeatNo,omitempty"`           //地主id
	Cards       *CardArry `protobuf:"bytes,2,req,name=Cards" json:"Cards,omitempty"`              //地主牌
	Calculation *int32    `protobuf:"varint,3,req,name=Calculation" json:"Calculation,omitempty"` //0加法 1乘法
}

func (x *DDZ_NotifyDizhuInfo) Reset() {
	*x = DDZ_NotifyDizhuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyDizhuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyDizhuInfo) ProtoMessage() {}

func (x *DDZ_NotifyDizhuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyDizhuInfo.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyDizhuInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{24}
}

func (x *DDZ_NotifyDizhuInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *DDZ_NotifyDizhuInfo) GetCards() *CardArry {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DDZ_NotifyDizhuInfo) GetCalculation() int32 {
	if x != nil && x.Calculation != nil {
		return *x.Calculation
	}
	return 0
}

//广播类型消息 房间基本信息
type DDZ_NotifyRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Odds    *int32 `protobuf:"varint,1,req,name=Odds" json:"Odds,omitempty"`       //总倍率
	NowOdds *int32 `protobuf:"varint,2,req,name=NowOdds" json:"NowOdds,omitempty"` //当前总倍率
	Oct     *int32 `protobuf:"varint,3,req,name=oct" json:"oct,omitempty"`         //引起倍率改变的原因
}

func (x *DDZ_NotifyRoomInfo) Reset() {
	*x = DDZ_NotifyRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyRoomInfo) ProtoMessage() {}

func (x *DDZ_NotifyRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyRoomInfo.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyRoomInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{25}
}

func (x *DDZ_NotifyRoomInfo) GetOdds() int32 {
	if x != nil && x.Odds != nil {
		return *x.Odds
	}
	return 0
}

func (x *DDZ_NotifyRoomInfo) GetNowOdds() int32 {
	if x != nil && x.NowOdds != nil {
		return *x.NowOdds
	}
	return 0
}

func (x *DDZ_NotifyRoomInfo) GetOct() int32 {
	if x != nil && x.Oct != nil {
		return *x.Oct
	}
	return 0
}

//单个玩家结算详情
type DDZ_ResultRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     *int32    `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"`
	Money      *int32    `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
	IsDiZhu    *bool     `protobuf:"varint,3,req,name=IsDiZhu" json:"IsDiZhu,omitempty"`
	Bankruptcy *bool     `protobuf:"varint,4,req,name=Bankruptcy" json:"Bankruptcy,omitempty"` //是否破产
	Cards      *CardArry `protobuf:"bytes,5,req,name=cards" json:"cards,omitempty"`
	NickName   *string   `protobuf:"bytes,6,req,name=NickName" json:"NickName,omitempty"` //昵称
}

func (x *DDZ_ResultRecord) Reset() {
	*x = DDZ_ResultRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_ResultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_ResultRecord) ProtoMessage() {}

func (x *DDZ_ResultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_ResultRecord.ProtoReflect.Descriptor instead.
func (*DDZ_ResultRecord) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{26}
}

func (x *DDZ_ResultRecord) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *DDZ_ResultRecord) GetMoney() int32 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *DDZ_ResultRecord) GetIsDiZhu() bool {
	if x != nil && x.IsDiZhu != nil {
		return *x.IsDiZhu
	}
	return false
}

func (x *DDZ_ResultRecord) GetBankruptcy() bool {
	if x != nil && x.Bankruptcy != nil {
		return *x.Bankruptcy
	}
	return false
}

func (x *DDZ_ResultRecord) GetCards() *CardArry {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DDZ_ResultRecord) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

//广播类型消息 结算
type DDZ_NotifySettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseScore         *int32              `protobuf:"varint,1,req,name=BaseScore" json:"BaseScore,omitempty"`                 //底分
	JiaoDiZhuOdds     *int32              `protobuf:"varint,3,req,name=JiaoDiZhuOdds" json:"JiaoDiZhuOdds,omitempty"`         //叫地主 倍率信息
	QiangDiZhuOdds    *int32              `protobuf:"varint,4,req,name=QiangDiZhuOdds" json:"QiangDiZhuOdds,omitempty"`       //抢地主 倍率信息
	DiZhuCardTypeOdds *int32              `protobuf:"varint,5,req,name=DiZhuCardTypeOdds" json:"DiZhuCardTypeOdds,omitempty"` //地主牌 牌型倍率
	ZhaDanOdds        *int32              `protobuf:"varint,6,req,name=ZhaDanOdds" json:"ZhaDanOdds,omitempty"`               //炸弹翻倍倍率
	ChunTianOdds      *int32              `protobuf:"varint,7,req,name=ChunTianOdds" json:"ChunTianOdds,omitempty"`           //春天倍率
	MingPaiOdds       *int32              `protobuf:"varint,8,req,name=MingPaiOdds" json:"MingPaiOdds,omitempty"`             //明牌倍率
	TotalOdds         *int32              `protobuf:"varint,9,req,name=TotalOdds" json:"TotalOdds,omitempty"`                 //总倍率
	WinSeat           *int32              `protobuf:"varint,10,req,name=WinSeat" json:"WinSeat,omitempty"`                    //赢家椅子号
	Settlement        []*DDZ_ResultRecord `protobuf:"bytes,11,rep,name=Settlement" json:"Settlement,omitempty"`
	Rocket            *int32              `protobuf:"varint,12,opt,name=Rocket" json:"Rocket,omitempty"`                   //火箭倍率
	Calculation       *int32              `protobuf:"varint,13,req,name=Calculation" json:"Calculation,omitempty"`         //0加法 1乘法
	FanChunTianOdds   *int32              `protobuf:"varint,14,req,name=FanChunTianOdds" json:"FanChunTianOdds,omitempty"` //春天倍率
}

func (x *DDZ_NotifySettlement) Reset() {
	*x = DDZ_NotifySettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifySettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifySettlement) ProtoMessage() {}

func (x *DDZ_NotifySettlement) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifySettlement.ProtoReflect.Descriptor instead.
func (*DDZ_NotifySettlement) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{27}
}

func (x *DDZ_NotifySettlement) GetBaseScore() int32 {
	if x != nil && x.BaseScore != nil {
		return *x.BaseScore
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetJiaoDiZhuOdds() int32 {
	if x != nil && x.JiaoDiZhuOdds != nil {
		return *x.JiaoDiZhuOdds
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetQiangDiZhuOdds() int32 {
	if x != nil && x.QiangDiZhuOdds != nil {
		return *x.QiangDiZhuOdds
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetDiZhuCardTypeOdds() int32 {
	if x != nil && x.DiZhuCardTypeOdds != nil {
		return *x.DiZhuCardTypeOdds
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetZhaDanOdds() int32 {
	if x != nil && x.ZhaDanOdds != nil {
		return *x.ZhaDanOdds
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetChunTianOdds() int32 {
	if x != nil && x.ChunTianOdds != nil {
		return *x.ChunTianOdds
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetMingPaiOdds() int32 {
	if x != nil && x.MingPaiOdds != nil {
		return *x.MingPaiOdds
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetTotalOdds() int32 {
	if x != nil && x.TotalOdds != nil {
		return *x.TotalOdds
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetWinSeat() int32 {
	if x != nil && x.WinSeat != nil {
		return *x.WinSeat
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetSettlement() []*DDZ_ResultRecord {
	if x != nil {
		return x.Settlement
	}
	return nil
}

func (x *DDZ_NotifySettlement) GetRocket() int32 {
	if x != nil && x.Rocket != nil {
		return *x.Rocket
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetCalculation() int32 {
	if x != nil && x.Calculation != nil {
		return *x.Calculation
	}
	return 0
}

func (x *DDZ_NotifySettlement) GetFanChunTianOdds() int32 {
	if x != nil && x.FanChunTianOdds != nil {
		return *x.FanChunTianOdds
	}
	return 0
}

//广播类型消息 玩家托管
type DDZ_NotifyTuoGuan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSeat *int32 `protobuf:"varint,1,req,name=UserSeat" json:"UserSeat,omitempty"` //托管的玩家id
	State    *bool  `protobuf:"varint,2,req,name=State" json:"State,omitempty"`       //是否托管 true 托管 false 取消托管
}

func (x *DDZ_NotifyTuoGuan) Reset() {
	*x = DDZ_NotifyTuoGuan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyTuoGuan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyTuoGuan) ProtoMessage() {}

func (x *DDZ_NotifyTuoGuan) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyTuoGuan.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyTuoGuan) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{28}
}

func (x *DDZ_NotifyTuoGuan) GetUserSeat() int32 {
	if x != nil && x.UserSeat != nil {
		return *x.UserSeat
	}
	return 0
}

func (x *DDZ_NotifyTuoGuan) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

//广播桌子配置消息
type DDZ_NotifyDeskCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difen   *int32 `protobuf:"varint,1,req,name=Difen" json:"Difen,omitempty"`     //桌子底分
	TimeOut *int32 `protobuf:"varint,2,req,name=TimeOut" json:"TimeOut,omitempty"` //一局结束后客户端超时返回时间
	Odds    *int32 `protobuf:"varint,3,req,name=Odds" json:"Odds,omitempty"`       //基础倍数 默认为1
	MaxOdd  *int32 `protobuf:"varint,4,req,name=MaxOdd" json:"MaxOdd,omitempty"`   //封顶倍数
}

func (x *DDZ_NotifyDeskCfg) Reset() {
	*x = DDZ_NotifyDeskCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_NotifyDeskCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_NotifyDeskCfg) ProtoMessage() {}

func (x *DDZ_NotifyDeskCfg) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_NotifyDeskCfg.ProtoReflect.Descriptor instead.
func (*DDZ_NotifyDeskCfg) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{29}
}

func (x *DDZ_NotifyDeskCfg) GetDifen() int32 {
	if x != nil && x.Difen != nil {
		return *x.Difen
	}
	return 0
}

func (x *DDZ_NotifyDeskCfg) GetTimeOut() int32 {
	if x != nil && x.TimeOut != nil {
		return *x.TimeOut
	}
	return 0
}

func (x *DDZ_NotifyDeskCfg) GetOdds() int32 {
	if x != nil && x.Odds != nil {
		return *x.Odds
	}
	return 0
}

func (x *DDZ_NotifyDeskCfg) GetMaxOdd() int32 {
	if x != nil && x.MaxOdd != nil {
		return *x.MaxOdd
	}
	return 0
}

//是否開啟玩家計牌器功能
type DDZ_EnableUserChiPaiChi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *bool `protobuf:"varint,1,req,name=Status" json:"Status,omitempty"`
}

func (x *DDZ_EnableUserChiPaiChi) Reset() {
	*x = DDZ_EnableUserChiPaiChi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_EnableUserChiPaiChi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_EnableUserChiPaiChi) ProtoMessage() {}

func (x *DDZ_EnableUserChiPaiChi) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_EnableUserChiPaiChi.ProtoReflect.Descriptor instead.
func (*DDZ_EnableUserChiPaiChi) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{30}
}

func (x *DDZ_EnableUserChiPaiChi) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

//計牌器資料:剩餘牌紀錄, 上下家出牌紀錄
type DDZ_ChiPaiChiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShengYuPai []*Card            `protobuf:"bytes,1,rep,name=ShengYuPai" json:"ShengYuPai,omitempty"` //剩餘牌紀錄
	ShangChia  []*DDZ_ChuPaiChiLu `protobuf:"bytes,2,rep,name=ShangChia" json:"ShangChia,omitempty"`   //上家出牌紀錄
	HsiaChia   []*DDZ_ChuPaiChiLu `protobuf:"bytes,3,rep,name=HsiaChia" json:"HsiaChia,omitempty"`     //下家出牌紀錄
}

func (x *DDZ_ChiPaiChiInfo) Reset() {
	*x = DDZ_ChiPaiChiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_ChiPaiChiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_ChiPaiChiInfo) ProtoMessage() {}

func (x *DDZ_ChiPaiChiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_ChiPaiChiInfo.ProtoReflect.Descriptor instead.
func (*DDZ_ChiPaiChiInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{31}
}

func (x *DDZ_ChiPaiChiInfo) GetShengYuPai() []*Card {
	if x != nil {
		return x.ShengYuPai
	}
	return nil
}

func (x *DDZ_ChiPaiChiInfo) GetShangChia() []*DDZ_ChuPaiChiLu {
	if x != nil {
		return x.ShangChia
	}
	return nil
}

func (x *DDZ_ChiPaiChiInfo) GetHsiaChia() []*DDZ_ChuPaiChiLu {
	if x != nil {
		return x.HsiaChia
	}
	return nil
}

//出牌紀錄
type DDZ_ChuPaiChiLu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards  []*Card `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"` //用户出過的牌
	SeatNo *int32  `protobuf:"varint,2,req,name=SeatNo" json:"SeatNo,omitempty"`
}

func (x *DDZ_ChuPaiChiLu) Reset() {
	*x = DDZ_ChuPaiChiLu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_DDZ_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDZ_ChuPaiChiLu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDZ_ChuPaiChiLu) ProtoMessage() {}

func (x *DDZ_ChuPaiChiLu) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_DDZ_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDZ_ChuPaiChiLu.ProtoReflect.Descriptor instead.
func (*DDZ_ChuPaiChiLu) Descriptor() ([]byte, []int) {
	return file_GameMsg_DDZ_proto_rawDescGZIP(), []int{32}
}

func (x *DDZ_ChuPaiChiLu) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DDZ_ChuPaiChiLu) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

var File_GameMsg_DDZ_proto protoreflect.FileDescriptor

var file_GameMsg_DDZ_proto_rawDesc = []byte{
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x44, 0x5a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x31, 0x0a, 0x0d, 0x44, 0x44, 0x5a, 0x5f, 0x4a, 0x69, 0x61, 0x6f, 0x44,
	0x69, 0x5a, 0x68, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4a, 0x69, 0x61, 0x6f, 0x44, 0x69,
	0x5a, 0x68, 0x75, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4a, 0x69, 0x61,
	0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x22, 0x51, 0x0a, 0x10, 0x44, 0x44, 0x5a, 0x5f, 0x4a, 0x69,
	0x61, 0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x52, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x26, 0x0a, 0x0e, 0x44, 0x44, 0x5a,
	0x5f, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x73, 0x52, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x52, 0x6f,
	0x62, 0x22, 0x52, 0x0a, 0x11, 0x44, 0x44, 0x5a, 0x5f, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x44, 0x69,
	0x5a, 0x68, 0x75, 0x52, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x44, 0x5a, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x2b, 0x0a, 0x0b, 0x44, 0x44, 0x5a, 0x5f, 0x4d, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4d, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x69, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x69, 0x22, 0x4f, 0x0a, 0x0e, 0x44, 0x44, 0x5a, 0x5f, 0x4d, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x69, 0x52, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44,
	0x5a, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03,
	0x4d, 0x73, 0x67, 0x22, 0x32, 0x0a, 0x0a, 0x44, 0x44, 0x5a, 0x5f, 0x43, 0x68, 0x75, 0x50, 0x61,
	0x69, 0x12, 0x24, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x0d, 0x44, 0x44, 0x5a, 0x5f, 0x43,
	0x68, 0x75, 0x50, 0x61, 0x69, 0x52, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x0a, 0x0a, 0x08, 0x44, 0x44, 0x5a, 0x5f, 0x50,
	0x61, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x0b, 0x44, 0x44, 0x5a, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x44, 0x5a, 0x5f, 0x54, 0x75, 0x6f, 0x47, 0x75, 0x61, 0x6e,
	0x22, 0x4f, 0x0a, 0x0e, 0x44, 0x44, 0x5a, 0x5f, 0x54, 0x75, 0x6f, 0x47, 0x75, 0x61, 0x6e, 0x52,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x22, 0xd6, 0x02, 0x0a, 0x0e, 0x44, 0x44, 0x5a, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x4d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x12, 0x38, 0x0a, 0x0b,
	0x49, 0x73, 0x4a, 0x69, 0x61, 0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x52, 0x0b, 0x49, 0x73, 0x4a, 0x69, 0x61,
	0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x73, 0x51, 0x69, 0x61, 0x6e,
	0x67, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x52, 0x0c, 0x49, 0x73, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x44, 0x69, 0x5a,
	0x68, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x79, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x73, 0x54, 0x75, 0x6f, 0x47, 0x75, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x09, 0x49, 0x73, 0x54, 0x75, 0x6f, 0x47, 0x75, 0x61, 0x6e, 0x22, 0x7e, 0x0a, 0x10, 0x44, 0x44,
	0x5a, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x41, 0x72, 0x72, 0x79, 0x52, 0x0c, 0x53, 0x65,
	0x6e, 0x64, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x12, 0x44,
	0x44, 0x5a, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x53, 0x65,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x53,
	0x65, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x4f, 0x70, 0x69, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x4f, 0x70, 0x69, 0x12,
	0x32, 0x0a, 0x0a, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x72, 0x72, 0x79, 0x52, 0x0a, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x69, 0x5a, 0x68,
	0x75, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x53, 0x63, 0x69,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x53, 0x63, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x12, 0x44, 0x44, 0x5a,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x74, 0x65, 0x70, 0x22, 0x49, 0x0a, 0x15, 0x44, 0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x4f,
	0x0a, 0x13, 0x44, 0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4a, 0x69, 0x61, 0x6f,
	0x44, 0x69, 0x5a, 0x68, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x73, 0x4a, 0x69, 0x61, 0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4a, 0x69, 0x61, 0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x22,
	0x48, 0x0a, 0x14, 0x44, 0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x51, 0x69, 0x61,
	0x6e, 0x67, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x22, 0x30, 0x0a, 0x08, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x11, 0x44,
	0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4d, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4d, 0x69, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x04, 0x4d, 0x70, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x79, 0x52, 0x04, 0x4d, 0x70, 0x63, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x44, 0x44, 0x5a,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x75, 0x50, 0x61, 0x69, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x72,
	0x4f, 0x64, 0x64, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x75, 0x72, 0x4f,
	0x64, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x79, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x53, 0x0a,
	0x0f, 0x44, 0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x61, 0x50, 0x61, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x41, 0x72, 0x72, 0x79, 0x52, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x44, 0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x44, 0x69, 0x7a, 0x68, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x12, 0x28, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x79, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a,
	0x12, 0x44, 0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x77, 0x4f, 0x64,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x6f, 0x77, 0x4f, 0x64, 0x64,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x63, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x6f, 0x63, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x44, 0x44, 0x5a, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x44, 0x69, 0x5a, 0x68,
	0x75, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x44, 0x69, 0x5a, 0x68, 0x75,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x63, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x79, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x14, 0x44, 0x44, 0x5a, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x4a, 0x69, 0x61, 0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x4a, 0x69, 0x61, 0x6f, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x4f,
	0x64, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x44, 0x69, 0x5a, 0x68,
	0x75, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x51, 0x69, 0x61,
	0x6e, 0x67, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44,
	0x69, 0x5a, 0x68, 0x75, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x11, 0x44, 0x69, 0x5a, 0x68, 0x75, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x5a, 0x68, 0x61,
	0x44, 0x61, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x5a,
	0x68, 0x61, 0x44, 0x61, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x75,
	0x6e, 0x54, 0x69, 0x61, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x68, 0x75, 0x6e, 0x54, 0x69, 0x61, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x4f, 0x64, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x57, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x57, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x46, 0x61, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x54, 0x69, 0x61, 0x6e, 0x4f, 0x64, 0x64, 0x73,
	0x18, 0x0e, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x46, 0x61, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x54,
	0x69, 0x61, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x11, 0x44, 0x44, 0x5a, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x75, 0x6f, 0x47, 0x75, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6f,
	0x0a, 0x11, 0x44, 0x44, 0x5a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x6b,
	0x43, 0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x66, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x66, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x4f, 0x64,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x4f, 0x64, 0x64, 0x22,
	0x31, 0x0a, 0x17, 0x44, 0x44, 0x5a, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x69, 0x50, 0x61, 0x69, 0x43, 0x68, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x44, 0x44, 0x5a, 0x5f, 0x43, 0x68, 0x69, 0x50, 0x61,
	0x69, 0x43, 0x68, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x53, 0x68, 0x65, 0x6e,
	0x67, 0x59, 0x75, 0x50, 0x61, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x53, 0x68,
	0x65, 0x6e, 0x67, 0x59, 0x75, 0x50, 0x61, 0x69, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x6e,
	0x67, 0x43, 0x68, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x5a, 0x5f, 0x43, 0x68, 0x75, 0x50, 0x61,
	0x69, 0x43, 0x68, 0x69, 0x4c, 0x75, 0x52, 0x09, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x43, 0x68, 0x69,
	0x61, 0x12, 0x35, 0x0a, 0x08, 0x48, 0x73, 0x69, 0x61, 0x43, 0x68, 0x69, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x44, 0x5a, 0x5f, 0x43, 0x68, 0x75, 0x50, 0x61, 0x69, 0x43, 0x68, 0x69, 0x4c, 0x75, 0x52, 0x08,
	0x48, 0x73, 0x69, 0x61, 0x43, 0x68, 0x69, 0x61, 0x22, 0x4f, 0x0a, 0x0f, 0x44, 0x44, 0x5a, 0x5f,
	0x43, 0x68, 0x75, 0x50, 0x61, 0x69, 0x43, 0x68, 0x69, 0x4c, 0x75, 0x12, 0x24, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x2a, 0x21, 0x0a, 0x0d, 0x44, 0x44, 0x5a,
	0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x41, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x41, 0x4e, 0x4f,
	0x54, 0x44, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x41, 0x44, 0x4f, 0x10, 0x03, 0x2a,
	0xd2, 0x01, 0x0a, 0x0e, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x69, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x6a, 0x69, 0x61,
	0x6f, 0x64, 0x69, 0x7a, 0x68, 0x75, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x71, 0x69, 0x61, 0x6e,
	0x67, 0x64, 0x69, 0x7a, 0x68, 0x75, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x7a, 0x68, 0x61, 0x64,
	0x61, 0x6e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x61, 0x6e,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x61, 0x6e, 0x70, 0x61, 0x69, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x64, 0x75, 0x69, 0x7a, 0x69, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x68, 0x75,
	0x6e, 0x7a, 0x69, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x6f, 0x6e, 0x67, 0x68, 0x75, 0x61,
	0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x78, 0x69, 0x61, 0x6f, 0x77, 0x61, 0x6e, 0x67, 0x10, 0x0b,
	0x12, 0x0a, 0x0a, 0x06, 0x64, 0x61, 0x77, 0x61, 0x6e, 0x67, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05,
	0x62, 0x61, 0x6f, 0x7a, 0x69, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x74, 0x69,
	0x61, 0x6e, 0x10, 0x0f, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f,
}

var (
	file_GameMsg_DDZ_proto_rawDescOnce sync.Once
	file_GameMsg_DDZ_proto_rawDescData = file_GameMsg_DDZ_proto_rawDesc
)

func file_GameMsg_DDZ_proto_rawDescGZIP() []byte {
	file_GameMsg_DDZ_proto_rawDescOnce.Do(func() {
		file_GameMsg_DDZ_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_DDZ_proto_rawDescData)
	})
	return file_GameMsg_DDZ_proto_rawDescData
}

var file_GameMsg_DDZ_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_GameMsg_DDZ_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_GameMsg_DDZ_proto_goTypes = []interface{}{
	(DDZ_ErrorCode)(0),              // 0: netproto.DDZ_ErrorCode
	(UserActionDo)(0),               // 1: netproto.UserActionDo
	(OddsChangeType)(0),             // 2: netproto.OddsChangeType
	(*Card)(nil),                    // 3: netproto.Card
	(*DDZ_JiaoDiZhu)(nil),           // 4: netproto.DDZ_JiaoDiZhu
	(*DDZ_JiaoDiZhuRet)(nil),        // 5: netproto.DDZ_JiaoDiZhuRet
	(*DDZ_QiangDiZhu)(nil),          // 6: netproto.DDZ_QiangDiZhu
	(*DDZ_QiangDiZhuRet)(nil),       // 7: netproto.DDZ_QiangDiZhuRet
	(*DDZ_MingPai)(nil),             // 8: netproto.DDZ_MingPai
	(*DDZ_MingPaiRet)(nil),          // 9: netproto.DDZ_MingPaiRet
	(*DDZ_ChuPai)(nil),              // 10: netproto.DDZ_ChuPai
	(*DDZ_ChuPaiRet)(nil),           // 11: netproto.DDZ_ChuPaiRet
	(*DDZ_Pass)(nil),                // 12: netproto.DDZ_Pass
	(*DDZ_PassRet)(nil),             // 13: netproto.DDZ_PassRet
	(*DDZ_TuoGuan)(nil),             // 14: netproto.DDZ_TuoGuan
	(*DDZ_TuoGuanRet)(nil),          // 15: netproto.DDZ_TuoGuanRet
	(*DDZ_PlayerInfo)(nil),          // 16: netproto.DDZ_PlayerInfo
	(*DDZ_SendCardInfo)(nil),        // 17: netproto.DDZ_SendCardInfo
	(*DDZ_UserRecoverRet)(nil),      // 18: netproto.DDZ_UserRecoverRet
	(*DDZ_NotifyGameStep)(nil),      // 19: netproto.DDZ_NotifyGameStep
	(*DDZ_NotifyGameTimeOut)(nil),   // 20: netproto.DDZ_NotifyGameTimeOut
	(*DDZ_NotifyJiaoDiZhu)(nil),     // 21: netproto.DDZ_NotifyJiaoDiZhu
	(*DDZ_NotifyQiangDiZhu)(nil),    // 22: netproto.DDZ_NotifyQiangDiZhu
	(*CardArry)(nil),                // 23: netproto.CardArry
	(*DDZ_NotifyMingPai)(nil),       // 24: netproto.DDZ_NotifyMingPai
	(*DDZ_NotifyChuPai)(nil),        // 25: netproto.DDZ_NotifyChuPai
	(*DDZ_NotifyFaPai)(nil),         // 26: netproto.DDZ_NotifyFaPai
	(*DDZ_NotifyDizhuInfo)(nil),     // 27: netproto.DDZ_NotifyDizhuInfo
	(*DDZ_NotifyRoomInfo)(nil),      // 28: netproto.DDZ_NotifyRoomInfo
	(*DDZ_ResultRecord)(nil),        // 29: netproto.DDZ_ResultRecord
	(*DDZ_NotifySettlement)(nil),    // 30: netproto.DDZ_NotifySettlement
	(*DDZ_NotifyTuoGuan)(nil),       // 31: netproto.DDZ_NotifyTuoGuan
	(*DDZ_NotifyDeskCfg)(nil),       // 32: netproto.DDZ_NotifyDeskCfg
	(*DDZ_EnableUserChiPaiChi)(nil), // 33: netproto.DDZ_EnableUserChiPaiChi
	(*DDZ_ChiPaiChiInfo)(nil),       // 34: netproto.DDZ_ChiPaiChiInfo
	(*DDZ_ChuPaiChiLu)(nil),         // 35: netproto.DDZ_ChuPaiChiLu
}
var file_GameMsg_DDZ_proto_depIdxs = []int32{
	0,  // 0: netproto.DDZ_JiaoDiZhuRet.Code:type_name -> netproto.DDZ_ErrorCode
	0,  // 1: netproto.DDZ_QiangDiZhuRet.Code:type_name -> netproto.DDZ_ErrorCode
	0,  // 2: netproto.DDZ_MingPaiRet.Code:type_name -> netproto.DDZ_ErrorCode
	3,  // 3: netproto.DDZ_ChuPai.Cards:type_name -> netproto.Card
	0,  // 4: netproto.DDZ_ChuPaiRet.Code:type_name -> netproto.DDZ_ErrorCode
	0,  // 5: netproto.DDZ_PassRet.Code:type_name -> netproto.DDZ_ErrorCode
	0,  // 6: netproto.DDZ_TuoGuanRet.Code:type_name -> netproto.DDZ_ErrorCode
	1,  // 7: netproto.DDZ_PlayerInfo.IsJiaoDiZhu:type_name -> netproto.UserActionDo
	1,  // 8: netproto.DDZ_PlayerInfo.IsQiangDiZhu:type_name -> netproto.UserActionDo
	23, // 9: netproto.DDZ_PlayerInfo.Cards:type_name -> netproto.CardArry
	23, // 10: netproto.DDZ_SendCardInfo.SendOutCards:type_name -> netproto.CardArry
	16, // 11: netproto.DDZ_UserRecoverRet.Opi:type_name -> netproto.DDZ_PlayerInfo
	23, // 12: netproto.DDZ_UserRecoverRet.DiZhuCards:type_name -> netproto.CardArry
	17, // 13: netproto.DDZ_UserRecoverRet.Sci:type_name -> netproto.DDZ_SendCardInfo
	3,  // 14: netproto.CardArry.Cards:type_name -> netproto.Card
	23, // 15: netproto.DDZ_NotifyMingPai.Mpcs:type_name -> netproto.CardArry
	23, // 16: netproto.DDZ_NotifyChuPai.Cards:type_name -> netproto.CardArry
	23, // 17: netproto.DDZ_NotifyFaPai.Cards:type_name -> netproto.CardArry
	23, // 18: netproto.DDZ_NotifyDizhuInfo.Cards:type_name -> netproto.CardArry
	23, // 19: netproto.DDZ_ResultRecord.cards:type_name -> netproto.CardArry
	29, // 20: netproto.DDZ_NotifySettlement.Settlement:type_name -> netproto.DDZ_ResultRecord
	3,  // 21: netproto.DDZ_ChiPaiChiInfo.ShengYuPai:type_name -> netproto.Card
	35, // 22: netproto.DDZ_ChiPaiChiInfo.ShangChia:type_name -> netproto.DDZ_ChuPaiChiLu
	35, // 23: netproto.DDZ_ChiPaiChiInfo.HsiaChia:type_name -> netproto.DDZ_ChuPaiChiLu
	3,  // 24: netproto.DDZ_ChuPaiChiLu.Cards:type_name -> netproto.Card
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_GameMsg_DDZ_proto_init() }
func file_GameMsg_DDZ_proto_init() {
	if File_GameMsg_DDZ_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_DDZ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_JiaoDiZhu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_JiaoDiZhuRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_QiangDiZhu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_QiangDiZhuRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_MingPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_MingPaiRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_ChuPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_ChuPaiRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_Pass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_PassRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_TuoGuan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_TuoGuanRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_SendCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_UserRecoverRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyGameStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyGameTimeOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyJiaoDiZhu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyQiangDiZhu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardArry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyMingPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyChuPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyFaPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyDizhuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_ResultRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifySettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyTuoGuan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_NotifyDeskCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_EnableUserChiPaiChi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_ChiPaiChiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_DDZ_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDZ_ChuPaiChiLu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_DDZ_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_DDZ_proto_goTypes,
		DependencyIndexes: file_GameMsg_DDZ_proto_depIdxs,
		EnumInfos:         file_GameMsg_DDZ_proto_enumTypes,
		MessageInfos:      file_GameMsg_DDZ_proto_msgTypes,
	}.Build()
	File_GameMsg_DDZ_proto = out.File
	file_GameMsg_DDZ_proto_rawDesc = nil
	file_GameMsg_DDZ_proto_goTypes = nil
	file_GameMsg_DDZ_proto_depIdxs = nil
}
