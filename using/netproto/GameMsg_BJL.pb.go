// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_BJL.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//下注设置
type BJL_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCount      []int32           `protobuf:"varint,1,rep,name=BetCount" json:"BetCount,omitempty"`           //一次下注的数量
	BetMoney      *int32            `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`           //一次下注的钱
	BetMoneyLimit *int64            `protobuf:"varint,3,req,name=BetMoneyLimit" json:"BetMoneyLimit,omitempty"` //下注上限
	ZhuangLimit   *int64            `protobuf:"varint,4,req,name=ZhuangLimit" json:"ZhuangLimit,omitempty"`     //上庄钱限制
	MaxZhuang     *int32            `protobuf:"varint,5,req,name=MaxZhuang" json:"MaxZhuang,omitempty"`         //当庄局数
	BetRange      *BJL_BetRangeList `protobuf:"bytes,6,req,name=BetRange" json:"BetRange,omitempty"`            //下注限制
}

func (x *BJL_Setting) Reset() {
	*x = BJL_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_Setting) ProtoMessage() {}

func (x *BJL_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_Setting.ProtoReflect.Descriptor instead.
func (*BJL_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{0}
}

func (x *BJL_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *BJL_Setting) GetBetMoney() int32 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *BJL_Setting) GetBetMoneyLimit() int64 {
	if x != nil && x.BetMoneyLimit != nil {
		return *x.BetMoneyLimit
	}
	return 0
}

func (x *BJL_Setting) GetZhuangLimit() int64 {
	if x != nil && x.ZhuangLimit != nil {
		return *x.ZhuangLimit
	}
	return 0
}

func (x *BJL_Setting) GetMaxZhuang() int32 {
	if x != nil && x.MaxZhuang != nil {
		return *x.MaxZhuang
	}
	return 0
}

func (x *BJL_Setting) GetBetRange() *BJL_BetRangeList {
	if x != nil {
		return x.BetRange
	}
	return nil
}

//状态消息
type BJL_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"` //状态
	Time  *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`   //此状态的剩余时间
}

func (x *BJL_Sate) Reset() {
	*x = BJL_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_Sate) ProtoMessage() {}

func (x *BJL_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_Sate.ProtoReflect.Descriptor instead.
func (*BJL_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{1}
}

func (x *BJL_Sate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *BJL_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户断线重连下注消息
type BJL_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMoney *int64              `protobuf:"varint,1,req,name=UserMoney" json:"UserMoney,omitempty"`
	BetInfo   []*BJL_BroadCastBet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *BJL_UserBetInfo) Reset() {
	*x = BJL_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_UserBetInfo) ProtoMessage() {}

func (x *BJL_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_UserBetInfo.ProtoReflect.Descriptor instead.
func (*BJL_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{2}
}

func (x *BJL_UserBetInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *BJL_UserBetInfo) GetBetInfo() []*BJL_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//广播用户下注的数组
type BJL_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32              `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*BJL_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *BJL_BroadCastBetArr) Reset() {
	*x = BJL_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_BroadCastBetArr) ProtoMessage() {}

func (x *BJL_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*BJL_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{3}
}

func (x *BJL_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BJL_BroadCastBetArr) GetBroadCastBetArr() []*BJL_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//广播用户下注内容数据结构
type BJL_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Money     *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
	LuckyStar *bool  `protobuf:"varint,3,req,name=LuckyStar" json:"LuckyStar,omitempty"`
}

func (x *BJL_BroadCastBet) Reset() {
	*x = BJL_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_BroadCastBet) ProtoMessage() {}

func (x *BJL_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_BroadCastBet.ProtoReflect.Descriptor instead.
func (*BJL_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{4}
}

func (x *BJL_BroadCastBet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BJL_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BJL_BroadCastBet) GetLuckyStar() bool {
	if x != nil && x.LuckyStar != nil {
		return *x.LuckyStar
	}
	return false
}

//用户下注数组
type BJL_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*BJL_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *BJL_BetArr) Reset() {
	*x = BJL_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_BetArr) ProtoMessage() {}

func (x *BJL_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_BetArr.ProtoReflect.Descriptor instead.
func (*BJL_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{5}
}

func (x *BJL_BetArr) GetBetArr() []*BJL_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type BJL_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *int32 `protobuf:"varint,1,req,name=BetType" json:"BetType,omitempty"`
	Count   *int32 `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
}

func (x *BJL_Bet) Reset() {
	*x = BJL_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_Bet) ProtoMessage() {}

func (x *BJL_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_Bet.ProtoReflect.Descriptor instead.
func (*BJL_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{6}
}

func (x *BJL_Bet) GetBetType() int32 {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return 0
}

func (x *BJL_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//百家乐下注的结果
type BJL_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32     `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`      //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4此类下注已达到上限，-5庄閒不可同時下注，-6用户金额小於下注限制
	Money  *int64     `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`  //用户的钱，下注以后的金额。
	Type   *int32     `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`    //下注超过限制的下注类型
	BetArr []*BJL_Bet `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"` //用户下注数据
}

func (x *BJL_BetRet) Reset() {
	*x = BJL_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_BetRet) ProtoMessage() {}

func (x *BJL_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_BetRet.ProtoReflect.Descriptor instead.
func (*BJL_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{7}
}

func (x *BJL_BetRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *BJL_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BJL_BetRet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BJL_BetRet) GetBetArr() []*BJL_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//游戏用户赢钱结果
type BJL_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin    *int64              `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`
	SelfWin      *int64              `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	WinUserInfo  []*BJL_WinUerInfo   `protobuf:"bytes,3,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"`   //赢钱前三名的人信息
	StageUerInfo []*BJL_StageUerInfo `protobuf:"bytes,4,rep,name=StageUerInfo" json:"StageUerInfo,omitempty"` //標誌玩家赢钱信息
}

func (x *BJL_GameResultUserMoney) Reset() {
	*x = BJL_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_GameResultUserMoney) ProtoMessage() {}

func (x *BJL_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*BJL_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{8}
}

func (x *BJL_GameResultUserMoney) GetZhuangWin() int64 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *BJL_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *BJL_GameResultUserMoney) GetWinUserInfo() []*BJL_WinUerInfo {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

func (x *BJL_GameResultUserMoney) GetStageUerInfo() []*BJL_StageUerInfo {
	if x != nil {
		return x.StageUerInfo
	}
	return nil
}

//赢钱玩家信息
type BJL_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *BJL_WinUerInfo) Reset() {
	*x = BJL_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_WinUerInfo) ProtoMessage() {}

func (x *BJL_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_WinUerInfo.ProtoReflect.Descriptor instead.
func (*BJL_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{9}
}

func (x *BJL_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *BJL_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//標誌玩家赢钱信息
type BJL_StageUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Win    *int64 `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *BJL_StageUerInfo) Reset() {
	*x = BJL_StageUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_StageUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_StageUerInfo) ProtoMessage() {}

func (x *BJL_StageUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_StageUerInfo.ProtoReflect.Descriptor instead.
func (*BJL_StageUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{10}
}

func (x *BJL_StageUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BJL_StageUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

type BJL_Cards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*BJL_GameResultPoker `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"`
}

func (x *BJL_Cards) Reset() {
	*x = BJL_Cards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_Cards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_Cards) ProtoMessage() {}

func (x *BJL_Cards) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_Cards.ProtoReflect.Descriptor instead.
func (*BJL_Cards) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{11}
}

func (x *BJL_Cards) GetCards() []*BJL_GameResultPoker {
	if x != nil {
		return x.Cards
	}
	return nil
}

//上庄结果
type BJL_ShangzhuangRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"` //值为1时下庄成功，值为0表示上庄成功，值为-1时上庄失败资金不足，值为-2时已经在上庄列表中。
}

func (x *BJL_ShangzhuangRet) Reset() {
	*x = BJL_ShangzhuangRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_ShangzhuangRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_ShangzhuangRet) ProtoMessage() {}

func (x *BJL_ShangzhuangRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_ShangzhuangRet.ProtoReflect.Descriptor instead.
func (*BJL_ShangzhuangRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{12}
}

func (x *BJL_ShangzhuangRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//是否上庄
type BJL_ShangZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShangZhuang *bool `protobuf:"varint,1,req,name=IsShangZhuang" json:"IsShangZhuang,omitempty"`
}

func (x *BJL_ShangZhuang) Reset() {
	*x = BJL_ShangZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_ShangZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_ShangZhuang) ProtoMessage() {}

func (x *BJL_ShangZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_ShangZhuang.ProtoReflect.Descriptor instead.
func (*BJL_ShangZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{13}
}

func (x *BJL_ShangZhuang) GetIsShangZhuang() bool {
	if x != nil && x.IsShangZhuang != nil {
		return *x.IsShangZhuang
	}
	return false
}

//庄家信息
type BJL_ZhuangInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32      `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	LastTurn *int32      `protobuf:"varint,2,req,name=LastTurn" json:"LastTurn,omitempty"`
	UserInfo []*GameUser `protobuf:"bytes,3,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *BJL_ZhuangInfo) Reset() {
	*x = BJL_ZhuangInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_ZhuangInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_ZhuangInfo) ProtoMessage() {}

func (x *BJL_ZhuangInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_ZhuangInfo.ProtoReflect.Descriptor instead.
func (*BJL_ZhuangInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{14}
}

func (x *BJL_ZhuangInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BJL_ZhuangInfo) GetLastTurn() int32 {
	if x != nil && x.LastTurn != nil {
		return *x.LastTurn
	}
	return 0
}

func (x *BJL_ZhuangInfo) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//上庄列表
type BJL_ZhuangList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*GameUser `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *BJL_ZhuangList) Reset() {
	*x = BJL_ZhuangList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_ZhuangList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_ZhuangList) ProtoMessage() {}

func (x *BJL_ZhuangList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_ZhuangList.ProtoReflect.Descriptor instead.
func (*BJL_ZhuangList) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{15}
}

func (x *BJL_ZhuangList) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//清除结果回应消息
type BJL_BetClearRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` //当前的钱
	Ret   *int32 `protobuf:"varint,2,req,name=Ret" json:"Ret,omitempty"`     //清除结果-1，清理失败，达到清理上限，0清理成功
}

func (x *BJL_BetClearRet) Reset() {
	*x = BJL_BetClearRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_BetClearRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_BetClearRet) ProtoMessage() {}

func (x *BJL_BetClearRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_BetClearRet.ProtoReflect.Descriptor instead.
func (*BJL_BetClearRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{16}
}

func (x *BJL_BetClearRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BJL_BetClearRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//大富豪列表消息
type BJL_RichestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichestList []*BJL_Richest `protobuf:"bytes,1,rep,name=RichestList" json:"RichestList,omitempty"` //富豪的排行榜
}

func (x *BJL_RichestList) Reset() {
	*x = BJL_RichestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_RichestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_RichestList) ProtoMessage() {}

func (x *BJL_RichestList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_RichestList.ProtoReflect.Descriptor instead.
func (*BJL_RichestList) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{17}
}

func (x *BJL_RichestList) GetRichestList() []*BJL_Richest {
	if x != nil {
		return x.RichestList
	}
	return nil
}

//大富豪的玩家資訊
type BJL_Richest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking       *int32 `protobuf:"varint,1,req,name=Ranking" json:"Ranking,omitempty"`             //富豪排名
	UserID        *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`               //富豪ID
	UserFaceID    *int32 `protobuf:"varint,3,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //富豪頭像ID
	Money         *int64 `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`                 //富豪当前身上的钱
	AvatarFrameID *int32 `protobuf:"varint,5,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
	LastBetTotal  *int64 `protobuf:"varint,6,opt,name=LastBetTotal" json:"LastBetTotal,omitempty"`   //上局下注總量
}

func (x *BJL_Richest) Reset() {
	*x = BJL_Richest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_Richest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_Richest) ProtoMessage() {}

func (x *BJL_Richest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_Richest.ProtoReflect.Descriptor instead.
func (*BJL_Richest) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{18}
}

func (x *BJL_Richest) GetRanking() int32 {
	if x != nil && x.Ranking != nil {
		return *x.Ranking
	}
	return 0
}

func (x *BJL_Richest) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BJL_Richest) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *BJL_Richest) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BJL_Richest) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

func (x *BJL_Richest) GetLastBetTotal() int64 {
	if x != nil && x.LastBetTotal != nil {
		return *x.LastBetTotal
	}
	return 0
}

//幸運星玩家資訊
type BJL_LuckyStar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`               //幸運星ID
	UserFaceID    *int32 `protobuf:"varint,2,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //幸運星頭像ID
	AvatarFrameID *int32 `protobuf:"varint,3,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
}

func (x *BJL_LuckyStar) Reset() {
	*x = BJL_LuckyStar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_LuckyStar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_LuckyStar) ProtoMessage() {}

func (x *BJL_LuckyStar) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_LuckyStar.ProtoReflect.Descriptor instead.
func (*BJL_LuckyStar) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{19}
}

func (x *BJL_LuckyStar) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BJL_LuckyStar) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *BJL_LuckyStar) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

//百家樂本局局數
type BJL_RoundID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin   *int32 `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`     //莊贏局數
	XianWin     *int32 `protobuf:"varint,2,req,name=XianWin" json:"XianWin,omitempty"`         //閒贏局數
	HeWin       *int32 `protobuf:"varint,3,req,name=HeWin" json:"HeWin,omitempty"`             //和局局數
	RoundID     *int32 `protobuf:"varint,4,req,name=RoundID" json:"RoundID,omitempty"`         //遊玩總局數
	ZhuangDui   *int32 `protobuf:"varint,5,opt,name=ZhuangDui" json:"ZhuangDui,omitempty"`     //莊對贏局數
	XianDui     *int32 `protobuf:"varint,6,opt,name=XianDui" json:"XianDui,omitempty"`         //閒對贏局數
	CutPokerNum *int32 `protobuf:"varint,7,opt,name=CutPokerNum" json:"CutPokerNum,omitempty"` //切牌後剩餘牌總數
}

func (x *BJL_RoundID) Reset() {
	*x = BJL_RoundID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_RoundID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_RoundID) ProtoMessage() {}

func (x *BJL_RoundID) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_RoundID.ProtoReflect.Descriptor instead.
func (*BJL_RoundID) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{20}
}

func (x *BJL_RoundID) GetZhuangWin() int32 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *BJL_RoundID) GetXianWin() int32 {
	if x != nil && x.XianWin != nil {
		return *x.XianWin
	}
	return 0
}

func (x *BJL_RoundID) GetHeWin() int32 {
	if x != nil && x.HeWin != nil {
		return *x.HeWin
	}
	return 0
}

func (x *BJL_RoundID) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

func (x *BJL_RoundID) GetZhuangDui() int32 {
	if x != nil && x.ZhuangDui != nil {
		return *x.ZhuangDui
	}
	return 0
}

func (x *BJL_RoundID) GetXianDui() int32 {
	if x != nil && x.XianDui != nil {
		return *x.XianDui
	}
	return 0
}

func (x *BJL_RoundID) GetCutPokerNum() int32 {
	if x != nil && x.CutPokerNum != nil {
		return *x.CutPokerNum
	}
	return 0
}

//下注限制列表消息
type BJL_BetRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangXian *BJL_Range `protobuf:"bytes,1,req,name=ZhuangXian" json:"ZhuangXian,omitempty"` //庄閑下注限制
	HeRange    *BJL_Range `protobuf:"bytes,2,req,name=HeRange" json:"HeRange,omitempty"`       //和下注限制
	DuiZi      *BJL_Range `protobuf:"bytes,3,req,name=DuiZi" json:"DuiZi,omitempty"`           //對子下注限制
}

func (x *BJL_BetRangeList) Reset() {
	*x = BJL_BetRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_BetRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_BetRangeList) ProtoMessage() {}

func (x *BJL_BetRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_BetRangeList.ProtoReflect.Descriptor instead.
func (*BJL_BetRangeList) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{21}
}

func (x *BJL_BetRangeList) GetZhuangXian() *BJL_Range {
	if x != nil {
		return x.ZhuangXian
	}
	return nil
}

func (x *BJL_BetRangeList) GetHeRange() *BJL_Range {
	if x != nil {
		return x.HeRange
	}
	return nil
}

func (x *BJL_BetRangeList) GetDuiZi() *BJL_Range {
	if x != nil {
		return x.DuiZi
	}
	return nil
}

//下注限制
type BJL_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Max *int32 `protobuf:"varint,1,req,name=Max" json:"Max,omitempty"` //下注上限
	Min *int32 `protobuf:"varint,2,req,name=Min" json:"Min,omitempty"` //下注下限
}

func (x *BJL_Range) Reset() {
	*x = BJL_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_Range) ProtoMessage() {}

func (x *BJL_Range) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_Range.ProtoReflect.Descriptor instead.
func (*BJL_Range) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{22}
}

func (x *BJL_Range) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *BJL_Range) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

//牌局編號
type BJL_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *BJL_GameNoInfo) Reset() {
	*x = BJL_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BJL_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_GameNoInfo) ProtoMessage() {}

func (x *BJL_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BJL_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_GameNoInfo.ProtoReflect.Descriptor instead.
func (*BJL_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BJL_proto_rawDescGZIP(), []int{23}
}

func (x *BJL_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

var File_GameMsg_BJL_proto protoreflect.FileDescriptor

var file_GameMsg_BJL_proto_rawDesc = []byte{
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x4a, 0x4c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x48, 0x74,
	0x74, 0x70, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x4a, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe3, 0x01, 0x0a, 0x0b, 0x42, 0x4a, 0x4c, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d,
	0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x36, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x42,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x42, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x42, 0x4a, 0x4c, 0x5f, 0x53, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0f, 0x42,
	0x4a, 0x4c, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x07,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x73, 0x0a, 0x13, 0x42, 0x4a, 0x4c, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x44, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x5a, 0x0a, 0x10, 0x42, 0x4a, 0x4c, 0x5f, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x22, 0x37, 0x0a, 0x0a, 0x42, 0x4a, 0x4c, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x12, 0x29, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c,
	0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x39, 0x0a, 0x07,
	0x42, 0x4a, 0x4c, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x0a, 0x42, 0x4a, 0x4c, 0x5f, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c,
	0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0xcd, 0x01, 0x0a,
	0x17, 0x42, 0x4a, 0x4c, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x68, 0x75, 0x61,
	0x6e, 0x67, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e,
	0x12, 0x3a, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a,
	0x4c, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x0e,
	0x42, 0x4a, 0x4c, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x10,
	0x42, 0x4a, 0x4c, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x40, 0x0a, 0x09, 0x42, 0x4a,
	0x4c, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x26, 0x0a, 0x12,
	0x42, 0x4a, 0x4c, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x52,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x0f, 0x42, 0x4a, 0x4c, 0x5f, 0x53, 0x68, 0x61, 0x6e,
	0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x61,
	0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d,
	0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x22, 0x74, 0x0a,
	0x0e, 0x42, 0x4a, 0x4c, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x0e, 0x42, 0x4a, 0x4c, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x0f, 0x42, 0x4a, 0x4c, 0x5f, 0x42, 0x65, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74,
	0x22, 0x4a, 0x0a, 0x0f, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a,
	0x0b, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61,
	0x73, 0x74, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6d,
	0x0a, 0x0d, 0x42, 0x4a, 0x4c, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0xcf, 0x01,
	0x0a, 0x0b, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x58,
	0x69, 0x61, 0x6e, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x58, 0x69,
	0x61, 0x6e, 0x57, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x65, 0x57, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x48, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x44,
	0x75, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x44, 0x75, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x58, 0x69, 0x61, 0x6e, 0x44, 0x75, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x58, 0x69, 0x61, 0x6e, 0x44, 0x75, 0x69, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x75, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x43, 0x75, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22,
	0xa1, 0x01, 0x0a, 0x10, 0x42, 0x4a, 0x4c, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x58, 0x69,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x58, 0x69, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x48, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x07, 0x48, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x44, 0x75, 0x69, 0x5a,
	0x69, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x44, 0x75,
	0x69, 0x5a, 0x69, 0x22, 0x2f, 0x0a, 0x09, 0x42, 0x4a, 0x4c, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4d,
	0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x4d, 0x69, 0x6e, 0x22, 0x28, 0x0a, 0x0e, 0x42, 0x4a, 0x4c, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_BJL_proto_rawDescOnce sync.Once
	file_GameMsg_BJL_proto_rawDescData = file_GameMsg_BJL_proto_rawDesc
)

func file_GameMsg_BJL_proto_rawDescGZIP() []byte {
	file_GameMsg_BJL_proto_rawDescOnce.Do(func() {
		file_GameMsg_BJL_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_BJL_proto_rawDescData)
	})
	return file_GameMsg_BJL_proto_rawDescData
}

var file_GameMsg_BJL_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_GameMsg_BJL_proto_goTypes = []interface{}{
	(*BJL_Setting)(nil),             // 0: netproto.BJL_Setting
	(*BJL_Sate)(nil),                // 1: netproto.BJL_Sate
	(*BJL_UserBetInfo)(nil),         // 2: netproto.BJL_UserBetInfo
	(*BJL_BroadCastBetArr)(nil),     // 3: netproto.BJL_BroadCastBetArr
	(*BJL_BroadCastBet)(nil),        // 4: netproto.BJL_BroadCastBet
	(*BJL_BetArr)(nil),              // 5: netproto.BJL_BetArr
	(*BJL_Bet)(nil),                 // 6: netproto.BJL_Bet
	(*BJL_BetRet)(nil),              // 7: netproto.BJL_BetRet
	(*BJL_GameResultUserMoney)(nil), // 8: netproto.BJL_GameResultUserMoney
	(*BJL_WinUerInfo)(nil),          // 9: netproto.BJL_WinUerInfo
	(*BJL_StageUerInfo)(nil),        // 10: netproto.BJL_StageUerInfo
	(*BJL_Cards)(nil),               // 11: netproto.BJL_Cards
	(*BJL_ShangzhuangRet)(nil),      // 12: netproto.BJL_ShangzhuangRet
	(*BJL_ShangZhuang)(nil),         // 13: netproto.BJL_ShangZhuang
	(*BJL_ZhuangInfo)(nil),          // 14: netproto.BJL_ZhuangInfo
	(*BJL_ZhuangList)(nil),          // 15: netproto.BJL_ZhuangList
	(*BJL_BetClearRet)(nil),         // 16: netproto.BJL_BetClearRet
	(*BJL_RichestList)(nil),         // 17: netproto.BJL_RichestList
	(*BJL_Richest)(nil),             // 18: netproto.BJL_Richest
	(*BJL_LuckyStar)(nil),           // 19: netproto.BJL_LuckyStar
	(*BJL_RoundID)(nil),             // 20: netproto.BJL_RoundID
	(*BJL_BetRangeList)(nil),        // 21: netproto.BJL_BetRangeList
	(*BJL_Range)(nil),               // 22: netproto.BJL_Range
	(*BJL_GameNoInfo)(nil),          // 23: netproto.BJL_GameNoInfo
	(*BJL_GameResultPoker)(nil),     // 24: netproto.BJL_GameResultPoker
	(*GameUser)(nil),                // 25: netproto.GameUser
}
var file_GameMsg_BJL_proto_depIdxs = []int32{
	21, // 0: netproto.BJL_Setting.BetRange:type_name -> netproto.BJL_BetRangeList
	4,  // 1: netproto.BJL_UserBetInfo.BetInfo:type_name -> netproto.BJL_BroadCastBet
	4,  // 2: netproto.BJL_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.BJL_BroadCastBet
	6,  // 3: netproto.BJL_BetArr.BetArr:type_name -> netproto.BJL_Bet
	6,  // 4: netproto.BJL_BetRet.BetArr:type_name -> netproto.BJL_Bet
	9,  // 5: netproto.BJL_GameResultUserMoney.WinUserInfo:type_name -> netproto.BJL_WinUerInfo
	10, // 6: netproto.BJL_GameResultUserMoney.StageUerInfo:type_name -> netproto.BJL_StageUerInfo
	24, // 7: netproto.BJL_Cards.Cards:type_name -> netproto.BJL_GameResultPoker
	25, // 8: netproto.BJL_ZhuangInfo.UserInfo:type_name -> netproto.GameUser
	25, // 9: netproto.BJL_ZhuangList.UserInfo:type_name -> netproto.GameUser
	18, // 10: netproto.BJL_RichestList.RichestList:type_name -> netproto.BJL_Richest
	22, // 11: netproto.BJL_BetRangeList.ZhuangXian:type_name -> netproto.BJL_Range
	22, // 12: netproto.BJL_BetRangeList.HeRange:type_name -> netproto.BJL_Range
	22, // 13: netproto.BJL_BetRangeList.DuiZi:type_name -> netproto.BJL_Range
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_GameMsg_BJL_proto_init() }
func file_GameMsg_BJL_proto_init() {
	if File_GameMsg_BJL_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	file_HttpMsg_BJL_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_BJL_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_StageUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_Cards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_ShangzhuangRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_ShangZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_ZhuangInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_ZhuangList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_BetClearRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_RichestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_Richest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_LuckyStar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_RoundID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_BetRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BJL_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_BJL_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_BJL_proto_goTypes,
		DependencyIndexes: file_GameMsg_BJL_proto_depIdxs,
		MessageInfos:      file_GameMsg_BJL_proto_msgTypes,
	}.Build()
	File_GameMsg_BJL_proto = out.File
	file_GameMsg_BJL_proto_rawDesc = nil
	file_GameMsg_BJL_proto_goTypes = nil
	file_GameMsg_BJL_proto_depIdxs = nil
}
