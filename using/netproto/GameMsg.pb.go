// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: GameMsg.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TestGameChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,req,name=Message" json:"Message,omitempty"`
}

func (x *TestGameChat) Reset() {
	*x = TestGameChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGameChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGameChat) ProtoMessage() {}

func (x *TestGameChat) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGameChat.ProtoReflect.Descriptor instead.
func (*TestGameChat) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{0}
}

func (x *TestGameChat) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type TestGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *int32 `protobuf:"varint,1,req,name=Score" json:"Score,omitempty"`
}

func (x *TestGameScore) Reset() {
	*x = TestGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGameScore) ProtoMessage() {}

func (x *TestGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGameScore.ProtoReflect.Descriptor instead.
func (*TestGameScore) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{1}
}

func (x *TestGameScore) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type TestGameEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestGameEnd) Reset() {
	*x = TestGameEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGameEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGameEnd) ProtoMessage() {}

func (x *TestGameEnd) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGameEnd.ProtoReflect.Descriptor instead.
func (*TestGameEnd) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{2}
}

type UserEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *GameUser `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
}

func (x *UserEnter) Reset() {
	*x = UserEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEnter) ProtoMessage() {}

func (x *UserEnter) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEnter.ProtoReflect.Descriptor instead.
func (*UserEnter) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{3}
}

func (x *UserEnter) GetUser() *GameUser {
	if x != nil {
		return x.User
	}
	return nil
}

type UserLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *GameUser `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
}

func (x *UserLeave) Reset() {
	*x = UserLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLeave) ProtoMessage() {}

func (x *UserLeave) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLeave.ProtoReflect.Descriptor instead.
func (*UserLeave) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{4}
}

func (x *UserLeave) GetUser() *GameUser {
	if x != nil {
		return x.User
	}
	return nil
}

type UserStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *GameUser `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
}

func (x *UserStateChange) Reset() {
	*x = UserStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStateChange) ProtoMessage() {}

func (x *UserStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStateChange.ProtoReflect.Descriptor instead.
func (*UserStateChange) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{5}
}

func (x *UserStateChange) GetUser() *GameUser {
	if x != nil {
		return x.User
	}
	return nil
}

type GameUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	NickName      *string `protobuf:"bytes,2,req,name=NickName" json:"NickName,omitempty"`
	Sex           *int32  `protobuf:"varint,3,req,name=Sex" json:"Sex,omitempty"`
	FaceID        *int32  `protobuf:"varint,4,req,name=FaceID" json:"FaceID,omitempty"`
	Score         *int64  `protobuf:"varint,5,req,name=Score" json:"Score,omitempty"`
	WinCount      *int32  `protobuf:"varint,6,req,name=WinCount" json:"WinCount,omitempty"`
	LoseCount     *int32  `protobuf:"varint,7,req,name=LoseCount" json:"LoseCount,omitempty"`
	DrawCount     *int32  `protobuf:"varint,8,req,name=DrawCount" json:"DrawCount,omitempty"`
	StateValue    *int32  `protobuf:"varint,9,req,name=StateValue" json:"StateValue,omitempty"`
	TableNo       *int32  `protobuf:"varint,10,req,name=TableNo" json:"TableNo,omitempty"`
	SeatNo        *int32  `protobuf:"varint,11,req,name=SeatNo" json:"SeatNo,omitempty"`
	LastWinLose   *int32  `protobuf:"varint,12,opt,name=LastWinLose" json:"LastWinLose,omitempty"`
	Coupon        *int64  `protobuf:"varint,13,opt,name=Coupon" json:"Coupon,omitempty"`
	UpdateCoupon  *int64  `protobuf:"varint,14,opt,name=UpdateCoupon" json:"UpdateCoupon,omitempty"`
	AvatarFrameID *int32  `protobuf:"varint,15,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"`
}

func (x *GameUser) Reset() {
	*x = GameUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUser) ProtoMessage() {}

func (x *GameUser) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUser.ProtoReflect.Descriptor instead.
func (*GameUser) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{6}
}

func (x *GameUser) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *GameUser) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *GameUser) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *GameUser) GetFaceID() int32 {
	if x != nil && x.FaceID != nil {
		return *x.FaceID
	}
	return 0
}

func (x *GameUser) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *GameUser) GetWinCount() int32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *GameUser) GetLoseCount() int32 {
	if x != nil && x.LoseCount != nil {
		return *x.LoseCount
	}
	return 0
}

func (x *GameUser) GetDrawCount() int32 {
	if x != nil && x.DrawCount != nil {
		return *x.DrawCount
	}
	return 0
}

func (x *GameUser) GetStateValue() int32 {
	if x != nil && x.StateValue != nil {
		return *x.StateValue
	}
	return 0
}

func (x *GameUser) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *GameUser) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *GameUser) GetLastWinLose() int32 {
	if x != nil && x.LastWinLose != nil {
		return *x.LastWinLose
	}
	return 0
}

func (x *GameUser) GetCoupon() int64 {
	if x != nil && x.Coupon != nil {
		return *x.Coupon
	}
	return 0
}

func (x *GameUser) GetUpdateCoupon() int64 {
	if x != nil && x.UpdateCoupon != nil {
		return *x.UpdateCoupon
	}
	return 0
}

func (x *GameUser) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

type GamePoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poker []*UserPoker `protobuf:"bytes,1,rep,name=Poker" json:"Poker,omitempty"`
}

func (x *GamePoker) Reset() {
	*x = GamePoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePoker) ProtoMessage() {}

func (x *GamePoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePoker.ProtoReflect.Descriptor instead.
func (*GamePoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{7}
}

func (x *GamePoker) GetPoker() []*UserPoker {
	if x != nil {
		return x.Poker
	}
	return nil
}

type UserPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32       `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	SeatNo *int32       `protobuf:"varint,2,req,name=SeatNo" json:"SeatNo,omitempty"`
	Cards  []*PokerCard `protobuf:"bytes,3,rep,name=Cards" json:"Cards,omitempty"`
}

func (x *UserPoker) Reset() {
	*x = UserPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPoker) ProtoMessage() {}

func (x *UserPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPoker.ProtoReflect.Descriptor instead.
func (*UserPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{8}
}

func (x *UserPoker) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserPoker) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *UserPoker) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type PokerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color      *int32 `protobuf:"varint,1,req,name=Color" json:"Color,omitempty"`
	CardNumber *int32 `protobuf:"varint,2,req,name=CardNumber" json:"CardNumber,omitempty"`
}

func (x *PokerCard) Reset() {
	*x = PokerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PokerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PokerCard) ProtoMessage() {}

func (x *PokerCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PokerCard.ProtoReflect.Descriptor instead.
func (*PokerCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{9}
}

func (x *PokerCard) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *PokerCard) GetCardNumber() int32 {
	if x != nil && x.CardNumber != nil {
		return *x.CardNumber
	}
	return 0
}

type GamePaijiou struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paijiou []*UserPaijiou `protobuf:"bytes,1,rep,name=Paijiou" json:"Paijiou,omitempty"`
}

func (x *GamePaijiou) Reset() {
	*x = GamePaijiou{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePaijiou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePaijiou) ProtoMessage() {}

func (x *GamePaijiou) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePaijiou.ProtoReflect.Descriptor instead.
func (*GamePaijiou) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{10}
}

func (x *GamePaijiou) GetPaijiou() []*UserPaijiou {
	if x != nil {
		return x.Paijiou
	}
	return nil
}

type UserPaijiou struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32         `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	SeatNo *int32         `protobuf:"varint,2,req,name=SeatNo" json:"SeatNo,omitempty"`
	Cards  []*PaijiouCard `protobuf:"bytes,3,rep,name=Cards" json:"Cards,omitempty"`
}

func (x *UserPaijiou) Reset() {
	*x = UserPaijiou{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPaijiou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPaijiou) ProtoMessage() {}

func (x *UserPaijiou) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPaijiou.ProtoReflect.Descriptor instead.
func (*UserPaijiou) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{11}
}

func (x *UserPaijiou) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserPaijiou) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *UserPaijiou) GetCards() []*PaijiouCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type PaijiouCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card      *string `protobuf:"bytes,1,req,name=Card" json:"Card,omitempty"`
	CardPoint *int32  `protobuf:"varint,2,req,name=CardPoint" json:"CardPoint,omitempty"`
}

func (x *PaijiouCard) Reset() {
	*x = PaijiouCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaijiouCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaijiouCard) ProtoMessage() {}

func (x *PaijiouCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaijiouCard.ProtoReflect.Descriptor instead.
func (*PaijiouCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{12}
}

func (x *PaijiouCard) GetCard() string {
	if x != nil && x.Card != nil {
		return *x.Card
	}
	return ""
}

func (x *PaijiouCard) GetCardPoint() int32 {
	if x != nil && x.CardPoint != nil {
		return *x.CardPoint
	}
	return 0
}

type UserActionCommited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionName *string `protobuf:"bytes,1,req,name=ActionName" json:"ActionName,omitempty"`
}

func (x *UserActionCommited) Reset() {
	*x = UserActionCommited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActionCommited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionCommited) ProtoMessage() {}

func (x *UserActionCommited) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionCommited.ProtoReflect.Descriptor instead.
func (*UserActionCommited) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{13}
}

func (x *UserActionCommited) GetActionName() string {
	if x != nil && x.ActionName != nil {
		return *x.ActionName
	}
	return ""
}

type AllUserActionCommited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionName *string `protobuf:"bytes,1,req,name=ActionName" json:"ActionName,omitempty"`
}

func (x *AllUserActionCommited) Reset() {
	*x = AllUserActionCommited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUserActionCommited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUserActionCommited) ProtoMessage() {}

func (x *AllUserActionCommited) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUserActionCommited.ProtoReflect.Descriptor instead.
func (*AllUserActionCommited) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{14}
}

func (x *AllUserActionCommited) GetActionName() string {
	if x != nil && x.ActionName != nil {
		return *x.ActionName
	}
	return ""
}

type LookOnUserNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID []int32 `protobuf:"varint,1,rep,name=UserID" json:"UserID,omitempty"`
}

func (x *LookOnUserNotify) Reset() {
	*x = LookOnUserNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookOnUserNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookOnUserNotify) ProtoMessage() {}

func (x *LookOnUserNotify) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookOnUserNotify.ProtoReflect.Descriptor instead.
func (*LookOnUserNotify) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{15}
}

func (x *LookOnUserNotify) GetUserID() []int32 {
	if x != nil {
		return x.UserID
	}
	return nil
}

type UserLuckScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Score  *int64 `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`
}

func (x *UserLuckScore) Reset() {
	*x = UserLuckScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLuckScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLuckScore) ProtoMessage() {}

func (x *UserLuckScore) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLuckScore.ProtoReflect.Descriptor instead.
func (*UserLuckScore) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{16}
}

func (x *UserLuckScore) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLuckScore) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type UserLuckScoreRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Value  *string `protobuf:"bytes,2,req,name=Value" json:"Value,omitempty"`
}

func (x *UserLuckScoreRet) Reset() {
	*x = UserLuckScoreRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLuckScoreRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLuckScoreRet) ProtoMessage() {}

func (x *UserLuckScoreRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLuckScoreRet.ProtoReflect.Descriptor instead.
func (*UserLuckScoreRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{17}
}

func (x *UserLuckScoreRet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLuckScoreRet) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GameBeginCountDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *int32 `protobuf:"varint,1,req,name=Time" json:"Time,omitempty"`
}

func (x *GameBeginCountDown) Reset() {
	*x = GameBeginCountDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBeginCountDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBeginCountDown) ProtoMessage() {}

func (x *GameBeginCountDown) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBeginCountDown.ProtoReflect.Descriptor instead.
func (*GameBeginCountDown) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{18}
}

func (x *GameBeginCountDown) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type SuperToolAddChangeLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID   *int32  `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	TableNo  *int32  `protobuf:"varint,3,req,name=TableNo" json:"TableNo,omitempty"`
	Type     *int32  `protobuf:"varint,4,req,name=Type" json:"Type,omitempty"`
	Result   *string `protobuf:"bytes,5,req,name=Result" json:"Result,omitempty"`
	Operator *string `protobuf:"bytes,6,req,name=Operator" json:"Operator,omitempty"`
}

func (x *SuperToolAddChangeLog) Reset() {
	*x = SuperToolAddChangeLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolAddChangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolAddChangeLog) ProtoMessage() {}

func (x *SuperToolAddChangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolAddChangeLog.ProtoReflect.Descriptor instead.
func (*SuperToolAddChangeLog) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{19}
}

func (x *SuperToolAddChangeLog) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *SuperToolAddChangeLog) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *SuperToolAddChangeLog) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SuperToolAddChangeLog) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *SuperToolAddChangeLog) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type SuperToolAddAssignReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID     *int32                            `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	FlagID     *int32                            `protobuf:"varint,2,req,name=FlagID" json:"FlagID,omitempty"`
	TableNo    *int32                            `protobuf:"varint,3,req,name=TableNo" json:"TableNo,omitempty"`
	Result     *string                           `protobuf:"bytes,4,req,name=Result" json:"Result,omitempty"`
	Operator   *string                           `protobuf:"bytes,5,req,name=Operator" json:"Operator,omitempty"`
	DetailList []*SuperToolAddAssignRewardDetail `protobuf:"bytes,6,rep,name=DetailList" json:"DetailList,omitempty"`
}

func (x *SuperToolAddAssignReward) Reset() {
	*x = SuperToolAddAssignReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolAddAssignReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolAddAssignReward) ProtoMessage() {}

func (x *SuperToolAddAssignReward) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolAddAssignReward.ProtoReflect.Descriptor instead.
func (*SuperToolAddAssignReward) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{20}
}

func (x *SuperToolAddAssignReward) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *SuperToolAddAssignReward) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *SuperToolAddAssignReward) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *SuperToolAddAssignReward) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *SuperToolAddAssignReward) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *SuperToolAddAssignReward) GetDetailList() []*SuperToolAddAssignRewardDetail {
	if x != nil {
		return x.DetailList
	}
	return nil
}

type SuperToolGetAssignRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID  *int32 `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	FlagID  *int32 `protobuf:"varint,2,req,name=FlagID" json:"FlagID,omitempty"`
	TableNo *int32 `protobuf:"varint,3,req,name=TableNo" json:"TableNo,omitempty"`
}

func (x *SuperToolGetAssignRewardDetail) Reset() {
	*x = SuperToolGetAssignRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolGetAssignRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolGetAssignRewardDetail) ProtoMessage() {}

func (x *SuperToolGetAssignRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolGetAssignRewardDetail.ProtoReflect.Descriptor instead.
func (*SuperToolGetAssignRewardDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{21}
}

func (x *SuperToolGetAssignRewardDetail) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *SuperToolGetAssignRewardDetail) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *SuperToolGetAssignRewardDetail) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

type SuperToolAddAssignRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx         *int32  `protobuf:"varint,1,req,name=Idx" json:"Idx,omitempty"`
	Description *string `protobuf:"bytes,2,req,name=Description" json:"Description,omitempty"`
	Reward      *string `protobuf:"bytes,3,req,name=Reward" json:"Reward,omitempty"`
	Status      *int32  `protobuf:"varint,4,req,name=Status" json:"Status,omitempty"`
}

func (x *SuperToolAddAssignRewardDetail) Reset() {
	*x = SuperToolAddAssignRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolAddAssignRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolAddAssignRewardDetail) ProtoMessage() {}

func (x *SuperToolAddAssignRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolAddAssignRewardDetail.ProtoReflect.Descriptor instead.
func (*SuperToolAddAssignRewardDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{22}
}

func (x *SuperToolAddAssignRewardDetail) GetIdx() int32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *SuperToolAddAssignRewardDetail) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SuperToolAddAssignRewardDetail) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *SuperToolAddAssignRewardDetail) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type SuperToolAssignRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogID       *int32  `protobuf:"varint,1,req,name=LogID" json:"LogID,omitempty"`
	Idx         *int32  `protobuf:"varint,2,req,name=Idx" json:"Idx,omitempty"`
	Description *string `protobuf:"bytes,3,req,name=Description" json:"Description,omitempty"`
	Reward      *string `protobuf:"bytes,4,req,name=Reward" json:"Reward,omitempty"`
	Status      *int32  `protobuf:"varint,5,req,name=Status" json:"Status,omitempty"`
}

func (x *SuperToolAssignRewardDetail) Reset() {
	*x = SuperToolAssignRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolAssignRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolAssignRewardDetail) ProtoMessage() {}

func (x *SuperToolAssignRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolAssignRewardDetail.ProtoReflect.Descriptor instead.
func (*SuperToolAssignRewardDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{23}
}

func (x *SuperToolAssignRewardDetail) GetLogID() int32 {
	if x != nil && x.LogID != nil {
		return *x.LogID
	}
	return 0
}

func (x *SuperToolAssignRewardDetail) GetIdx() int32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *SuperToolAssignRewardDetail) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SuperToolAssignRewardDetail) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *SuperToolAssignRewardDetail) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type SuperToolGetVipUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID *int32 `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
}

func (x *SuperToolGetVipUserRequest) Reset() {
	*x = SuperToolGetVipUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolGetVipUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolGetVipUserRequest) ProtoMessage() {}

func (x *SuperToolGetVipUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolGetVipUserRequest.ProtoReflect.Descriptor instead.
func (*SuperToolGetVipUserRequest) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{24}
}

func (x *SuperToolGetVipUserRequest) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

type SuperToolVipUserDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataList []*SuperToolVipUserData `protobuf:"bytes,1,rep,name=DataList" json:"DataList,omitempty"`
}

func (x *SuperToolVipUserDataList) Reset() {
	*x = SuperToolVipUserDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolVipUserDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolVipUserDataList) ProtoMessage() {}

func (x *SuperToolVipUserDataList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolVipUserDataList.ProtoReflect.Descriptor instead.
func (*SuperToolVipUserDataList) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{25}
}

func (x *SuperToolVipUserDataList) GetDataList() []*SuperToolVipUserData {
	if x != nil {
		return x.DataList
	}
	return nil
}

type SuperToolVipUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	AssignAmount     *int64 `protobuf:"varint,2,req,name=AssignAmount" json:"AssignAmount,omitempty"`
	AssignRate       *int32 `protobuf:"varint,3,req,name=AssignRate" json:"AssignRate,omitempty"`
	CompleteAmount   *int64 `protobuf:"varint,4,req,name=CompleteAmount" json:"CompleteAmount,omitempty"`
	Complete         *int32 `protobuf:"varint,5,req,name=Complete" json:"Complete,omitempty"`
	Status           *int32 `protobuf:"varint,6,req,name=Status" json:"Status,omitempty"`
	TotalAll         *int32 `protobuf:"varint,7,req,name=TotalAll" json:"TotalAll,omitempty"`
	TotalUserWinLose *int32 `protobuf:"varint,8,req,name=TotalUserWinLose" json:"TotalUserWinLose,omitempty"`
	TodayUserWinLose *int32 `protobuf:"varint,9,req,name=TodayUserWinLose" json:"TodayUserWinLose,omitempty"`
}

func (x *SuperToolVipUserData) Reset() {
	*x = SuperToolVipUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolVipUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolVipUserData) ProtoMessage() {}

func (x *SuperToolVipUserData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolVipUserData.ProtoReflect.Descriptor instead.
func (*SuperToolVipUserData) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{26}
}

func (x *SuperToolVipUserData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *SuperToolVipUserData) GetAssignAmount() int64 {
	if x != nil && x.AssignAmount != nil {
		return *x.AssignAmount
	}
	return 0
}

func (x *SuperToolVipUserData) GetAssignRate() int32 {
	if x != nil && x.AssignRate != nil {
		return *x.AssignRate
	}
	return 0
}

func (x *SuperToolVipUserData) GetCompleteAmount() int64 {
	if x != nil && x.CompleteAmount != nil {
		return *x.CompleteAmount
	}
	return 0
}

func (x *SuperToolVipUserData) GetComplete() int32 {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return 0
}

func (x *SuperToolVipUserData) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SuperToolVipUserData) GetTotalAll() int32 {
	if x != nil && x.TotalAll != nil {
		return *x.TotalAll
	}
	return 0
}

func (x *SuperToolVipUserData) GetTotalUserWinLose() int32 {
	if x != nil && x.TotalUserWinLose != nil {
		return *x.TotalUserWinLose
	}
	return 0
}

func (x *SuperToolVipUserData) GetTodayUserWinLose() int32 {
	if x != nil && x.TodayUserWinLose != nil {
		return *x.TodayUserWinLose
	}
	return 0
}

type SuperToolFishGetSystemRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishRewardList []*FishSystemRewardDataList `protobuf:"bytes,1,rep,name=FishRewardList" json:"FishRewardList,omitempty"`
}

func (x *SuperToolFishGetSystemRewardDetail) Reset() {
	*x = SuperToolFishGetSystemRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolFishGetSystemRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolFishGetSystemRewardDetail) ProtoMessage() {}

func (x *SuperToolFishGetSystemRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolFishGetSystemRewardDetail.ProtoReflect.Descriptor instead.
func (*SuperToolFishGetSystemRewardDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{27}
}

func (x *SuperToolFishGetSystemRewardDetail) GetFishRewardList() []*FishSystemRewardDataList {
	if x != nil {
		return x.FishRewardList
	}
	return nil
}

type FishSystemRewardDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishID       *int32 `protobuf:"varint,1,req,name=FishID" json:"FishID,omitempty"`
	Amount       *int64 `protobuf:"varint,2,req,name=Amount" json:"Amount,omitempty"`
	FinishAmount *int64 `protobuf:"varint,3,req,name=FinishAmount" json:"FinishAmount,omitempty"`
	Rate         *int32 `protobuf:"varint,4,req,name=Rate" json:"Rate,omitempty"`
	Status       *int32 `protobuf:"varint,5,req,name=Status" json:"Status,omitempty"`
}

func (x *FishSystemRewardDataList) Reset() {
	*x = FishSystemRewardDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishSystemRewardDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishSystemRewardDataList) ProtoMessage() {}

func (x *FishSystemRewardDataList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishSystemRewardDataList.ProtoReflect.Descriptor instead.
func (*FishSystemRewardDataList) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{28}
}

func (x *FishSystemRewardDataList) GetFishID() int32 {
	if x != nil && x.FishID != nil {
		return *x.FishID
	}
	return 0
}

func (x *FishSystemRewardDataList) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *FishSystemRewardDataList) GetFinishAmount() int64 {
	if x != nil && x.FinishAmount != nil {
		return *x.FinishAmount
	}
	return 0
}

func (x *FishSystemRewardDataList) GetRate() int32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *FishSystemRewardDataList) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type SuperToolFishGetVIPUserRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishVIPUserList []*FishVIPUserRewardDataList `protobuf:"bytes,1,rep,name=FishVIPUserList" json:"FishVIPUserList,omitempty"`
}

func (x *SuperToolFishGetVIPUserRewardDetail) Reset() {
	*x = SuperToolFishGetVIPUserRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolFishGetVIPUserRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolFishGetVIPUserRewardDetail) ProtoMessage() {}

func (x *SuperToolFishGetVIPUserRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolFishGetVIPUserRewardDetail.ProtoReflect.Descriptor instead.
func (*SuperToolFishGetVIPUserRewardDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{29}
}

func (x *SuperToolFishGetVIPUserRewardDetail) GetFishVIPUserList() []*FishVIPUserRewardDataList {
	if x != nil {
		return x.FishVIPUserList
	}
	return nil
}

type FishVIPUserRewardDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	AssignAmount    *int64 `protobuf:"varint,2,req,name=AssignAmount" json:"AssignAmount,omitempty"`
	Rate            *int32 `protobuf:"varint,3,req,name=Rate" json:"Rate,omitempty"`
	FinishAmount    *int64 `protobuf:"varint,4,req,name=FinishAmount" json:"FinishAmount,omitempty"`
	Status          *int32 `protobuf:"varint,5,req,name=Status" json:"Status,omitempty"`
	SumAssignAmount *int64 `protobuf:"varint,6,req,name=SumAssignAmount" json:"SumAssignAmount,omitempty"`
}

func (x *FishVIPUserRewardDataList) Reset() {
	*x = FishVIPUserRewardDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishVIPUserRewardDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishVIPUserRewardDataList) ProtoMessage() {}

func (x *FishVIPUserRewardDataList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishVIPUserRewardDataList.ProtoReflect.Descriptor instead.
func (*FishVIPUserRewardDataList) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{30}
}

func (x *FishVIPUserRewardDataList) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *FishVIPUserRewardDataList) GetAssignAmount() int64 {
	if x != nil && x.AssignAmount != nil {
		return *x.AssignAmount
	}
	return 0
}

func (x *FishVIPUserRewardDataList) GetRate() int32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *FishVIPUserRewardDataList) GetFinishAmount() int64 {
	if x != nil && x.FinishAmount != nil {
		return *x.FinishAmount
	}
	return 0
}

func (x *FishVIPUserRewardDataList) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FishVIPUserRewardDataList) GetSumAssignAmount() int64 {
	if x != nil && x.SumAssignAmount != nil {
		return *x.SumAssignAmount
	}
	return 0
}

type SuperToolFishUpdSystemRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagID         *int32                                  `protobuf:"varint,1,req,name=FlagID" json:"FlagID,omitempty"`
	FishRewardList []*SuperToolFishUpdSystemRewardDataList `protobuf:"bytes,2,rep,name=FishRewardList" json:"FishRewardList,omitempty"`
}

func (x *SuperToolFishUpdSystemRewardDetail) Reset() {
	*x = SuperToolFishUpdSystemRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolFishUpdSystemRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolFishUpdSystemRewardDetail) ProtoMessage() {}

func (x *SuperToolFishUpdSystemRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolFishUpdSystemRewardDetail.ProtoReflect.Descriptor instead.
func (*SuperToolFishUpdSystemRewardDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{31}
}

func (x *SuperToolFishUpdSystemRewardDetail) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *SuperToolFishUpdSystemRewardDetail) GetFishRewardList() []*SuperToolFishUpdSystemRewardDataList {
	if x != nil {
		return x.FishRewardList
	}
	return nil
}

type SuperToolFishUpdSystemRewardDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishID       *int32 `protobuf:"varint,1,req,name=FishID" json:"FishID,omitempty"`
	FinishAmount *int64 `protobuf:"varint,2,req,name=FinishAmount" json:"FinishAmount,omitempty"`
}

func (x *SuperToolFishUpdSystemRewardDataList) Reset() {
	*x = SuperToolFishUpdSystemRewardDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolFishUpdSystemRewardDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolFishUpdSystemRewardDataList) ProtoMessage() {}

func (x *SuperToolFishUpdSystemRewardDataList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolFishUpdSystemRewardDataList.ProtoReflect.Descriptor instead.
func (*SuperToolFishUpdSystemRewardDataList) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{32}
}

func (x *SuperToolFishUpdSystemRewardDataList) GetFishID() int32 {
	if x != nil && x.FishID != nil {
		return *x.FishID
	}
	return 0
}

func (x *SuperToolFishUpdSystemRewardDataList) GetFinishAmount() int64 {
	if x != nil && x.FinishAmount != nil {
		return *x.FinishAmount
	}
	return 0
}

type SuperToolfishUpdVIPUserRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID             *int32                                   `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	FishUserRewardList []*SuperToolFishUpdVIPUserRewardDataList `protobuf:"bytes,2,rep,name=FishUserRewardList" json:"FishUserRewardList,omitempty"`
}

func (x *SuperToolfishUpdVIPUserRewardDetail) Reset() {
	*x = SuperToolfishUpdVIPUserRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolfishUpdVIPUserRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolfishUpdVIPUserRewardDetail) ProtoMessage() {}

func (x *SuperToolfishUpdVIPUserRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolfishUpdVIPUserRewardDetail.ProtoReflect.Descriptor instead.
func (*SuperToolfishUpdVIPUserRewardDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{33}
}

func (x *SuperToolfishUpdVIPUserRewardDetail) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *SuperToolfishUpdVIPUserRewardDetail) GetFishUserRewardList() []*SuperToolFishUpdVIPUserRewardDataList {
	if x != nil {
		return x.FishUserRewardList
	}
	return nil
}

type SuperToolFishUpdVIPUserRewardDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	FinishAmount *int64 `protobuf:"varint,2,req,name=FinishAmount" json:"FinishAmount,omitempty"`
}

func (x *SuperToolFishUpdVIPUserRewardDataList) Reset() {
	*x = SuperToolFishUpdVIPUserRewardDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolFishUpdVIPUserRewardDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolFishUpdVIPUserRewardDataList) ProtoMessage() {}

func (x *SuperToolFishUpdVIPUserRewardDataList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolFishUpdVIPUserRewardDataList.ProtoReflect.Descriptor instead.
func (*SuperToolFishUpdVIPUserRewardDataList) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{34}
}

func (x *SuperToolFishUpdVIPUserRewardDataList) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *SuperToolFishUpdVIPUserRewardDataList) GetFinishAmount() int64 {
	if x != nil && x.FinishAmount != nil {
		return *x.FinishAmount
	}
	return 0
}

type SuperToolZjhVipUserDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataList []*SuperToolZjhVipUserData `protobuf:"bytes,1,rep,name=DataList" json:"DataList,omitempty"`
}

func (x *SuperToolZjhVipUserDataList) Reset() {
	*x = SuperToolZjhVipUserDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolZjhVipUserDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolZjhVipUserDataList) ProtoMessage() {}

func (x *SuperToolZjhVipUserDataList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolZjhVipUserDataList.ProtoReflect.Descriptor instead.
func (*SuperToolZjhVipUserDataList) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{35}
}

func (x *SuperToolZjhVipUserDataList) GetDataList() []*SuperToolZjhVipUserData {
	if x != nil {
		return x.DataList
	}
	return nil
}

type SuperToolZjhVipUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID               *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	NextType             *int64 `protobuf:"varint,2,req,name=NextType" json:"NextType,omitempty"`
	NextWinLose          *int64 `protobuf:"varint,3,req,name=NextWinLose" json:"NextWinLose,omitempty"`
	NextWinLoseNum       *int64 `protobuf:"varint,4,req,name=NextWinLoseNum" json:"NextWinLoseNum,omitempty"`
	Finish               *int64 `protobuf:"varint,5,req,name=Finish" json:"Finish,omitempty"`
	FinishNextWinLoseNum *int64 `protobuf:"varint,6,req,name=FinishNextWinLoseNum" json:"FinishNextWinLoseNum,omitempty"`
	NextTable            *int32 `protobuf:"varint,7,req,name=NextTable" json:"NextTable,omitempty"`
	Status               *int32 `protobuf:"varint,8,req,name=Status" json:"Status,omitempty"`
	TodaySumcharge       *int64 `protobuf:"varint,9,req,name=TodaySumcharge" json:"TodaySumcharge,omitempty"`
	TodaySumConvert      *int64 `protobuf:"varint,10,req,name=TodaySumConvert" json:"TodaySumConvert,omitempty"`
	TodayUserWinLose     *int64 `protobuf:"varint,11,req,name=TodayUserWinLose" json:"TodayUserWinLose,omitempty"`
}

func (x *SuperToolZjhVipUserData) Reset() {
	*x = SuperToolZjhVipUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolZjhVipUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolZjhVipUserData) ProtoMessage() {}

func (x *SuperToolZjhVipUserData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolZjhVipUserData.ProtoReflect.Descriptor instead.
func (*SuperToolZjhVipUserData) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{36}
}

func (x *SuperToolZjhVipUserData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetNextType() int64 {
	if x != nil && x.NextType != nil {
		return *x.NextType
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetNextWinLose() int64 {
	if x != nil && x.NextWinLose != nil {
		return *x.NextWinLose
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetNextWinLoseNum() int64 {
	if x != nil && x.NextWinLoseNum != nil {
		return *x.NextWinLoseNum
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetFinish() int64 {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetFinishNextWinLoseNum() int64 {
	if x != nil && x.FinishNextWinLoseNum != nil {
		return *x.FinishNextWinLoseNum
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetNextTable() int32 {
	if x != nil && x.NextTable != nil {
		return *x.NextTable
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetTodaySumcharge() int64 {
	if x != nil && x.TodaySumcharge != nil {
		return *x.TodaySumcharge
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetTodaySumConvert() int64 {
	if x != nil && x.TodaySumConvert != nil {
		return *x.TodaySumConvert
	}
	return 0
}

func (x *SuperToolZjhVipUserData) GetTodayUserWinLose() int64 {
	if x != nil && x.TodayUserWinLose != nil {
		return *x.TodayUserWinLose
	}
	return 0
}

type SuperToolZjhUpdVipUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID               *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Finish               *int64 `protobuf:"varint,2,opt,name=Finish" json:"Finish,omitempty"`
	FinishNextWinLoseNum *int64 `protobuf:"varint,3,opt,name=FinishNextWinLoseNum" json:"FinishNextWinLoseNum,omitempty"`
	NextTable            *int32 `protobuf:"varint,4,opt,name=NextTable" json:"NextTable,omitempty"`
	NextType             *int64 `protobuf:"varint,5,opt,name=NextType" json:"NextType,omitempty"`
}

func (x *SuperToolZjhUpdVipUserData) Reset() {
	*x = SuperToolZjhUpdVipUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolZjhUpdVipUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolZjhUpdVipUserData) ProtoMessage() {}

func (x *SuperToolZjhUpdVipUserData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolZjhUpdVipUserData.ProtoReflect.Descriptor instead.
func (*SuperToolZjhUpdVipUserData) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{37}
}

func (x *SuperToolZjhUpdVipUserData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *SuperToolZjhUpdVipUserData) GetFinish() int64 {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return 0
}

func (x *SuperToolZjhUpdVipUserData) GetFinishNextWinLoseNum() int64 {
	if x != nil && x.FinishNextWinLoseNum != nil {
		return *x.FinishNextWinLoseNum
	}
	return 0
}

func (x *SuperToolZjhUpdVipUserData) GetNextTable() int32 {
	if x != nil && x.NextTable != nil {
		return *x.NextTable
	}
	return 0
}

func (x *SuperToolZjhUpdVipUserData) GetNextType() int64 {
	if x != nil && x.NextType != nil {
		return *x.NextType
	}
	return 0
}

type FishSysPoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagID                    *int32 `protobuf:"varint,1,req,name=FlagID" json:"FlagID,omitempty"`
	SumBetMoney               *int64 `protobuf:"varint,2,req,name=SumBetMoney" json:"SumBetMoney,omitempty"`
	SumBullet                 *int64 `protobuf:"varint,3,req,name=SumBullet" json:"SumBullet,omitempty"`
	SysSumWinLoss             *int64 `protobuf:"varint,4,req,name=SysSumWinLoss" json:"SysSumWinLoss,omitempty"`
	AfterAdjustSyspoolWinLoss *int64 `protobuf:"varint,5,opt,name=AfterAdjustSyspoolWinLoss" json:"AfterAdjustSyspoolWinLoss,omitempty"` //系統水池贏錢抽水後水池
	PoolAmount                *int64 `protobuf:"varint,6,opt,name=PoolAmount" json:"PoolAmount,omitempty"`                               //調控水池
}

func (x *FishSysPoolData) Reset() {
	*x = FishSysPoolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishSysPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishSysPoolData) ProtoMessage() {}

func (x *FishSysPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishSysPoolData.ProtoReflect.Descriptor instead.
func (*FishSysPoolData) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{38}
}

func (x *FishSysPoolData) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *FishSysPoolData) GetSumBetMoney() int64 {
	if x != nil && x.SumBetMoney != nil {
		return *x.SumBetMoney
	}
	return 0
}

func (x *FishSysPoolData) GetSumBullet() int64 {
	if x != nil && x.SumBullet != nil {
		return *x.SumBullet
	}
	return 0
}

func (x *FishSysPoolData) GetSysSumWinLoss() int64 {
	if x != nil && x.SysSumWinLoss != nil {
		return *x.SysSumWinLoss
	}
	return 0
}

func (x *FishSysPoolData) GetAfterAdjustSyspoolWinLoss() int64 {
	if x != nil && x.AfterAdjustSyspoolWinLoss != nil {
		return *x.AfterAdjustSyspoolWinLoss
	}
	return 0
}

func (x *FishSysPoolData) GetPoolAmount() int64 {
	if x != nil && x.PoolAmount != nil {
		return *x.PoolAmount
	}
	return 0
}

type FishPlayerPoolDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagID         *int32                      `protobuf:"varint,1,opt,name=FlagID" json:"FlagID,omitempty"`
	FishRewardList []*FishPlayerPoolDetailList `protobuf:"bytes,2,rep,name=FishRewardList" json:"FishRewardList,omitempty"`
}

func (x *FishPlayerPoolDetail) Reset() {
	*x = FishPlayerPoolDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPlayerPoolDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPlayerPoolDetail) ProtoMessage() {}

func (x *FishPlayerPoolDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPlayerPoolDetail.ProtoReflect.Descriptor instead.
func (*FishPlayerPoolDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{39}
}

func (x *FishPlayerPoolDetail) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *FishPlayerPoolDetail) GetFishRewardList() []*FishPlayerPoolDetailList {
	if x != nil {
		return x.FishRewardList
	}
	return nil
}

type FishPlayerPoolDetailList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	HitMoney   *int64 `protobuf:"varint,2,req,name=HitMoney" json:"HitMoney,omitempty"`
	SpendMoney *int64 `protobuf:"varint,3,req,name=SpendMoney" json:"SpendMoney,omitempty"`
}

func (x *FishPlayerPoolDetailList) Reset() {
	*x = FishPlayerPoolDetailList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPlayerPoolDetailList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPlayerPoolDetailList) ProtoMessage() {}

func (x *FishPlayerPoolDetailList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPlayerPoolDetailList.ProtoReflect.Descriptor instead.
func (*FishPlayerPoolDetailList) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{40}
}

func (x *FishPlayerPoolDetailList) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *FishPlayerPoolDetailList) GetHitMoney() int64 {
	if x != nil && x.HitMoney != nil {
		return *x.HitMoney
	}
	return 0
}

func (x *FishPlayerPoolDetailList) GetSpendMoney() int64 {
	if x != nil && x.SpendMoney != nil {
		return *x.SpendMoney
	}
	return 0
}

type FindFishBeginnerOfferByUserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                 *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	NewPlayerAdjustSyspool *int32 `protobuf:"varint,2,opt,name=NewPlayerAdjustSyspool" json:"NewPlayerAdjustSyspool,omitempty"`
}

func (x *FindFishBeginnerOfferByUserID) Reset() {
	*x = FindFishBeginnerOfferByUserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFishBeginnerOfferByUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFishBeginnerOfferByUserID) ProtoMessage() {}

func (x *FindFishBeginnerOfferByUserID) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFishBeginnerOfferByUserID.ProtoReflect.Descriptor instead.
func (*FindFishBeginnerOfferByUserID) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{41}
}

func (x *FindFishBeginnerOfferByUserID) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *FindFishBeginnerOfferByUserID) GetNewPlayerAdjustSyspool() int32 {
	if x != nil && x.NewPlayerAdjustSyspool != nil {
		return *x.NewPlayerAdjustSyspool
	}
	return 0
}

type FishBeginnerOfferDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewPlayerList          []*FishBeginnerOffer `protobuf:"bytes,1,rep,name=NewPlayerList" json:"NewPlayerList,omitempty"`
	NewPlayerAdjustSyspool *int32               `protobuf:"varint,2,opt,name=NewPlayerAdjustSyspool" json:"NewPlayerAdjustSyspool,omitempty"`
}

func (x *FishBeginnerOfferDetail) Reset() {
	*x = FishBeginnerOfferDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishBeginnerOfferDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishBeginnerOfferDetail) ProtoMessage() {}

func (x *FishBeginnerOfferDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishBeginnerOfferDetail.ProtoReflect.Descriptor instead.
func (*FishBeginnerOfferDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{42}
}

func (x *FishBeginnerOfferDetail) GetNewPlayerList() []*FishBeginnerOffer {
	if x != nil {
		return x.NewPlayerList
	}
	return nil
}

func (x *FishBeginnerOfferDetail) GetNewPlayerAdjustSyspool() int32 {
	if x != nil && x.NewPlayerAdjustSyspool != nil {
		return *x.NewPlayerAdjustSyspool
	}
	return 0
}

type FishBeginnerOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Bullet *int32 `protobuf:"varint,2,req,name=Bullet" json:"Bullet,omitempty"`
	Score  *int32 `protobuf:"varint,3,req,name=Score" json:"Score,omitempty"`
	Status *int32 `protobuf:"varint,4,req,name=Status" json:"Status,omitempty"`
}

func (x *FishBeginnerOffer) Reset() {
	*x = FishBeginnerOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishBeginnerOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishBeginnerOffer) ProtoMessage() {}

func (x *FishBeginnerOffer) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishBeginnerOffer.ProtoReflect.Descriptor instead.
func (*FishBeginnerOffer) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{43}
}

func (x *FishBeginnerOffer) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *FishBeginnerOffer) GetBullet() int32 {
	if x != nil && x.Bullet != nil {
		return *x.Bullet
	}
	return 0
}

func (x *FishBeginnerOffer) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *FishBeginnerOffer) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type Cd21SysPoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagID      *int32 `protobuf:"varint,1,req,name=FlagID" json:"FlagID,omitempty"`
	SumBetMoney *int64 `protobuf:"varint,2,req,name=SumBetMoney" json:"SumBetMoney,omitempty"`
	SumBetCount *int64 `protobuf:"varint,3,req,name=SumBetCount" json:"SumBetCount,omitempty"`
	PoolAmount  *int64 `protobuf:"varint,4,req,name=PoolAmount" json:"PoolAmount,omitempty"`
}

func (x *Cd21SysPoolData) Reset() {
	*x = Cd21SysPoolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cd21SysPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cd21SysPoolData) ProtoMessage() {}

func (x *Cd21SysPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cd21SysPoolData.ProtoReflect.Descriptor instead.
func (*Cd21SysPoolData) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{44}
}

func (x *Cd21SysPoolData) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *Cd21SysPoolData) GetSumBetMoney() int64 {
	if x != nil && x.SumBetMoney != nil {
		return *x.SumBetMoney
	}
	return 0
}

func (x *Cd21SysPoolData) GetSumBetCount() int64 {
	if x != nil && x.SumBetCount != nil {
		return *x.SumBetCount
	}
	return 0
}

func (x *Cd21SysPoolData) GetPoolAmount() int64 {
	if x != nil && x.PoolAmount != nil {
		return *x.PoolAmount
	}
	return 0
}

type UserJackpotToBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	UpdateAmount *int64 `protobuf:"varint,2,req,name=UpdateAmount" json:"UpdateAmount,omitempty"`
}

func (x *UserJackpotToBox) Reset() {
	*x = UserJackpotToBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJackpotToBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJackpotToBox) ProtoMessage() {}

func (x *UserJackpotToBox) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJackpotToBox.ProtoReflect.Descriptor instead.
func (*UserJackpotToBox) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{45}
}

func (x *UserJackpotToBox) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserJackpotToBox) GetUpdateAmount() int64 {
	if x != nil && x.UpdateAmount != nil {
		return *x.UpdateAmount
	}
	return 0
}

// Slot 免費次數Detail
type Slot_FreeSpinDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`               //玩家ID
	GameID        *int32 `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`               // GameID ID
	FlagID        *int32 `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"`               // FlagID
	UserBet       *int64 `protobuf:"varint,4,req,name=UserBet" json:"UserBet,omitempty"`             //玩家下注金額
	FreeSpinGroup *int32 `protobuf:"varint,5,req,name=FreeSpinGroup" json:"FreeSpinGroup,omitempty"` // FreeSpin群組
	Times         *int32 `protobuf:"varint,6,req,name=Times" json:"Times,omitempty"`                 // FreeSpin次數
	ChooseRate    *int32 `protobuf:"varint,7,req,name=ChooseRate" json:"ChooseRate,omitempty"`       //玩家選擇倍率
	WinMoney      *int64 `protobuf:"varint,8,req,name=WinMoney" json:"WinMoney,omitempty"`           //玩家已贏得多少
	IsCoupon      *bool  `protobuf:"varint,9,req,name=IsCoupon" json:"IsCoupon,omitempty"`           //玩家是否使用禮碼
}

func (x *Slot_FreeSpinDetail) Reset() {
	*x = Slot_FreeSpinDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_FreeSpinDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_FreeSpinDetail) ProtoMessage() {}

func (x *Slot_FreeSpinDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_FreeSpinDetail.ProtoReflect.Descriptor instead.
func (*Slot_FreeSpinDetail) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{46}
}

func (x *Slot_FreeSpinDetail) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetUserBet() int64 {
	if x != nil && x.UserBet != nil {
		return *x.UserBet
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetFreeSpinGroup() int32 {
	if x != nil && x.FreeSpinGroup != nil {
		return *x.FreeSpinGroup
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetTimes() int32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetChooseRate() int32 {
	if x != nil && x.ChooseRate != nil {
		return *x.ChooseRate
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetWinMoney() int64 {
	if x != nil && x.WinMoney != nil {
		return *x.WinMoney
	}
	return 0
}

func (x *Slot_FreeSpinDetail) GetIsCoupon() bool {
	if x != nil && x.IsCoupon != nil {
		return *x.IsCoupon
	}
	return false
}

// Slot 讀取免費次數
type Slot_FreeSpinRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` // UserID
	GameID *int32 `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"` // GameID ID
	FlagID *int32 `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"` // FlagID
}

func (x *Slot_FreeSpinRead) Reset() {
	*x = Slot_FreeSpinRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_FreeSpinRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_FreeSpinRead) ProtoMessage() {}

func (x *Slot_FreeSpinRead) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_FreeSpinRead.ProtoReflect.Descriptor instead.
func (*Slot_FreeSpinRead) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{47}
}

func (x *Slot_FreeSpinRead) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *Slot_FreeSpinRead) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *Slot_FreeSpinRead) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

// Slot jackpot資料
type Slot_JackpotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID            *int32 `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`                       // GameID
	FlagID            *int32 `protobuf:"varint,2,req,name=FlagID" json:"FlagID,omitempty"`                       // FlagID
	TableNo           *int32 `protobuf:"varint,3,req,name=TableNo" json:"TableNo,omitempty"`                     // 桌子編號
	Contribution      *int64 `protobuf:"varint,4,req,name=Contribution" json:"Contribution,omitempty"`           // 玩家貢獻值
	TotalContribution *int64 `protobuf:"varint,5,req,name=TotalContribution" json:"TotalContribution,omitempty"` // 總貢獻值
	AwardTotal        *int64 `protobuf:"varint,6,req,name=AwardTotal" json:"AwardTotal,omitempty"`               // 已發送獎金總和
	Level             *int32 `protobuf:"varint,7,req,name=Level" json:"Level,omitempty"`                         // Jackpot層級
}

func (x *Slot_JackpotData) Reset() {
	*x = Slot_JackpotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_JackpotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_JackpotData) ProtoMessage() {}

func (x *Slot_JackpotData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_JackpotData.ProtoReflect.Descriptor instead.
func (*Slot_JackpotData) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{48}
}

func (x *Slot_JackpotData) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *Slot_JackpotData) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *Slot_JackpotData) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *Slot_JackpotData) GetContribution() int64 {
	if x != nil && x.Contribution != nil {
		return *x.Contribution
	}
	return 0
}

func (x *Slot_JackpotData) GetTotalContribution() int64 {
	if x != nil && x.TotalContribution != nil {
		return *x.TotalContribution
	}
	return 0
}

func (x *Slot_JackpotData) GetAwardTotal() int64 {
	if x != nil && x.AwardTotal != nil {
		return *x.AwardTotal
	}
	return 0
}

func (x *Slot_JackpotData) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// Slot jackpot資料
type Slot_JackpotAllData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllData []*Slot_JackpotData `protobuf:"bytes,1,rep,name=AllData" json:"AllData,omitempty"` //各池異動值
}

func (x *Slot_JackpotAllData) Reset() {
	*x = Slot_JackpotAllData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot_JackpotAllData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot_JackpotAllData) ProtoMessage() {}

func (x *Slot_JackpotAllData) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot_JackpotAllData.ProtoReflect.Descriptor instead.
func (*Slot_JackpotAllData) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{49}
}

func (x *Slot_JackpotAllData) GetAllData() []*Slot_JackpotData {
	if x != nil {
		return x.AllData
	}
	return nil
}

//伺服器資料
type ServerStatusMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId      *int32  `protobuf:"varint,1,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	GameId        *int32  `protobuf:"varint,2,req,name=game_id,json=gameId" json:"game_id,omitempty"`
	ServerStatus  *int32  `protobuf:"varint,3,req,name=server_status,json=serverStatus" json:"server_status,omitempty"`
	ServerMessage *string `protobuf:"bytes,4,opt,name=server_message,json=serverMessage" json:"server_message,omitempty"`
}

func (x *ServerStatusMsg) Reset() {
	*x = ServerStatusMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatusMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusMsg) ProtoMessage() {}

func (x *ServerStatusMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusMsg.ProtoReflect.Descriptor instead.
func (*ServerStatusMsg) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{50}
}

func (x *ServerStatusMsg) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *ServerStatusMsg) GetGameId() int32 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *ServerStatusMsg) GetServerStatus() int32 {
	if x != nil && x.ServerStatus != nil {
		return *x.ServerStatus
	}
	return 0
}

func (x *ServerStatusMsg) GetServerMessage() string {
	if x != nil && x.ServerMessage != nil {
		return *x.ServerMessage
	}
	return ""
}

//保證一制性
type ConsistencyDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`      //玩家id
	TableNo   *int32  `protobuf:"varint,2,req,name=tableNo" json:"tableNo,omitempty"`    //桌號
	BetNo     *string `protobuf:"bytes,3,req,name=betNo" json:"betNo,omitempty"`         //注單號
	GameNo    *string `protobuf:"bytes,4,req,name=gameNo" json:"gameNo,omitempty"`       //局號
	NowStep   []byte  `protobuf:"bytes,5,req,name=NowStep" json:"NowStep,omitempty"`     //當前需要做的項目
	NextSteps []byte  `protobuf:"bytes,6,req,name=NextSteps" json:"NextSteps,omitempty"` //後面需要做的項目
	IsDone    *bool   `protobuf:"varint,7,req,name=IsDone" json:"IsDone,omitempty"`      //是否完成一制性封包
}

func (x *ConsistencyDataMsg) Reset() {
	*x = ConsistencyDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyDataMsg) ProtoMessage() {}

func (x *ConsistencyDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyDataMsg.ProtoReflect.Descriptor instead.
func (*ConsistencyDataMsg) Descriptor() ([]byte, []int) {
	return file_GameMsg_proto_rawDescGZIP(), []int{51}
}

func (x *ConsistencyDataMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *ConsistencyDataMsg) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *ConsistencyDataMsg) GetBetNo() string {
	if x != nil && x.BetNo != nil {
		return *x.BetNo
	}
	return ""
}

func (x *ConsistencyDataMsg) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

func (x *ConsistencyDataMsg) GetNowStep() []byte {
	if x != nil {
		return x.NowStep
	}
	return nil
}

func (x *ConsistencyDataMsg) GetNextSteps() []byte {
	if x != nil {
		return x.NextSteps
	}
	return nil
}

func (x *ConsistencyDataMsg) GetIsDone() bool {
	if x != nil && x.IsDone != nil {
		return *x.IsDone
	}
	return false
}

var File_GameMsg_proto protoreflect.FileDescriptor

var file_GameMsg_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x54, 0x65, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x33, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22, 0x33,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22, 0xac,
	0x03, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x44, 0x72,
	0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x36, 0x0a,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x05,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74,
	0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x41, 0x0a,
	0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x3e, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x6a, 0x69, 0x6f, 0x75, 0x12,
	0x2f, 0x0a, 0x07, 0x50, 0x61, 0x69, 0x6a, 0x69, 0x6f, 0x75, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x6a, 0x69, 0x6f, 0x75, 0x52, 0x07, 0x50, 0x61, 0x69, 0x6a, 0x69, 0x6f, 0x75,
	0x22, 0x6a, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x69, 0x6a, 0x69, 0x6f, 0x75, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12,
	0x2b, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x6a, 0x69, 0x6f,
	0x75, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x0b,
	0x50, 0x61, 0x69, 0x6a, 0x69, 0x6f, 0x75, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x34, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x10,
	0x4c, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x75, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x75, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f,
	0x6c, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c,
	0x61, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x1e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x64, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x49, 0x64, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x97, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x78, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x49, 0x64, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x1a, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22,
	0x56, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x56, 0x69, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f,
	0x6f, 0x6c, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e,
	0x4c, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x22,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x4a, 0x0a, 0x0e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e,
	0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x18, 0x46, 0x69, 0x73, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73,
	0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x23, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x56,
	0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x4d, 0x0a, 0x0f, 0x46, 0x69, 0x73, 0x68, 0x56, 0x49, 0x50, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x56, 0x49, 0x50, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0f, 0x46, 0x69, 0x73, 0x68, 0x56, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x73, 0x68, 0x56, 0x49, 0x50, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x75, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x75, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x22, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54,
	0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x55, 0x70, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c,
	0x61, 0x67, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x0e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f,
	0x6c, 0x46, 0x69, 0x73, 0x68, 0x55, 0x70, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x46, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x24,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x55, 0x70, 0x64,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x9e, 0x01, 0x0a, 0x23, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x69,
	0x73, 0x68, 0x55, 0x70, 0x64, 0x56, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x12, 0x5f, 0x0a, 0x12, 0x46, 0x69, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f,
	0x6c, 0x46, 0x69, 0x73, 0x68, 0x55, 0x70, 0x64, 0x56, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x46,
	0x69, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x63, 0x0a, 0x25, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x69,
	0x73, 0x68, 0x55, 0x70, 0x64, 0x56, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x1b, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54,
	0x6f, 0x6f, 0x6c, 0x5a, 0x6a, 0x68, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x5a, 0x6a, 0x68, 0x56,
	0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x97, 0x03, 0x0a, 0x17, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f,
	0x6f, 0x6c, 0x5a, 0x6a, 0x68, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x69, 0x6e, 0x4c,
	0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x57,
	0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x69,
	0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e,
	0x4e, 0x65, 0x78, 0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4e, 0x65, 0x78, 0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x14, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x78, 0x74,
	0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65,
	0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4e,
	0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x53, 0x75, 0x6d, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x53,
	0x75, 0x6d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x53, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0f, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x53, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x22, 0xba,
	0x01, 0x0a, 0x1a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x5a, 0x6a, 0x68, 0x55,
	0x70, 0x64, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x14, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f,
	0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0f,
	0x46, 0x69, 0x73, 0x68, 0x53, 0x79, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x75,
	0x6d, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x6d,
	0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75,
	0x6d, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x53, 0x75,
	0x6d, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d,
	0x53, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3c, 0x0a,
	0x19, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x53, 0x79, 0x73, 0x70,
	0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x53, 0x79, 0x73,
	0x70, 0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x14, 0x46,
	0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0e, 0x46,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x18, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x48,
	0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x48,
	0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x46,
	0x69, 0x73, 0x68, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x53, 0x79, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x73,
	0x68, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x53, 0x79, 0x73, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x53, 0x79, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x22,
	0x71, 0x0a, 0x11, 0x46, 0x69, 0x73, 0x68, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x42, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x43, 0x64, 0x32, 0x31, 0x53, 0x79, 0x73, 0x50, 0x6f,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x75, 0x6d, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x75, 0x6d, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x13, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x46, 0x72, 0x65, 0x65,
	0x53, 0x70, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c,
	0x61, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x22, 0x5b, 0x0a, 0x11, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x22, 0xe4, 0x01,
	0x0a, 0x10, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c,
	0x61, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x4b, 0x0a, 0x13, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x41,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x65, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x4e, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x07, 0x4e, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x4e, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x44, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_proto_rawDescOnce sync.Once
	file_GameMsg_proto_rawDescData = file_GameMsg_proto_rawDesc
)

func file_GameMsg_proto_rawDescGZIP() []byte {
	file_GameMsg_proto_rawDescOnce.Do(func() {
		file_GameMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_proto_rawDescData)
	})
	return file_GameMsg_proto_rawDescData
}

var file_GameMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_GameMsg_proto_goTypes = []interface{}{
	(*TestGameChat)(nil),                          // 0: netproto.TestGameChat
	(*TestGameScore)(nil),                         // 1: netproto.TestGameScore
	(*TestGameEnd)(nil),                           // 2: netproto.TestGameEnd
	(*UserEnter)(nil),                             // 3: netproto.UserEnter
	(*UserLeave)(nil),                             // 4: netproto.UserLeave
	(*UserStateChange)(nil),                       // 5: netproto.UserStateChange
	(*GameUser)(nil),                              // 6: netproto.GameUser
	(*GamePoker)(nil),                             // 7: netproto.GamePoker
	(*UserPoker)(nil),                             // 8: netproto.UserPoker
	(*PokerCard)(nil),                             // 9: netproto.PokerCard
	(*GamePaijiou)(nil),                           // 10: netproto.GamePaijiou
	(*UserPaijiou)(nil),                           // 11: netproto.UserPaijiou
	(*PaijiouCard)(nil),                           // 12: netproto.PaijiouCard
	(*UserActionCommited)(nil),                    // 13: netproto.UserActionCommited
	(*AllUserActionCommited)(nil),                 // 14: netproto.AllUserActionCommited
	(*LookOnUserNotify)(nil),                      // 15: netproto.LookOnUserNotify
	(*UserLuckScore)(nil),                         // 16: netproto.UserLuckScore
	(*UserLuckScoreRet)(nil),                      // 17: netproto.UserLuckScoreRet
	(*GameBeginCountDown)(nil),                    // 18: netproto.GameBeginCountDown
	(*SuperToolAddChangeLog)(nil),                 // 19: netproto.SuperToolAddChangeLog
	(*SuperToolAddAssignReward)(nil),              // 20: netproto.SuperToolAddAssignReward
	(*SuperToolGetAssignRewardDetail)(nil),        // 21: netproto.SuperToolGetAssignRewardDetail
	(*SuperToolAddAssignRewardDetail)(nil),        // 22: netproto.SuperToolAddAssignRewardDetail
	(*SuperToolAssignRewardDetail)(nil),           // 23: netproto.SuperToolAssignRewardDetail
	(*SuperToolGetVipUserRequest)(nil),            // 24: netproto.SuperToolGetVipUserRequest
	(*SuperToolVipUserDataList)(nil),              // 25: netproto.SuperToolVipUserDataList
	(*SuperToolVipUserData)(nil),                  // 26: netproto.SuperToolVipUserData
	(*SuperToolFishGetSystemRewardDetail)(nil),    // 27: netproto.SuperToolFishGetSystemRewardDetail
	(*FishSystemRewardDataList)(nil),              // 28: netproto.FishSystemRewardDataList
	(*SuperToolFishGetVIPUserRewardDetail)(nil),   // 29: netproto.SuperToolFishGetVIPUserRewardDetail
	(*FishVIPUserRewardDataList)(nil),             // 30: netproto.FishVIPUserRewardDataList
	(*SuperToolFishUpdSystemRewardDetail)(nil),    // 31: netproto.SuperToolFishUpdSystemRewardDetail
	(*SuperToolFishUpdSystemRewardDataList)(nil),  // 32: netproto.SuperToolFishUpdSystemRewardDataList
	(*SuperToolfishUpdVIPUserRewardDetail)(nil),   // 33: netproto.SuperToolfishUpdVIPUserRewardDetail
	(*SuperToolFishUpdVIPUserRewardDataList)(nil), // 34: netproto.SuperToolFishUpdVIPUserRewardDataList
	(*SuperToolZjhVipUserDataList)(nil),           // 35: netproto.SuperToolZjhVipUserDataList
	(*SuperToolZjhVipUserData)(nil),               // 36: netproto.SuperToolZjhVipUserData
	(*SuperToolZjhUpdVipUserData)(nil),            // 37: netproto.SuperToolZjhUpdVipUserData
	(*FishSysPoolData)(nil),                       // 38: netproto.FishSysPoolData
	(*FishPlayerPoolDetail)(nil),                  // 39: netproto.FishPlayerPoolDetail
	(*FishPlayerPoolDetailList)(nil),              // 40: netproto.FishPlayerPoolDetailList
	(*FindFishBeginnerOfferByUserID)(nil),         // 41: netproto.FindFishBeginnerOfferByUserID
	(*FishBeginnerOfferDetail)(nil),               // 42: netproto.FishBeginnerOfferDetail
	(*FishBeginnerOffer)(nil),                     // 43: netproto.FishBeginnerOffer
	(*Cd21SysPoolData)(nil),                       // 44: netproto.Cd21SysPoolData
	(*UserJackpotToBox)(nil),                      // 45: netproto.UserJackpotToBox
	(*Slot_FreeSpinDetail)(nil),                   // 46: netproto.Slot_FreeSpinDetail
	(*Slot_FreeSpinRead)(nil),                     // 47: netproto.Slot_FreeSpinRead
	(*Slot_JackpotData)(nil),                      // 48: netproto.Slot_JackpotData
	(*Slot_JackpotAllData)(nil),                   // 49: netproto.Slot_JackpotAllData
	(*ServerStatusMsg)(nil),                       // 50: netproto.ServerStatusMsg
	(*ConsistencyDataMsg)(nil),                    // 51: netproto.ConsistencyDataMsg
}
var file_GameMsg_proto_depIdxs = []int32{
	6,  // 0: netproto.UserEnter.User:type_name -> netproto.GameUser
	6,  // 1: netproto.UserLeave.User:type_name -> netproto.GameUser
	6,  // 2: netproto.UserStateChange.User:type_name -> netproto.GameUser
	8,  // 3: netproto.GamePoker.Poker:type_name -> netproto.UserPoker
	9,  // 4: netproto.UserPoker.Cards:type_name -> netproto.PokerCard
	11, // 5: netproto.GamePaijiou.Paijiou:type_name -> netproto.UserPaijiou
	12, // 6: netproto.UserPaijiou.Cards:type_name -> netproto.PaijiouCard
	22, // 7: netproto.SuperToolAddAssignReward.DetailList:type_name -> netproto.SuperToolAddAssignRewardDetail
	26, // 8: netproto.SuperToolVipUserDataList.DataList:type_name -> netproto.SuperToolVipUserData
	28, // 9: netproto.SuperToolFishGetSystemRewardDetail.FishRewardList:type_name -> netproto.FishSystemRewardDataList
	30, // 10: netproto.SuperToolFishGetVIPUserRewardDetail.FishVIPUserList:type_name -> netproto.FishVIPUserRewardDataList
	32, // 11: netproto.SuperToolFishUpdSystemRewardDetail.FishRewardList:type_name -> netproto.SuperToolFishUpdSystemRewardDataList
	34, // 12: netproto.SuperToolfishUpdVIPUserRewardDetail.FishUserRewardList:type_name -> netproto.SuperToolFishUpdVIPUserRewardDataList
	36, // 13: netproto.SuperToolZjhVipUserDataList.DataList:type_name -> netproto.SuperToolZjhVipUserData
	40, // 14: netproto.FishPlayerPoolDetail.FishRewardList:type_name -> netproto.FishPlayerPoolDetailList
	43, // 15: netproto.FishBeginnerOfferDetail.NewPlayerList:type_name -> netproto.FishBeginnerOffer
	48, // 16: netproto.Slot_JackpotAllData.AllData:type_name -> netproto.Slot_JackpotData
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_GameMsg_proto_init() }
func file_GameMsg_proto_init() {
	if File_GameMsg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGameChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGameEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PokerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePaijiou); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPaijiou); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaijiouCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActionCommited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUserActionCommited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookOnUserNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLuckScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLuckScoreRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBeginCountDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolAddChangeLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolAddAssignReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolGetAssignRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolAddAssignRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolAssignRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolGetVipUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolVipUserDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolVipUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolFishGetSystemRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishSystemRewardDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolFishGetVIPUserRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishVIPUserRewardDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolFishUpdSystemRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolFishUpdSystemRewardDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolfishUpdVIPUserRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolFishUpdVIPUserRewardDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolZjhVipUserDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolZjhVipUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolZjhUpdVipUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishSysPoolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPlayerPoolDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPlayerPoolDetailList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFishBeginnerOfferByUserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishBeginnerOfferDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishBeginnerOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cd21SysPoolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJackpotToBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_FreeSpinDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_FreeSpinRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_JackpotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot_JackpotAllData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatusMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_proto_goTypes,
		DependencyIndexes: file_GameMsg_proto_depIdxs,
		MessageInfos:      file_GameMsg_proto_msgTypes,
	}.Build()
	File_GameMsg_proto = out.File
	file_GameMsg_proto_rawDesc = nil
	file_GameMsg_proto_goTypes = nil
	file_GameMsg_proto_depIdxs = nil
}
