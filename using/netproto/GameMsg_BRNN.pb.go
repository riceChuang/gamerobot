// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_BRNN.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RetType int32

const (
	RetType_UNKNOWN        RetType = 0
	RetType_SUCCESS        RetType = 1 //下注成功
	RetType_NOMONEY        RetType = 2 //用户金额不足
	RetType_NONTYPE        RetType = 3 //下注的类型未找到
	RetType_ISZHUANG       RetType = 4 //庄家不能下注
	RetType_BETOUTOFRANGE  RetType = 5 //此类下注已达到上限
	RetType_MONEYLESSLIMIT RetType = 6 //用戶金幣低於最低限制
)

// Enum value maps for RetType.
var (
	RetType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "NOMONEY",
		3: "NONTYPE",
		4: "ISZHUANG",
		5: "BETOUTOFRANGE",
		6: "MONEYLESSLIMIT",
	}
	RetType_value = map[string]int32{
		"UNKNOWN":        0,
		"SUCCESS":        1,
		"NOMONEY":        2,
		"NONTYPE":        3,
		"ISZHUANG":       4,
		"BETOUTOFRANGE":  5,
		"MONEYLESSLIMIT": 6,
	}
)

func (x RetType) Enum() *RetType {
	p := new(RetType)
	*p = x
	return p
}

func (x RetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_BRNN_proto_enumTypes[0].Descriptor()
}

func (RetType) Type() protoreflect.EnumType {
	return &file_GameMsg_BRNN_proto_enumTypes[0]
}

func (x RetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RetType(num)
	return nil
}

// Deprecated: Use RetType.Descriptor instead.
func (RetType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{0}
}

//下注设置
type BRNN_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCount      []int32 `protobuf:"varint,1,rep,name=BetCount" json:"BetCount,omitempty"`           //一次下注的数量
	BetMoney      *int32  `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`           //一次下注的钱
	ZhuangLimit   *int64  `protobuf:"varint,3,req,name=ZhuangLimit" json:"ZhuangLimit,omitempty"`     //上庄钱限制
	MaxZhuang     *int32  `protobuf:"varint,4,req,name=MaxZhuang" json:"MaxZhuang,omitempty"`         //当庄局数
	OnceFapei     *int32  `protobuf:"varint,5,req,name=OnceFapei" json:"OnceFapei,omitempty"`         //true一次開獎結果 或 false分次發牌開獎
	MaxTotalMoney []int64 `protobuf:"varint,6,rep,name=MaxTotalMoney" json:"MaxTotalMoney,omitempty"` //每個區塊最大累積下注金額
}

func (x *BRNN_Setting) Reset() {
	*x = BRNN_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_Setting) ProtoMessage() {}

func (x *BRNN_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_Setting.ProtoReflect.Descriptor instead.
func (*BRNN_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{0}
}

func (x *BRNN_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *BRNN_Setting) GetBetMoney() int32 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *BRNN_Setting) GetZhuangLimit() int64 {
	if x != nil && x.ZhuangLimit != nil {
		return *x.ZhuangLimit
	}
	return 0
}

func (x *BRNN_Setting) GetMaxZhuang() int32 {
	if x != nil && x.MaxZhuang != nil {
		return *x.MaxZhuang
	}
	return 0
}

func (x *BRNN_Setting) GetOnceFapei() int32 {
	if x != nil && x.OnceFapei != nil {
		return *x.OnceFapei
	}
	return 0
}

func (x *BRNN_Setting) GetMaxTotalMoney() []int64 {
	if x != nil {
		return x.MaxTotalMoney
	}
	return nil
}

//状态消息
type BRNN_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"`     //状态
	Time    *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`       //此状态的剩余时间
	IsScene *bool  `protobuf:"varint,3,req,name=IsScene" json:"IsScene,omitempty"` //是否來自場景
}

func (x *BRNN_Sate) Reset() {
	*x = BRNN_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_Sate) ProtoMessage() {}

func (x *BRNN_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_Sate.ProtoReflect.Descriptor instead.
func (*BRNN_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{1}
}

func (x *BRNN_Sate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *BRNN_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *BRNN_Sate) GetIsScene() bool {
	if x != nil && x.IsScene != nil {
		return *x.IsScene
	}
	return false
}

//用户断线重连下注消息
type BRNN_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMoney *int64               `protobuf:"varint,1,req,name=UserMoney" json:"UserMoney,omitempty"`
	BetInfo   []*BRNN_BroadCastBet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *BRNN_UserBetInfo) Reset() {
	*x = BRNN_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_UserBetInfo) ProtoMessage() {}

func (x *BRNN_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_UserBetInfo.ProtoReflect.Descriptor instead.
func (*BRNN_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{2}
}

func (x *BRNN_UserBetInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *BRNN_UserBetInfo) GetBetInfo() []*BRNN_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//廣播發牌給所有(莊*1 , 閒*4)
type BRNN_BrodcastPokerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPokerCard []*BRNN_BrodcastUserPokerCard `protobuf:"bytes,1,rep,name=UserPokerCard" json:"UserPokerCard,omitempty"`
}

func (x *BRNN_BrodcastPokerCard) Reset() {
	*x = BRNN_BrodcastPokerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BrodcastPokerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BrodcastPokerCard) ProtoMessage() {}

func (x *BRNN_BrodcastPokerCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BrodcastPokerCard.ProtoReflect.Descriptor instead.
func (*BRNN_BrodcastPokerCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{3}
}

func (x *BRNN_BrodcastPokerCard) GetUserPokerCard() []*BRNN_BrodcastUserPokerCard {
	if x != nil {
		return x.UserPokerCard
	}
	return nil
}

//每個座位上的亮牌
type BRNN_BrodcastUserPokerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitNo     *int32       `protobuf:"varint,1,req,name=SitNo" json:"SitNo,omitempty"`
	CardGroup []*PokerCard `protobuf:"bytes,2,rep,name=CardGroup" json:"CardGroup,omitempty"`
}

func (x *BRNN_BrodcastUserPokerCard) Reset() {
	*x = BRNN_BrodcastUserPokerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BrodcastUserPokerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BrodcastUserPokerCard) ProtoMessage() {}

func (x *BRNN_BrodcastUserPokerCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BrodcastUserPokerCard.ProtoReflect.Descriptor instead.
func (*BRNN_BrodcastUserPokerCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{4}
}

func (x *BRNN_BrodcastUserPokerCard) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

func (x *BRNN_BrodcastUserPokerCard) GetCardGroup() []*PokerCard {
	if x != nil {
		return x.CardGroup
	}
	return nil
}

//广播用户下注的数组, 廣播下注消息
type BRNN_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32               `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*BRNN_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *BRNN_BroadCastBetArr) Reset() {
	*x = BRNN_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BroadCastBetArr) ProtoMessage() {}

func (x *BRNN_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*BRNN_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{5}
}

func (x *BRNN_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BRNN_BroadCastBetArr) GetBroadCastBetArr() []*BRNN_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//广播用户下注内容数据结构
type BRNN_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Money     *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
	UserID    *int32 `protobuf:"varint,3,opt,name=UserID" json:"UserID,omitempty"` //此下注籌碼的UserID
	LuckyStar *bool  `protobuf:"varint,4,req,name=LuckyStar" json:"LuckyStar,omitempty"`
}

func (x *BRNN_BroadCastBet) Reset() {
	*x = BRNN_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BroadCastBet) ProtoMessage() {}

func (x *BRNN_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BroadCastBet.ProtoReflect.Descriptor instead.
func (*BRNN_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{6}
}

func (x *BRNN_BroadCastBet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BRNN_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BRNN_BroadCastBet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BRNN_BroadCastBet) GetLuckyStar() bool {
	if x != nil && x.LuckyStar != nil {
		return *x.LuckyStar
	}
	return false
}

//廣播已下注和還可下注
type BRNN_BroadCastTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlreadyTotalBet *int64 `protobuf:"varint,1,req,name=AlreadyTotalBet" json:"AlreadyTotalBet,omitempty"` //已下注
	AbleTotalBet    *int64 `protobuf:"varint,2,req,name=AbleTotalBet" json:"AbleTotalBet,omitempty"`       //還可下注
}

func (x *BRNN_BroadCastTotal) Reset() {
	*x = BRNN_BroadCastTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BroadCastTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BroadCastTotal) ProtoMessage() {}

func (x *BRNN_BroadCastTotal) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BroadCastTotal.ProtoReflect.Descriptor instead.
func (*BRNN_BroadCastTotal) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{7}
}

func (x *BRNN_BroadCastTotal) GetAlreadyTotalBet() int64 {
	if x != nil && x.AlreadyTotalBet != nil {
		return *x.AlreadyTotalBet
	}
	return 0
}

func (x *BRNN_BroadCastTotal) GetAbleTotalBet() int64 {
	if x != nil && x.AbleTotalBet != nil {
		return *x.AbleTotalBet
	}
	return 0
}

//用户下注数组, 用户下注
type BRNN_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*BRNN_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *BRNN_BetArr) Reset() {
	*x = BRNN_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BetArr) ProtoMessage() {}

func (x *BRNN_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BetArr.ProtoReflect.Descriptor instead.
func (*BRNN_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{8}
}

func (x *BRNN_BetArr) GetBetArr() []*BRNN_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type BRNN_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *int32 `protobuf:"varint,1,req,name=BetType" json:"BetType,omitempty"`
	Count   *int32 `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
}

func (x *BRNN_Bet) Reset() {
	*x = BRNN_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_Bet) ProtoMessage() {}

func (x *BRNN_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_Bet.ProtoReflect.Descriptor instead.
func (*BRNN_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{9}
}

func (x *BRNN_Bet) GetBetType() int32 {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return 0
}

func (x *BRNN_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//下注的结果
type BRNN_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *RetType    `protobuf:"varint,1,req,name=Ret,enum=netproto.RetType,def=0" json:"Ret,omitempty"`
	Money  *int64      `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`  //用户的钱，下注以后的金额。
	Type   *int32      `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`    //下注超过限制的下注类型
	BetArr []*BRNN_Bet `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"` //用户下注数据
}

// Default values for BRNN_BetRet fields.
const (
	Default_BRNN_BetRet_Ret = RetType_UNKNOWN
)

func (x *BRNN_BetRet) Reset() {
	*x = BRNN_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BetRet) ProtoMessage() {}

func (x *BRNN_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BetRet.ProtoReflect.Descriptor instead.
func (*BRNN_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{10}
}

func (x *BRNN_BetRet) GetRet() RetType {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return Default_BRNN_BetRet_Ret
}

func (x *BRNN_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BRNN_BetRet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BRNN_BetRet) GetBetArr() []*BRNN_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//游戏撲克结果
type BRNN_GameResultPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitNo        *int32       `protobuf:"varint,1,req,name=SitNo" json:"SitNo,omitempty"`               //座位的編號
	SitPoker     []*PokerCard `protobuf:"bytes,2,rep,name=SitPoker" json:"SitPoker,omitempty"`          //座位上的撲克牌
	NiuNiuRet    *int32       `protobuf:"varint,3,req,name=NiuNiuRet" json:"NiuNiuRet,omitempty"`       //牛牛類型: 0 五小牛; 1四炸; 2 五花牛; 3 牛牛; 4 有牛; 5 無牛;
	NiuNiuNumber *int32       `protobuf:"varint,4,req,name=NiuNiuNumber" json:"NiuNiuNumber,omitempty"` //牛幾
	WinLoss      *int32       `protobuf:"varint,5,req,name=WinLoss" json:"WinLoss,omitempty"`           //0 輸 , 1 贏
}

func (x *BRNN_GameResultPoker) Reset() {
	*x = BRNN_GameResultPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_GameResultPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_GameResultPoker) ProtoMessage() {}

func (x *BRNN_GameResultPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_GameResultPoker.ProtoReflect.Descriptor instead.
func (*BRNN_GameResultPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{11}
}

func (x *BRNN_GameResultPoker) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

func (x *BRNN_GameResultPoker) GetSitPoker() []*PokerCard {
	if x != nil {
		return x.SitPoker
	}
	return nil
}

func (x *BRNN_GameResultPoker) GetNiuNiuRet() int32 {
	if x != nil && x.NiuNiuRet != nil {
		return *x.NiuNiuRet
	}
	return 0
}

func (x *BRNN_GameResultPoker) GetNiuNiuNumber() int32 {
	if x != nil && x.NiuNiuNumber != nil {
		return *x.NiuNiuNumber
	}
	return 0
}

func (x *BRNN_GameResultPoker) GetWinLoss() int32 {
	if x != nil && x.WinLoss != nil {
		return *x.WinLoss
	}
	return 0
}

//游戏用户赢钱结果
type BRNN_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin    *int64               `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`
	SelfWin      *int64               `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	WinUserInfo  []*BRNN_WinUerInfo   `protobuf:"bytes,3,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"`   //赢钱前三名的人信息
	StageUerInfo []*BRNN_StageUerInfo `protobuf:"bytes,4,rep,name=StageUerInfo" json:"StageUerInfo,omitempty"` //標誌玩家赢钱信息
}

func (x *BRNN_GameResultUserMoney) Reset() {
	*x = BRNN_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_GameResultUserMoney) ProtoMessage() {}

func (x *BRNN_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*BRNN_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{12}
}

func (x *BRNN_GameResultUserMoney) GetZhuangWin() int64 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *BRNN_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *BRNN_GameResultUserMoney) GetWinUserInfo() []*BRNN_WinUerInfo {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

func (x *BRNN_GameResultUserMoney) GetStageUerInfo() []*BRNN_StageUerInfo {
	if x != nil {
		return x.StageUerInfo
	}
	return nil
}

//赢钱玩家信息
type BRNN_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *BRNN_WinUerInfo) Reset() {
	*x = BRNN_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_WinUerInfo) ProtoMessage() {}

func (x *BRNN_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_WinUerInfo.ProtoReflect.Descriptor instead.
func (*BRNN_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{13}
}

func (x *BRNN_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *BRNN_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//上庄结果
type BRNN_ShangzhuangRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"` //值为1时下庄成功，值为0表示上庄成功，值为-1时上庄失败资金不足，值为-2时已经在上庄列表中。
}

func (x *BRNN_ShangzhuangRet) Reset() {
	*x = BRNN_ShangzhuangRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_ShangzhuangRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_ShangzhuangRet) ProtoMessage() {}

func (x *BRNN_ShangzhuangRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_ShangzhuangRet.ProtoReflect.Descriptor instead.
func (*BRNN_ShangzhuangRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{14}
}

func (x *BRNN_ShangzhuangRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//是否上庄
type BRNN_ShangZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShangZhuang *bool `protobuf:"varint,1,req,name=IsShangZhuang" json:"IsShangZhuang,omitempty"`
}

func (x *BRNN_ShangZhuang) Reset() {
	*x = BRNN_ShangZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_ShangZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_ShangZhuang) ProtoMessage() {}

func (x *BRNN_ShangZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_ShangZhuang.ProtoReflect.Descriptor instead.
func (*BRNN_ShangZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{15}
}

func (x *BRNN_ShangZhuang) GetIsShangZhuang() bool {
	if x != nil && x.IsShangZhuang != nil {
		return *x.IsShangZhuang
	}
	return false
}

//庄家信息
type BRNN_ZhuangInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32      `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	LastTurn *int32      `protobuf:"varint,2,req,name=LastTurn" json:"LastTurn,omitempty"`
	UserInfo []*GameUser `protobuf:"bytes,3,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *BRNN_ZhuangInfo) Reset() {
	*x = BRNN_ZhuangInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_ZhuangInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_ZhuangInfo) ProtoMessage() {}

func (x *BRNN_ZhuangInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_ZhuangInfo.ProtoReflect.Descriptor instead.
func (*BRNN_ZhuangInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{16}
}

func (x *BRNN_ZhuangInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BRNN_ZhuangInfo) GetLastTurn() int32 {
	if x != nil && x.LastTurn != nil {
		return *x.LastTurn
	}
	return 0
}

func (x *BRNN_ZhuangInfo) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//上庄列表
type BRNN_ZhuangList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*GameUser `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *BRNN_ZhuangList) Reset() {
	*x = BRNN_ZhuangList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_ZhuangList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_ZhuangList) ProtoMessage() {}

func (x *BRNN_ZhuangList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_ZhuangList.ProtoReflect.Descriptor instead.
func (*BRNN_ZhuangList) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{17}
}

func (x *BRNN_ZhuangList) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//清除结果回应消息
type BRNN_BetClearRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` //当前的钱
	Ret   *int32 `protobuf:"varint,2,req,name=Ret" json:"Ret,omitempty"`     //清除结果-1，清理失败，达到清理上限，0清理成功
}

func (x *BRNN_BetClearRet) Reset() {
	*x = BRNN_BetClearRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_BetClearRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_BetClearRet) ProtoMessage() {}

func (x *BRNN_BetClearRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_BetClearRet.ProtoReflect.Descriptor instead.
func (*BRNN_BetClearRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{18}
}

func (x *BRNN_BetClearRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BRNN_BetClearRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//大富豪列表消息
type BRNN_RichestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichestList []*BRNN_Richest `protobuf:"bytes,1,rep,name=RichestList" json:"RichestList,omitempty"` //富豪的排行榜
}

func (x *BRNN_RichestList) Reset() {
	*x = BRNN_RichestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_RichestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_RichestList) ProtoMessage() {}

func (x *BRNN_RichestList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_RichestList.ProtoReflect.Descriptor instead.
func (*BRNN_RichestList) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{19}
}

func (x *BRNN_RichestList) GetRichestList() []*BRNN_Richest {
	if x != nil {
		return x.RichestList
	}
	return nil
}

//大富豪的玩家資訊
type BRNN_Richest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking       *int32 `protobuf:"varint,1,req,name=Ranking" json:"Ranking,omitempty"`             //富豪排名
	UserID        *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`               //富豪ID
	UserFaceID    *int32 `protobuf:"varint,3,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //富豪頭像ID
	Money         *int64 `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`                 //富豪当前身上的钱
	AvatarFrameID *int32 `protobuf:"varint,5,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
}

func (x *BRNN_Richest) Reset() {
	*x = BRNN_Richest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_Richest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_Richest) ProtoMessage() {}

func (x *BRNN_Richest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_Richest.ProtoReflect.Descriptor instead.
func (*BRNN_Richest) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{20}
}

func (x *BRNN_Richest) GetRanking() int32 {
	if x != nil && x.Ranking != nil {
		return *x.Ranking
	}
	return 0
}

func (x *BRNN_Richest) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BRNN_Richest) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *BRNN_Richest) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BRNN_Richest) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

//幸運星玩家資訊
type BRNN_LuckyStar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`               //幸運星ID
	UserFaceID    *int32 `protobuf:"varint,2,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //幸運星頭像ID
	AvatarFrameID *int32 `protobuf:"varint,3,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
}

func (x *BRNN_LuckyStar) Reset() {
	*x = BRNN_LuckyStar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_LuckyStar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_LuckyStar) ProtoMessage() {}

func (x *BRNN_LuckyStar) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_LuckyStar.ProtoReflect.Descriptor instead.
func (*BRNN_LuckyStar) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{21}
}

func (x *BRNN_LuckyStar) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BRNN_LuckyStar) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *BRNN_LuckyStar) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

//標誌玩家赢钱信息
type BRNN_StageUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Win    *int64 `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *BRNN_StageUerInfo) Reset() {
	*x = BRNN_StageUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_StageUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_StageUerInfo) ProtoMessage() {}

func (x *BRNN_StageUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_StageUerInfo.ProtoReflect.Descriptor instead.
func (*BRNN_StageUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{22}
}

func (x *BRNN_StageUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *BRNN_StageUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//玩家牌局編號
type BRNN_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *BRNN_GameNoInfo) Reset() {
	*x = BRNN_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_BRNN_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRNN_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRNN_GameNoInfo) ProtoMessage() {}

func (x *BRNN_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_BRNN_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRNN_GameNoInfo.ProtoReflect.Descriptor instead.
func (*BRNN_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_BRNN_proto_rawDescGZIP(), []int{23}
}

func (x *BRNN_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

var File_GameMsg_BRNN_proto protoreflect.FileDescriptor

var file_GameMsg_BRNN_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x52, 0x4e, 0x4e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01,
	0x0a, 0x0c, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x78,
	0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x6e, 0x63, 0x65, 0x46, 0x61,
	0x70, 0x65, 0x69, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x6e, 0x63, 0x65, 0x46,
	0x61, 0x70, 0x65, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x78,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x4f, 0x0a, 0x09, 0x42, 0x52,
	0x4e, 0x4e, 0x5f, 0x53, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x42,
	0x52, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x16, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x4a,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x22, 0x65, 0x0a, 0x1a, 0x42, 0x52,
	0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x74, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x31,
	0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x75, 0x0a, 0x14, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x73, 0x0a, 0x11, 0x42, 0x52, 0x4e, 0x4e,
	0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x22, 0x63, 0x0a,
	0x13, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x41, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x65, 0x74, 0x22, 0x39, 0x0a, 0x0b, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x4e,
	0x4e, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x3a, 0x0a,
	0x08, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x42, 0x52,
	0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x52, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x4e,
	0x4e, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0xb9, 0x01,
	0x0a, 0x14, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x08,
	0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x52, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x52, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4e,
	0x69, 0x75, 0x4e, 0x69, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x42, 0x52,
	0x4e, 0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x52, 0x4e, 0x4e, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x4e,
	0x4e, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x0f,
	0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x57,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x27, 0x0a,
	0x13, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x53,
	0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73,
	0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x22, 0x75, 0x0a, 0x0f, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x42, 0x52, 0x4e, 0x4e, 0x5f,
	0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x10, 0x42, 0x52,
	0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x4c, 0x0a, 0x10, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x52,
	0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x52, 0x69,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x52, 0x4e, 0x4e, 0x5f,
	0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x52, 0x69,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x0e, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x11, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57,
	0x69, 0x6e, 0x22, 0x29, 0x0a, 0x0f, 0x42, 0x52, 0x4e, 0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x2a, 0x72, 0x0a,
	0x07, 0x52, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x53, 0x5a, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45,
	0x54, 0x4f, 0x55, 0x54, 0x4f, 0x46, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x4c, 0x45, 0x53, 0x53, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10,
	0x06, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_BRNN_proto_rawDescOnce sync.Once
	file_GameMsg_BRNN_proto_rawDescData = file_GameMsg_BRNN_proto_rawDesc
)

func file_GameMsg_BRNN_proto_rawDescGZIP() []byte {
	file_GameMsg_BRNN_proto_rawDescOnce.Do(func() {
		file_GameMsg_BRNN_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_BRNN_proto_rawDescData)
	})
	return file_GameMsg_BRNN_proto_rawDescData
}

var file_GameMsg_BRNN_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_GameMsg_BRNN_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_GameMsg_BRNN_proto_goTypes = []interface{}{
	(RetType)(0),                       // 0: netproto.RetType
	(*BRNN_Setting)(nil),               // 1: netproto.BRNN_Setting
	(*BRNN_Sate)(nil),                  // 2: netproto.BRNN_Sate
	(*BRNN_UserBetInfo)(nil),           // 3: netproto.BRNN_UserBetInfo
	(*BRNN_BrodcastPokerCard)(nil),     // 4: netproto.BRNN_BrodcastPokerCard
	(*BRNN_BrodcastUserPokerCard)(nil), // 5: netproto.BRNN_BrodcastUserPokerCard
	(*BRNN_BroadCastBetArr)(nil),       // 6: netproto.BRNN_BroadCastBetArr
	(*BRNN_BroadCastBet)(nil),          // 7: netproto.BRNN_BroadCastBet
	(*BRNN_BroadCastTotal)(nil),        // 8: netproto.BRNN_BroadCastTotal
	(*BRNN_BetArr)(nil),                // 9: netproto.BRNN_BetArr
	(*BRNN_Bet)(nil),                   // 10: netproto.BRNN_Bet
	(*BRNN_BetRet)(nil),                // 11: netproto.BRNN_BetRet
	(*BRNN_GameResultPoker)(nil),       // 12: netproto.BRNN_GameResultPoker
	(*BRNN_GameResultUserMoney)(nil),   // 13: netproto.BRNN_GameResultUserMoney
	(*BRNN_WinUerInfo)(nil),            // 14: netproto.BRNN_WinUerInfo
	(*BRNN_ShangzhuangRet)(nil),        // 15: netproto.BRNN_ShangzhuangRet
	(*BRNN_ShangZhuang)(nil),           // 16: netproto.BRNN_ShangZhuang
	(*BRNN_ZhuangInfo)(nil),            // 17: netproto.BRNN_ZhuangInfo
	(*BRNN_ZhuangList)(nil),            // 18: netproto.BRNN_ZhuangList
	(*BRNN_BetClearRet)(nil),           // 19: netproto.BRNN_BetClearRet
	(*BRNN_RichestList)(nil),           // 20: netproto.BRNN_RichestList
	(*BRNN_Richest)(nil),               // 21: netproto.BRNN_Richest
	(*BRNN_LuckyStar)(nil),             // 22: netproto.BRNN_LuckyStar
	(*BRNN_StageUerInfo)(nil),          // 23: netproto.BRNN_StageUerInfo
	(*BRNN_GameNoInfo)(nil),            // 24: netproto.BRNN_GameNoInfo
	(*PokerCard)(nil),                  // 25: netproto.PokerCard
	(*GameUser)(nil),                   // 26: netproto.GameUser
}
var file_GameMsg_BRNN_proto_depIdxs = []int32{
	7,  // 0: netproto.BRNN_UserBetInfo.BetInfo:type_name -> netproto.BRNN_BroadCastBet
	5,  // 1: netproto.BRNN_BrodcastPokerCard.UserPokerCard:type_name -> netproto.BRNN_BrodcastUserPokerCard
	25, // 2: netproto.BRNN_BrodcastUserPokerCard.CardGroup:type_name -> netproto.PokerCard
	7,  // 3: netproto.BRNN_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.BRNN_BroadCastBet
	10, // 4: netproto.BRNN_BetArr.BetArr:type_name -> netproto.BRNN_Bet
	0,  // 5: netproto.BRNN_BetRet.Ret:type_name -> netproto.RetType
	10, // 6: netproto.BRNN_BetRet.BetArr:type_name -> netproto.BRNN_Bet
	25, // 7: netproto.BRNN_GameResultPoker.SitPoker:type_name -> netproto.PokerCard
	14, // 8: netproto.BRNN_GameResultUserMoney.WinUserInfo:type_name -> netproto.BRNN_WinUerInfo
	23, // 9: netproto.BRNN_GameResultUserMoney.StageUerInfo:type_name -> netproto.BRNN_StageUerInfo
	26, // 10: netproto.BRNN_ZhuangInfo.UserInfo:type_name -> netproto.GameUser
	26, // 11: netproto.BRNN_ZhuangList.UserInfo:type_name -> netproto.GameUser
	21, // 12: netproto.BRNN_RichestList.RichestList:type_name -> netproto.BRNN_Richest
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_GameMsg_BRNN_proto_init() }
func file_GameMsg_BRNN_proto_init() {
	if File_GameMsg_BRNN_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_BRNN_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BrodcastPokerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BrodcastUserPokerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BroadCastTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_GameResultPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_ShangzhuangRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_ShangZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_ZhuangInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_ZhuangList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_BetClearRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_RichestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_Richest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_LuckyStar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_StageUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_BRNN_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRNN_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_BRNN_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_BRNN_proto_goTypes,
		DependencyIndexes: file_GameMsg_BRNN_proto_depIdxs,
		EnumInfos:         file_GameMsg_BRNN_proto_enumTypes,
		MessageInfos:      file_GameMsg_BRNN_proto_msgTypes,
	}.Build()
	File_GameMsg_BRNN_proto = out.File
	file_GameMsg_BRNN_proto_rawDesc = nil
	file_GameMsg_BRNN_proto_goTypes = nil
	file_GameMsg_BRNN_proto_depIdxs = nil
}
