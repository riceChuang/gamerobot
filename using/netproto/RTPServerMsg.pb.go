// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: RTPServerMsg.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RTPResultTypeID int32

const (
	RTPResultTypeID_RTP_NORMAL          RTPResultTypeID = 1
	RTPResultTypeID_RTP_SYS_WIN         RTPResultTypeID = 2
	RTPResultTypeID_RTP_SYS_LOSS        RTPResultTypeID = 3
	RTPResultTypeID_RTP_SYS_MIN_WIN     RTPResultTypeID = 4
	RTPResultTypeID_RTP_SYS_MEDIUM_WIN  RTPResultTypeID = 5
	RTPResultTypeID_RTP_SYS_BIG_WIN     RTPResultTypeID = 6
	RTPResultTypeID_RTP_SYS_MIN_LOSE    RTPResultTypeID = 7
	RTPResultTypeID_RTP_SYS_MEDIUM_LOSE RTPResultTypeID = 8
	RTPResultTypeID_RTP_SYS_BIG_LOSE    RTPResultTypeID = 9
)

// Enum value maps for RTPResultTypeID.
var (
	RTPResultTypeID_name = map[int32]string{
		1: "RTP_NORMAL",
		2: "RTP_SYS_WIN",
		3: "RTP_SYS_LOSS",
		4: "RTP_SYS_MIN_WIN",
		5: "RTP_SYS_MEDIUM_WIN",
		6: "RTP_SYS_BIG_WIN",
		7: "RTP_SYS_MIN_LOSE",
		8: "RTP_SYS_MEDIUM_LOSE",
		9: "RTP_SYS_BIG_LOSE",
	}
	RTPResultTypeID_value = map[string]int32{
		"RTP_NORMAL":          1,
		"RTP_SYS_WIN":         2,
		"RTP_SYS_LOSS":        3,
		"RTP_SYS_MIN_WIN":     4,
		"RTP_SYS_MEDIUM_WIN":  5,
		"RTP_SYS_BIG_WIN":     6,
		"RTP_SYS_MIN_LOSE":    7,
		"RTP_SYS_MEDIUM_LOSE": 8,
		"RTP_SYS_BIG_LOSE":    9,
	}
)

func (x RTPResultTypeID) Enum() *RTPResultTypeID {
	p := new(RTPResultTypeID)
	*p = x
	return p
}

func (x RTPResultTypeID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RTPResultTypeID) Descriptor() protoreflect.EnumDescriptor {
	return file_RTPServerMsg_proto_enumTypes[0].Descriptor()
}

func (RTPResultTypeID) Type() protoreflect.EnumType {
	return &file_RTPServerMsg_proto_enumTypes[0]
}

func (x RTPResultTypeID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RTPResultTypeID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RTPResultTypeID(num)
	return nil
}

// Deprecated: Use RTPResultTypeID.Descriptor instead.
func (RTPResultTypeID) EnumDescriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{0}
}

type RTPRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetType *RTPResultTypeID `protobuf:"varint,1,req,name=RetType,enum=netproto.RTPResultTypeID" json:"RetType,omitempty"`
}

func (x *RTPRet) Reset() {
	*x = RTPRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTPRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTPRet) ProtoMessage() {}

func (x *RTPRet) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTPRet.ProtoReflect.Descriptor instead.
func (*RTPRet) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{0}
}

func (x *RTPRet) GetRetType() RTPResultTypeID {
	if x != nil && x.RetType != nil {
		return *x.RetType
	}
	return RTPResultTypeID_RTP_NORMAL
}

type RTP_RoomRtpConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID  *int32           `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	RoomID  *int32           `protobuf:"varint,2,req,name=RoomID" json:"RoomID,omitempty"`
	FlagID  *int32           `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"`
	GameNum *RTP_GameNumInfo `protobuf:"bytes,4,opt,name=GameNum" json:"GameNum,omitempty"`
}

func (x *RTP_RoomRtpConfigReq) Reset() {
	*x = RTP_RoomRtpConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_RoomRtpConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_RoomRtpConfigReq) ProtoMessage() {}

func (x *RTP_RoomRtpConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_RoomRtpConfigReq.ProtoReflect.Descriptor instead.
func (*RTP_RoomRtpConfigReq) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{1}
}

func (x *RTP_RoomRtpConfigReq) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *RTP_RoomRtpConfigReq) GetRoomID() int32 {
	if x != nil && x.RoomID != nil {
		return *x.RoomID
	}
	return 0
}

func (x *RTP_RoomRtpConfigReq) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *RTP_RoomRtpConfigReq) GetGameNum() *RTP_GameNumInfo {
	if x != nil {
		return x.GameNum
	}
	return nil
}

type AddSysBetAndBonuxMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID        *int32           `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	ServerID      *int32           `protobuf:"varint,2,req,name=ServerID" json:"ServerID,omitempty"`
	FlagID        *int32           `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"`
	TotalBet      *int64           `protobuf:"varint,4,req,name=TotalBet" json:"TotalBet,omitempty"`
	TotalPay      *int64           `protobuf:"varint,5,req,name=TotalPay" json:"TotalPay,omitempty"`
	UserID        *int32           `protobuf:"varint,6,opt,name=UserID" json:"UserID,omitempty"`
	TotalBetCount *int64           `protobuf:"varint,7,opt,name=TotalBetCount" json:"TotalBetCount,omitempty"`
	GameNum       *RTP_GameNumInfo `protobuf:"bytes,8,opt,name=GameNum" json:"GameNum,omitempty"`
}

func (x *AddSysBetAndBonuxMsg) Reset() {
	*x = AddSysBetAndBonuxMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSysBetAndBonuxMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSysBetAndBonuxMsg) ProtoMessage() {}

func (x *AddSysBetAndBonuxMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSysBetAndBonuxMsg.ProtoReflect.Descriptor instead.
func (*AddSysBetAndBonuxMsg) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{2}
}

func (x *AddSysBetAndBonuxMsg) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *AddSysBetAndBonuxMsg) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *AddSysBetAndBonuxMsg) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *AddSysBetAndBonuxMsg) GetTotalBet() int64 {
	if x != nil && x.TotalBet != nil {
		return *x.TotalBet
	}
	return 0
}

func (x *AddSysBetAndBonuxMsg) GetTotalPay() int64 {
	if x != nil && x.TotalPay != nil {
		return *x.TotalPay
	}
	return 0
}

func (x *AddSysBetAndBonuxMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *AddSysBetAndBonuxMsg) GetTotalBetCount() int64 {
	if x != nil && x.TotalBetCount != nil {
		return *x.TotalBetCount
	}
	return 0
}

func (x *AddSysBetAndBonuxMsg) GetGameNum() *RTP_GameNumInfo {
	if x != nil {
		return x.GameNum
	}
	return nil
}

//TODO: 將牌局編號改為required
type RTP_GameNumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNumStr   *string `protobuf:"bytes,1,req,name=GameNumStr" json:"GameNumStr,omitempty"` //注單編號
	GameID       *int32  `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`
	ServerID     *int32  `protobuf:"varint,3,req,name=ServerID" json:"ServerID,omitempty"`
	Flag         *string `protobuf:"bytes,4,req,name=Flag" json:"Flag,omitempty"`
	StartTime    *int64  `protobuf:"varint,5,req,name=StartTime" json:"StartTime,omitempty"`
	TableNo      *int32  `protobuf:"varint,6,req,name=TableNo" json:"TableNo,omitempty"`
	SeatNo       *int32  `protobuf:"varint,7,req,name=SeatNo" json:"SeatNo,omitempty"`
	GameRoundStr *string `protobuf:"bytes,8,opt,name=GameRoundStr" json:"GameRoundStr,omitempty"` //牌局編號
}

func (x *RTP_GameNumInfo) Reset() {
	*x = RTP_GameNumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_GameNumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_GameNumInfo) ProtoMessage() {}

func (x *RTP_GameNumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_GameNumInfo.ProtoReflect.Descriptor instead.
func (*RTP_GameNumInfo) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{3}
}

func (x *RTP_GameNumInfo) GetGameNumStr() string {
	if x != nil && x.GameNumStr != nil {
		return *x.GameNumStr
	}
	return ""
}

func (x *RTP_GameNumInfo) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *RTP_GameNumInfo) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *RTP_GameNumInfo) GetFlag() string {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return ""
}

func (x *RTP_GameNumInfo) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *RTP_GameNumInfo) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *RTP_GameNumInfo) GetSeatNo() int32 {
	if x != nil && x.SeatNo != nil {
		return *x.SeatNo
	}
	return 0
}

func (x *RTP_GameNumInfo) GetGameRoundStr() string {
	if x != nil && x.GameRoundStr != nil {
		return *x.GameRoundStr
	}
	return ""
}

type RTP_NormalPlayerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *int32           `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	GameID      *int32           `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`
	FlagID      *int32           `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"`
	IsNewPlayer *bool            `protobuf:"varint,4,req,name=IsNewPlayer" json:"IsNewPlayer,omitempty"` //新手狀態
	ServerID    *int32           `protobuf:"varint,5,req,name=ServerID" json:"ServerID,omitempty"`
	GameNum     *RTP_GameNumInfo `protobuf:"bytes,6,opt,name=GameNum" json:"GameNum,omitempty"`
}

func (x *RTP_NormalPlayerReq) Reset() {
	*x = RTP_NormalPlayerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_NormalPlayerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_NormalPlayerReq) ProtoMessage() {}

func (x *RTP_NormalPlayerReq) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_NormalPlayerReq.ProtoReflect.Descriptor instead.
func (*RTP_NormalPlayerReq) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{4}
}

func (x *RTP_NormalPlayerReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *RTP_NormalPlayerReq) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *RTP_NormalPlayerReq) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *RTP_NormalPlayerReq) GetIsNewPlayer() bool {
	if x != nil && x.IsNewPlayer != nil {
		return *x.IsNewPlayer
	}
	return false
}

func (x *RTP_NormalPlayerReq) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *RTP_NormalPlayerReq) GetGameNum() *RTP_GameNumInfo {
	if x != nil {
		return x.GameNum
	}
	return nil
}

type RTP_NormalPlayerRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *int32           `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	RetType     *RTPResultTypeID `protobuf:"varint,2,req,name=RetType,enum=netproto.RTPResultTypeID" json:"RetType,omitempty"`
	IsNewPlayer *bool            `protobuf:"varint,3,opt,name=IsNewPlayer" json:"IsNewPlayer,omitempty"`
}

func (x *RTP_NormalPlayerRes) Reset() {
	*x = RTP_NormalPlayerRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_NormalPlayerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_NormalPlayerRes) ProtoMessage() {}

func (x *RTP_NormalPlayerRes) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_NormalPlayerRes.ProtoReflect.Descriptor instead.
func (*RTP_NormalPlayerRes) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{5}
}

func (x *RTP_NormalPlayerRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *RTP_NormalPlayerRes) GetRetType() RTPResultTypeID {
	if x != nil && x.RetType != nil {
		return *x.RetType
	}
	return RTPResultTypeID_RTP_NORMAL
}

func (x *RTP_NormalPlayerRes) GetIsNewPlayer() bool {
	if x != nil && x.IsNewPlayer != nil {
		return *x.IsNewPlayer
	}
	return false
}

type InitPlayerBetAndBonusMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	GameID *int32 `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`
	FlagID *int32 `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"`
}

func (x *InitPlayerBetAndBonusMsg) Reset() {
	*x = InitPlayerBetAndBonusMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPlayerBetAndBonusMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPlayerBetAndBonusMsg) ProtoMessage() {}

func (x *InitPlayerBetAndBonusMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPlayerBetAndBonusMsg.ProtoReflect.Descriptor instead.
func (*InitPlayerBetAndBonusMsg) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{6}
}

func (x *InitPlayerBetAndBonusMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *InitPlayerBetAndBonusMsg) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *InitPlayerBetAndBonusMsg) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

type RTP_GameReportLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNum *RTP_GameNumInfo `protobuf:"bytes,1,req,name=GameNum" json:"GameNum,omitempty"`
	RtpLog  *string          `protobuf:"bytes,2,req,name=RtpLog" json:"RtpLog,omitempty"`
}

func (x *RTP_GameReportLog) Reset() {
	*x = RTP_GameReportLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_GameReportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_GameReportLog) ProtoMessage() {}

func (x *RTP_GameReportLog) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_GameReportLog.ProtoReflect.Descriptor instead.
func (*RTP_GameReportLog) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{7}
}

func (x *RTP_GameReportLog) GetGameNum() *RTP_GameNumInfo {
	if x != nil {
		return x.GameNum
	}
	return nil
}

func (x *RTP_GameReportLog) GetRtpLog() string {
	if x != nil && x.RtpLog != nil {
		return *x.RtpLog
	}
	return ""
}

type RTP_GameRoomRTPMetaByFlagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID  *int32           `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	RoomID  *int32           `protobuf:"varint,2,req,name=RoomID" json:"RoomID,omitempty"`
	FlagID  *int32           `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"`
	GameNum *RTP_GameNumInfo `protobuf:"bytes,4,opt,name=GameNum" json:"GameNum,omitempty"`
}

func (x *RTP_GameRoomRTPMetaByFlagReq) Reset() {
	*x = RTP_GameRoomRTPMetaByFlagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_GameRoomRTPMetaByFlagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_GameRoomRTPMetaByFlagReq) ProtoMessage() {}

func (x *RTP_GameRoomRTPMetaByFlagReq) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_GameRoomRTPMetaByFlagReq.ProtoReflect.Descriptor instead.
func (*RTP_GameRoomRTPMetaByFlagReq) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{8}
}

func (x *RTP_GameRoomRTPMetaByFlagReq) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagReq) GetRoomID() int32 {
	if x != nil && x.RoomID != nil {
		return *x.RoomID
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagReq) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagReq) GetGameNum() *RTP_GameNumInfo {
	if x != nil {
		return x.GameNum
	}
	return nil
}

type RTP_GameRoomRTPMetaByFlagRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBet        *int64 `protobuf:"varint,1,req,name=TotalBet" json:"TotalBet,omitempty"`
	TotalPay        *int64 `protobuf:"varint,2,req,name=TotalPay" json:"TotalPay,omitempty"`
	TotalBetCount   *int64 `protobuf:"varint,3,req,name=TotalBetCount" json:"TotalBetCount,omitempty"`
	CurrentRtp      *int32 `protobuf:"varint,4,req,name=CurrentRtp" json:"CurrentRtp,omitempty"`
	LimitRtp        *int32 `protobuf:"varint,5,req,name=LimitRtp" json:"LimitRtp,omitempty"`
	PlayerMaxWin    *int64 `protobuf:"varint,6,req,name=PlayerMaxWin" json:"PlayerMaxWin,omitempty"`
	LimitRtpEnable  *bool  `protobuf:"varint,7,req,name=LimitRtpEnable" json:"LimitRtpEnable,omitempty"`
	LimitRtpBuffer  *int64 `protobuf:"varint,8,req,name=LimitRtpBuffer" json:"LimitRtpBuffer,omitempty"`
	ExpectRtp       *int32 `protobuf:"varint,9,opt,name=ExpectRtp" json:"ExpectRtp,omitempty"`              //期望rtp
	RtpType         *int32 `protobuf:"varint,10,opt,name=RtpType" json:"RtpType,omitempty"`                 //rtp區間(上/下)
	RtpAdjustNumber *int32 `protobuf:"varint,11,opt,name=RtpAdjustNumber" json:"RtpAdjustNumber,omitempty"` //rtp調整區間值
	RtpAdjust       *int32 `protobuf:"varint,12,opt,name=RtpAdjust" json:"RtpAdjust,omitempty"`             //rtp調整值(萬分比)
}

func (x *RTP_GameRoomRTPMetaByFlagRes) Reset() {
	*x = RTP_GameRoomRTPMetaByFlagRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_GameRoomRTPMetaByFlagRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_GameRoomRTPMetaByFlagRes) ProtoMessage() {}

func (x *RTP_GameRoomRTPMetaByFlagRes) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_GameRoomRTPMetaByFlagRes.ProtoReflect.Descriptor instead.
func (*RTP_GameRoomRTPMetaByFlagRes) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{9}
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetTotalBet() int64 {
	if x != nil && x.TotalBet != nil {
		return *x.TotalBet
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetTotalPay() int64 {
	if x != nil && x.TotalPay != nil {
		return *x.TotalPay
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetTotalBetCount() int64 {
	if x != nil && x.TotalBetCount != nil {
		return *x.TotalBetCount
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetCurrentRtp() int32 {
	if x != nil && x.CurrentRtp != nil {
		return *x.CurrentRtp
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetLimitRtp() int32 {
	if x != nil && x.LimitRtp != nil {
		return *x.LimitRtp
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetPlayerMaxWin() int64 {
	if x != nil && x.PlayerMaxWin != nil {
		return *x.PlayerMaxWin
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetLimitRtpEnable() bool {
	if x != nil && x.LimitRtpEnable != nil {
		return *x.LimitRtpEnable
	}
	return false
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetLimitRtpBuffer() int64 {
	if x != nil && x.LimitRtpBuffer != nil {
		return *x.LimitRtpBuffer
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetExpectRtp() int32 {
	if x != nil && x.ExpectRtp != nil {
		return *x.ExpectRtp
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetRtpType() int32 {
	if x != nil && x.RtpType != nil {
		return *x.RtpType
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetRtpAdjustNumber() int32 {
	if x != nil && x.RtpAdjustNumber != nil {
		return *x.RtpAdjustNumber
	}
	return 0
}

func (x *RTP_GameRoomRTPMetaByFlagRes) GetRtpAdjust() int32 {
	if x != nil && x.RtpAdjust != nil {
		return *x.RtpAdjust
	}
	return 0
}

type RTP_PlayerRTPMetaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	GameID      *int32 `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`
	FlagID      *int32 `protobuf:"varint,3,req,name=FlagID" json:"FlagID,omitempty"`
	IsNewPlayer *bool  `protobuf:"varint,4,req,name=IsNewPlayer" json:"IsNewPlayer,omitempty"` //新手狀態
	ServerID    *int32 `protobuf:"varint,5,req,name=ServerID" json:"ServerID,omitempty"`
}

func (x *RTP_PlayerRTPMetaReq) Reset() {
	*x = RTP_PlayerRTPMetaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_PlayerRTPMetaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_PlayerRTPMetaReq) ProtoMessage() {}

func (x *RTP_PlayerRTPMetaReq) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_PlayerRTPMetaReq.ProtoReflect.Descriptor instead.
func (*RTP_PlayerRTPMetaReq) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{10}
}

func (x *RTP_PlayerRTPMetaReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *RTP_PlayerRTPMetaReq) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *RTP_PlayerRTPMetaReq) GetFlagID() int32 {
	if x != nil && x.FlagID != nil {
		return *x.FlagID
	}
	return 0
}

func (x *RTP_PlayerRTPMetaReq) GetIsNewPlayer() bool {
	if x != nil && x.IsNewPlayer != nil {
		return *x.IsNewPlayer
	}
	return false
}

func (x *RTP_PlayerRTPMetaReq) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

type RTP_PlayerRTPMetaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	IsNewPlayer     *bool  `protobuf:"varint,2,opt,name=IsNewPlayer" json:"IsNewPlayer,omitempty"` //是否為新手
	TotalBet        *int64 `protobuf:"varint,3,req,name=TotalBet" json:"TotalBet,omitempty"`       //總下注
	TotalPay        *int64 `protobuf:"varint,4,req,name=TotalPay" json:"TotalPay,omitempty"`       //總派彩
	TotalBetCount   *int64 `protobuf:"varint,5,req,name=TotalBetCount" json:"TotalBetCount,omitempty"`
	ExpectRtp       *int32 `protobuf:"varint,6,req,name=ExpectRtp" json:"ExpectRtp,omitempty"`             //期望rtp
	RtpType         *int32 `protobuf:"varint,7,req,name=RtpType" json:"RtpType,omitempty"`                 //rtp區間(上/下)
	RtpAdjustNumber *int32 `protobuf:"varint,8,req,name=RtpAdjustNumber" json:"RtpAdjustNumber,omitempty"` //rtp調整區間值
	RtpAdjust       *int32 `protobuf:"varint,9,req,name=RtpAdjust" json:"RtpAdjust,omitempty"`             //rtp調整值(萬分比)
	CurrentRtp      *int32 `protobuf:"varint,10,req,name=CurrentRtp" json:"CurrentRtp,omitempty"`          //當前rtp
	IsUsePlayerRTP  *bool  `protobuf:"varint,11,req,name=IsUsePlayerRTP" json:"IsUsePlayerRTP,omitempty"`  //當前是否使用userRTP (被強制使用system or 不開啟時）
}

func (x *RTP_PlayerRTPMetaRes) Reset() {
	*x = RTP_PlayerRTPMetaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RTPServerMsg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTP_PlayerRTPMetaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTP_PlayerRTPMetaRes) ProtoMessage() {}

func (x *RTP_PlayerRTPMetaRes) ProtoReflect() protoreflect.Message {
	mi := &file_RTPServerMsg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTP_PlayerRTPMetaRes.ProtoReflect.Descriptor instead.
func (*RTP_PlayerRTPMetaRes) Descriptor() ([]byte, []int) {
	return file_RTPServerMsg_proto_rawDescGZIP(), []int{11}
}

func (x *RTP_PlayerRTPMetaRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetIsNewPlayer() bool {
	if x != nil && x.IsNewPlayer != nil {
		return *x.IsNewPlayer
	}
	return false
}

func (x *RTP_PlayerRTPMetaRes) GetTotalBet() int64 {
	if x != nil && x.TotalBet != nil {
		return *x.TotalBet
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetTotalPay() int64 {
	if x != nil && x.TotalPay != nil {
		return *x.TotalPay
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetTotalBetCount() int64 {
	if x != nil && x.TotalBetCount != nil {
		return *x.TotalBetCount
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetExpectRtp() int32 {
	if x != nil && x.ExpectRtp != nil {
		return *x.ExpectRtp
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetRtpType() int32 {
	if x != nil && x.RtpType != nil {
		return *x.RtpType
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetRtpAdjustNumber() int32 {
	if x != nil && x.RtpAdjustNumber != nil {
		return *x.RtpAdjustNumber
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetRtpAdjust() int32 {
	if x != nil && x.RtpAdjust != nil {
		return *x.RtpAdjust
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetCurrentRtp() int32 {
	if x != nil && x.CurrentRtp != nil {
		return *x.CurrentRtp
	}
	return 0
}

func (x *RTP_PlayerRTPMetaRes) GetIsUsePlayerRTP() bool {
	if x != nil && x.IsUsePlayerRTP != nil {
		return *x.IsUsePlayerRTP
	}
	return false
}

var File_RTPServerMsg_proto protoreflect.FileDescriptor

var file_RTPServerMsg_proto_rawDesc = []byte{
	0x0a, 0x12, 0x52, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d,
	0x0a, 0x06, 0x52, 0x54, 0x50, 0x52, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x54, 0x50, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x52, 0x07, 0x52, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x93, 0x01,
	0x0a, 0x14, 0x52, 0x54, 0x50, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x74, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x12, 0x33,
	0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x54, 0x50, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x79, 0x73, 0x42, 0x65,
	0x74, 0x41, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x78, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x54, 0x50, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x52, 0x54, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x53, 0x74, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x61, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x52, 0x54, 0x50, 0x5f, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6c, 0x61, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61,
	0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x33, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x54,
	0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x52, 0x54, 0x50, 0x5f, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x54, 0x50, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x52, 0x07, 0x52, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x62, 0x0a,
	0x18, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x41, 0x6e,
	0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61,
	0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49,
	0x44, 0x22, 0x60, 0x0a, 0x11, 0x52, 0x54, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x54, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x74, 0x70, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x52, 0x74, 0x70,
	0x4c, 0x6f, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x52, 0x54, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x79, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x07,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x54, 0x50, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0xac, 0x03, 0x0a, 0x1c, 0x52, 0x54, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x74, 0x70, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x74, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x74, 0x70, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x74, 0x70, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x74, 0x70, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x52, 0x74, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x52, 0x74, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x52, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x74, 0x70, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x52, 0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x22, 0x9c, 0x01, 0x0a, 0x14, 0x52, 0x54, 0x50, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x54, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x61,
	0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xf6, 0x02, 0x0a, 0x14, 0x52, 0x54, 0x50, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x54,
	0x50, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x52, 0x74, 0x70, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x09, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x52, 0x74, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x52, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x74, 0x70, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0f, 0x52, 0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x52, 0x74, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70, 0x18, 0x0a,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70,
	0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x55, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x54, 0x50, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x55, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x54, 0x50, 0x2a, 0xcb, 0x01, 0x0a, 0x0f, 0x52, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x54, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x54, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x54, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x57,
	0x49, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x54, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x54, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x54, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x49, 0x4e,
	0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x54, 0x50, 0x5f, 0x53,
	0x59, 0x53, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x54, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x42, 0x49, 0x47, 0x5f,
	0x4c, 0x4f, 0x53, 0x45, 0x10, 0x09, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_RTPServerMsg_proto_rawDescOnce sync.Once
	file_RTPServerMsg_proto_rawDescData = file_RTPServerMsg_proto_rawDesc
)

func file_RTPServerMsg_proto_rawDescGZIP() []byte {
	file_RTPServerMsg_proto_rawDescOnce.Do(func() {
		file_RTPServerMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_RTPServerMsg_proto_rawDescData)
	})
	return file_RTPServerMsg_proto_rawDescData
}

var file_RTPServerMsg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_RTPServerMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_RTPServerMsg_proto_goTypes = []interface{}{
	(RTPResultTypeID)(0),                 // 0: netproto.RTPResultTypeID
	(*RTPRet)(nil),                       // 1: netproto.RTPRet
	(*RTP_RoomRtpConfigReq)(nil),         // 2: netproto.RTP_RoomRtpConfigReq
	(*AddSysBetAndBonuxMsg)(nil),         // 3: netproto.AddSysBetAndBonuxMsg
	(*RTP_GameNumInfo)(nil),              // 4: netproto.RTP_GameNumInfo
	(*RTP_NormalPlayerReq)(nil),          // 5: netproto.RTP_NormalPlayerReq
	(*RTP_NormalPlayerRes)(nil),          // 6: netproto.RTP_NormalPlayerRes
	(*InitPlayerBetAndBonusMsg)(nil),     // 7: netproto.InitPlayerBetAndBonusMsg
	(*RTP_GameReportLog)(nil),            // 8: netproto.RTP_GameReportLog
	(*RTP_GameRoomRTPMetaByFlagReq)(nil), // 9: netproto.RTP_GameRoomRTPMetaByFlagReq
	(*RTP_GameRoomRTPMetaByFlagRes)(nil), // 10: netproto.RTP_GameRoomRTPMetaByFlagRes
	(*RTP_PlayerRTPMetaReq)(nil),         // 11: netproto.RTP_PlayerRTPMetaReq
	(*RTP_PlayerRTPMetaRes)(nil),         // 12: netproto.RTP_PlayerRTPMetaRes
}
var file_RTPServerMsg_proto_depIdxs = []int32{
	0, // 0: netproto.RTPRet.RetType:type_name -> netproto.RTPResultTypeID
	4, // 1: netproto.RTP_RoomRtpConfigReq.GameNum:type_name -> netproto.RTP_GameNumInfo
	4, // 2: netproto.AddSysBetAndBonuxMsg.GameNum:type_name -> netproto.RTP_GameNumInfo
	4, // 3: netproto.RTP_NormalPlayerReq.GameNum:type_name -> netproto.RTP_GameNumInfo
	0, // 4: netproto.RTP_NormalPlayerRes.RetType:type_name -> netproto.RTPResultTypeID
	4, // 5: netproto.RTP_GameReportLog.GameNum:type_name -> netproto.RTP_GameNumInfo
	4, // 6: netproto.RTP_GameRoomRTPMetaByFlagReq.GameNum:type_name -> netproto.RTP_GameNumInfo
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_RTPServerMsg_proto_init() }
func file_RTPServerMsg_proto_init() {
	if File_RTPServerMsg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RTPServerMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTPRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_RoomRtpConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSysBetAndBonuxMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_GameNumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_NormalPlayerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_NormalPlayerRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPlayerBetAndBonusMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_GameReportLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_GameRoomRTPMetaByFlagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_GameRoomRTPMetaByFlagRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_PlayerRTPMetaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RTPServerMsg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTP_PlayerRTPMetaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RTPServerMsg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RTPServerMsg_proto_goTypes,
		DependencyIndexes: file_RTPServerMsg_proto_depIdxs,
		EnumInfos:         file_RTPServerMsg_proto_enumTypes,
		MessageInfos:      file_RTPServerMsg_proto_msgTypes,
	}.Build()
	File_RTPServerMsg_proto = out.File
	file_RTPServerMsg_proto_rawDesc = nil
	file_RTPServerMsg_proto_goTypes = nil
	file_RTPServerMsg_proto_depIdxs = nil
}
