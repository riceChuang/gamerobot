// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: GameMsg_IDAZJH.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IDAZJH_ErrorCode int32

const (
	IDAZJH_ErrorCode_IDAZJHServerError        IDAZJH_ErrorCode = 20000
	IDAZJH_ErrorCode_IDAZJHCallError          IDAZJH_ErrorCode = 20001
	IDAZJH_ErrorCode_IDAZJHRaiseError         IDAZJH_ErrorCode = 20002
	IDAZJH_ErrorCode_IDAZJHCompareError       IDAZJH_ErrorCode = 20003
	IDAZJH_ErrorCode_IDAZJHSideCompareError   IDAZJH_ErrorCode = 20004
	IDAZJH_ErrorCode_IDAZJHAcceptCompareError IDAZJH_ErrorCode = 20005
	IDAZJH_ErrorCode_IDAZJHDropError          IDAZJH_ErrorCode = 20006
	IDAZJH_ErrorCode_IDAZJHCheckError         IDAZJH_ErrorCode = 20007
	IDAZJH_ErrorCode_IDAZJHEarlyChangeError   IDAZJH_ErrorCode = 20008
)

// Enum value maps for IDAZJH_ErrorCode.
var (
	IDAZJH_ErrorCode_name = map[int32]string{
		20000: "IDAZJHServerError",
		20001: "IDAZJHCallError",
		20002: "IDAZJHRaiseError",
		20003: "IDAZJHCompareError",
		20004: "IDAZJHSideCompareError",
		20005: "IDAZJHAcceptCompareError",
		20006: "IDAZJHDropError",
		20007: "IDAZJHCheckError",
		20008: "IDAZJHEarlyChangeError",
	}
	IDAZJH_ErrorCode_value = map[string]int32{
		"IDAZJHServerError":        20000,
		"IDAZJHCallError":          20001,
		"IDAZJHRaiseError":         20002,
		"IDAZJHCompareError":       20003,
		"IDAZJHSideCompareError":   20004,
		"IDAZJHAcceptCompareError": 20005,
		"IDAZJHDropError":          20006,
		"IDAZJHCheckError":         20007,
		"IDAZJHEarlyChangeError":   20008,
	}
)

func (x IDAZJH_ErrorCode) Enum() *IDAZJH_ErrorCode {
	p := new(IDAZJH_ErrorCode)
	*p = x
	return p
}

func (x IDAZJH_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDAZJH_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_IDAZJH_proto_enumTypes[0].Descriptor()
}

func (IDAZJH_ErrorCode) Type() protoreflect.EnumType {
	return &file_GameMsg_IDAZJH_proto_enumTypes[0]
}

func (x IDAZJH_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IDAZJH_ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IDAZJH_ErrorCode(num)
	return nil
}

// Deprecated: Use IDAZJH_ErrorCode.Descriptor instead.
func (IDAZJH_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{0}
}

type IDAZJH_UserAction int32

const (
	IDAZJH_UserAction_NoAction    IDAZJH_UserAction = 1  //無動作
	IDAZJH_UserAction_Call        IDAZJH_UserAction = 2  //跟注
	IDAZJH_UserAction_Raise       IDAZJH_UserAction = 3  //加注
	IDAZJH_UserAction_SideShow    IDAZJH_UserAction = 4  //旁邊比牌
	IDAZJH_UserAction_Declined    IDAZJH_UserAction = 5  //拒絕比牌
	IDAZJH_UserAction_Compare     IDAZJH_UserAction = 6  //比牌
	IDAZJH_UserAction_CompareLose IDAZJH_UserAction = 7  //比牌失敗
	IDAZJH_UserAction_Drop        IDAZJH_UserAction = 8  //棄牌
	IDAZJH_UserAction_Seen        IDAZJH_UserAction = 9  //看牌
	IDAZJH_UserAction_OverPot     IDAZJH_UserAction = 10 //超池
)

// Enum value maps for IDAZJH_UserAction.
var (
	IDAZJH_UserAction_name = map[int32]string{
		1:  "NoAction",
		2:  "Call",
		3:  "Raise",
		4:  "SideShow",
		5:  "Declined",
		6:  "Compare",
		7:  "CompareLose",
		8:  "Drop",
		9:  "Seen",
		10: "OverPot",
	}
	IDAZJH_UserAction_value = map[string]int32{
		"NoAction":    1,
		"Call":        2,
		"Raise":       3,
		"SideShow":    4,
		"Declined":    5,
		"Compare":     6,
		"CompareLose": 7,
		"Drop":        8,
		"Seen":        9,
		"OverPot":     10,
	}
)

func (x IDAZJH_UserAction) Enum() *IDAZJH_UserAction {
	p := new(IDAZJH_UserAction)
	*p = x
	return p
}

func (x IDAZJH_UserAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDAZJH_UserAction) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_IDAZJH_proto_enumTypes[1].Descriptor()
}

func (IDAZJH_UserAction) Type() protoreflect.EnumType {
	return &file_GameMsg_IDAZJH_proto_enumTypes[1]
}

func (x IDAZJH_UserAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IDAZJH_UserAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IDAZJH_UserAction(num)
	return nil
}

// Deprecated: Use IDAZJH_UserAction.Descriptor instead.
func (IDAZJH_UserAction) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{1}
}

type IDAZJH_GameStatus int32

const (
	IDAZJH_GameStatus_Gaming      IDAZJH_GameStatus = 1 //遊玩中
	IDAZJH_GameStatus_SideCompare IDAZJH_GameStatus = 2 //旁邊比牌中
	IDAZJH_GameStatus_Settled     IDAZJH_GameStatus = 3 //已結算
	IDAZJH_GameStatus_Betting     IDAZJH_GameStatus = 4 //下注中
	IDAZJH_GameStatus_Comparing   IDAZJH_GameStatus = 5 //比牌中
	IDAZJH_GameStatus_Waiting     IDAZJH_GameStatus = 6 //遊戲等待中(尚未開始)
)

// Enum value maps for IDAZJH_GameStatus.
var (
	IDAZJH_GameStatus_name = map[int32]string{
		1: "Gaming",
		2: "SideCompare",
		3: "Settled",
		4: "Betting",
		5: "Comparing",
		6: "Waiting",
	}
	IDAZJH_GameStatus_value = map[string]int32{
		"Gaming":      1,
		"SideCompare": 2,
		"Settled":     3,
		"Betting":     4,
		"Comparing":   5,
		"Waiting":     6,
	}
)

func (x IDAZJH_GameStatus) Enum() *IDAZJH_GameStatus {
	p := new(IDAZJH_GameStatus)
	*p = x
	return p
}

func (x IDAZJH_GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDAZJH_GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_IDAZJH_proto_enumTypes[2].Descriptor()
}

func (IDAZJH_GameStatus) Type() protoreflect.EnumType {
	return &file_GameMsg_IDAZJH_proto_enumTypes[2]
}

func (x IDAZJH_GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IDAZJH_GameStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IDAZJH_GameStatus(num)
	return nil
}

// Deprecated: Use IDAZJH_GameStatus.Descriptor instead.
func (IDAZJH_GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{2}
}

type IDAZJH_WaitOptSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seatno  *int32 `protobuf:"varint,1,req,name=seatno" json:"seatno,omitempty"`   //当前操作的座位号
	OptTime *int32 `protobuf:"varint,2,req,name=optTime" json:"optTime,omitempty"` //可操作时间
}

func (x *IDAZJH_WaitOptSeat) Reset() {
	*x = IDAZJH_WaitOptSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_WaitOptSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_WaitOptSeat) ProtoMessage() {}

func (x *IDAZJH_WaitOptSeat) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_WaitOptSeat.ProtoReflect.Descriptor instead.
func (*IDAZJH_WaitOptSeat) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{0}
}

func (x *IDAZJH_WaitOptSeat) GetSeatno() int32 {
	if x != nil && x.Seatno != nil {
		return *x.Seatno
	}
	return 0
}

func (x *IDAZJH_WaitOptSeat) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

type IDAZJH_BetBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Betbase  *int32 `protobuf:"varint,1,req,name=betbase" json:"betbase,omitempty"`   //底注
	Betcount *int32 `protobuf:"varint,2,req,name=betcount" json:"betcount,omitempty"` //用户人数统计
}

func (x *IDAZJH_BetBase) Reset() {
	*x = IDAZJH_BetBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_BetBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_BetBase) ProtoMessage() {}

func (x *IDAZJH_BetBase) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_BetBase.ProtoReflect.Descriptor instead.
func (*IDAZJH_BetBase) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{1}
}

func (x *IDAZJH_BetBase) GetBetbase() int32 {
	if x != nil && x.Betbase != nil {
		return *x.Betbase
	}
	return 0
}

func (x *IDAZJH_BetBase) GetBetcount() int32 {
	if x != nil && x.Betcount != nil {
		return *x.Betcount
	}
	return 0
}

type IDAZJH_FaiPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seatno *int32 `protobuf:"varint,1,req,name=seatno" json:"seatno,omitempty"` //庄家座位号
	Bfirst *bool  `protobuf:"varint,2,req,name=bfirst" json:"bfirst,omitempty"` //是否第一局
}

func (x *IDAZJH_FaiPai) Reset() {
	*x = IDAZJH_FaiPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_FaiPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_FaiPai) ProtoMessage() {}

func (x *IDAZJH_FaiPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_FaiPai.ProtoReflect.Descriptor instead.
func (*IDAZJH_FaiPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{2}
}

func (x *IDAZJH_FaiPai) GetSeatno() int32 {
	if x != nil && x.Seatno != nil {
		return *x.Seatno
	}
	return 0
}

func (x *IDAZJH_FaiPai) GetBfirst() bool {
	if x != nil && x.Bfirst != nil {
		return *x.Bfirst
	}
	return false
}

type IDAZJH_SeatNO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seatno *int32 `protobuf:"varint,1,req,name=seatno" json:"seatno,omitempty"`
}

func (x *IDAZJH_SeatNO) Reset() {
	*x = IDAZJH_SeatNO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_SeatNO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_SeatNO) ProtoMessage() {}

func (x *IDAZJH_SeatNO) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_SeatNO.ProtoReflect.Descriptor instead.
func (*IDAZJH_SeatNO) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{3}
}

func (x *IDAZJH_SeatNO) GetSeatno() int32 {
	if x != nil && x.Seatno != nil {
		return *x.Seatno
	}
	return 0
}

type IDAZJH_CompareCardsRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *int32 `protobuf:"varint,1,req,name=result" json:"result,omitempty"`             //比牌結果, 1:發起座位贏,2:被發起座位贏,3:平手
	Initseatno   *int32 `protobuf:"varint,2,req,name=initseatno" json:"initseatno,omitempty"`     //發起座位號
	Targetseatno *int32 `protobuf:"varint,3,req,name=targetseatno" json:"targetseatno,omitempty"` //被發起座位號
	CompareMoney *int32 `protobuf:"varint,4,req,name=compareMoney" json:"compareMoney,omitempty"` //当前的下注额
	Odd          *int32 `protobuf:"varint,5,req,name=odd" json:"odd,omitempty"`                   //倍率
	CompareType  *int32 `protobuf:"varint,6,req,name=compareType" json:"compareType,omitempty"`   //比牌類型 1:compare 2:sideCompare
}

func (x *IDAZJH_CompareCardsRet) Reset() {
	*x = IDAZJH_CompareCardsRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_CompareCardsRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_CompareCardsRet) ProtoMessage() {}

func (x *IDAZJH_CompareCardsRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_CompareCardsRet.ProtoReflect.Descriptor instead.
func (*IDAZJH_CompareCardsRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{4}
}

func (x *IDAZJH_CompareCardsRet) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *IDAZJH_CompareCardsRet) GetInitseatno() int32 {
	if x != nil && x.Initseatno != nil {
		return *x.Initseatno
	}
	return 0
}

func (x *IDAZJH_CompareCardsRet) GetTargetseatno() int32 {
	if x != nil && x.Targetseatno != nil {
		return *x.Targetseatno
	}
	return 0
}

func (x *IDAZJH_CompareCardsRet) GetCompareMoney() int32 {
	if x != nil && x.CompareMoney != nil {
		return *x.CompareMoney
	}
	return 0
}

func (x *IDAZJH_CompareCardsRet) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

func (x *IDAZJH_CompareCardsRet) GetCompareType() int32 {
	if x != nil && x.CompareType != nil {
		return *x.CompareType
	}
	return 0
}

type IDAZJH_BetAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Betadd *int32 `protobuf:"varint,1,req,name=betadd" json:"betadd,omitempty"` //下注選項
}

func (x *IDAZJH_BetAdd) Reset() {
	*x = IDAZJH_BetAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_BetAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_BetAdd) ProtoMessage() {}

func (x *IDAZJH_BetAdd) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_BetAdd.ProtoReflect.Descriptor instead.
func (*IDAZJH_BetAdd) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{5}
}

func (x *IDAZJH_BetAdd) GetBetadd() int32 {
	if x != nil && x.Betadd != nil {
		return *x.Betadd
	}
	return 0
}

type IDAZJH_BetAddBrodCast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seatno  *int32 `protobuf:"varint,1,req,name=seatno" json:"seatno,omitempty"`
	Betadd  *int32 `protobuf:"varint,2,req,name=betadd" json:"betadd,omitempty"`   //当前的下注额
	Odd     *int32 `protobuf:"varint,3,req,name=odd" json:"odd,omitempty"`         //倍率
	Isfirst *bool  `protobuf:"varint,4,req,name=isfirst" json:"isfirst,omitempty"` //是否是第一个操作的玩家
}

func (x *IDAZJH_BetAddBrodCast) Reset() {
	*x = IDAZJH_BetAddBrodCast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_BetAddBrodCast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_BetAddBrodCast) ProtoMessage() {}

func (x *IDAZJH_BetAddBrodCast) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_BetAddBrodCast.ProtoReflect.Descriptor instead.
func (*IDAZJH_BetAddBrodCast) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{6}
}

func (x *IDAZJH_BetAddBrodCast) GetSeatno() int32 {
	if x != nil && x.Seatno != nil {
		return *x.Seatno
	}
	return 0
}

func (x *IDAZJH_BetAddBrodCast) GetBetadd() int32 {
	if x != nil && x.Betadd != nil {
		return *x.Betadd
	}
	return 0
}

func (x *IDAZJH_BetAddBrodCast) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

func (x *IDAZJH_BetAddBrodCast) GetIsfirst() bool {
	if x != nil && x.Isfirst != nil {
		return *x.Isfirst
	}
	return false
}

type IDAZJH_Poker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PokerType      *int32     `protobuf:"varint,1,req,name=PokerType" json:"PokerType,omitempty"`
	Userpokergroup *UserPoker `protobuf:"bytes,2,req,name=userpokergroup" json:"userpokergroup,omitempty"`
}

func (x *IDAZJH_Poker) Reset() {
	*x = IDAZJH_Poker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_Poker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_Poker) ProtoMessage() {}

func (x *IDAZJH_Poker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_Poker.ProtoReflect.Descriptor instead.
func (*IDAZJH_Poker) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{7}
}

func (x *IDAZJH_Poker) GetPokerType() int32 {
	if x != nil && x.PokerType != nil {
		return *x.PokerType
	}
	return 0
}

func (x *IDAZJH_Poker) GetUserpokergroup() *UserPoker {
	if x != nil {
		return x.Userpokergroup
	}
	return nil
}

type IDAZJH_ComparePoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherPoker []*IDAZJH_Poker `protobuf:"bytes,3,rep,name=OtherPoker" json:"OtherPoker,omitempty"`
}

func (x *IDAZJH_ComparePoker) Reset() {
	*x = IDAZJH_ComparePoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_ComparePoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_ComparePoker) ProtoMessage() {}

func (x *IDAZJH_ComparePoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_ComparePoker.ProtoReflect.Descriptor instead.
func (*IDAZJH_ComparePoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{8}
}

func (x *IDAZJH_ComparePoker) GetOtherPoker() []*IDAZJH_Poker {
	if x != nil {
		return x.OtherPoker
	}
	return nil
}

//准备时间
type IDAZJH_ReadyTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadyTime *int32 `protobuf:"varint,1,req,name=ReadyTime" json:"ReadyTime,omitempty"`
}

func (x *IDAZJH_ReadyTime) Reset() {
	*x = IDAZJH_ReadyTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_ReadyTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_ReadyTime) ProtoMessage() {}

func (x *IDAZJH_ReadyTime) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_ReadyTime.ProtoReflect.Descriptor instead.
func (*IDAZJH_ReadyTime) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{9}
}

func (x *IDAZJH_ReadyTime) GetReadyTime() int32 {
	if x != nil && x.ReadyTime != nil {
		return *x.ReadyTime
	}
	return 0
}

type IDAZJH_Currturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currturn *int32 `protobuf:"varint,1,req,name=Currturn" json:"Currturn,omitempty"` //第幾輪
}

func (x *IDAZJH_Currturn) Reset() {
	*x = IDAZJH_Currturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_Currturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_Currturn) ProtoMessage() {}

func (x *IDAZJH_Currturn) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_Currturn.ProtoReflect.Descriptor instead.
func (*IDAZJH_Currturn) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{10}
}

func (x *IDAZJH_Currturn) GetCurrturn() int32 {
	if x != nil && x.Currturn != nil {
		return *x.Currturn
	}
	return 0
}

type IDAZJH_UserDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *int32 `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"` //哪個玩家
}

func (x *IDAZJH_UserDrop) Reset() {
	*x = IDAZJH_UserDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_UserDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_UserDrop) ProtoMessage() {}

func (x *IDAZJH_UserDrop) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_UserDrop.ProtoReflect.Descriptor instead.
func (*IDAZJH_UserDrop) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{11}
}

func (x *IDAZJH_UserDrop) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type IDAZJH_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *IDAZJH_GameNoInfo) Reset() {
	*x = IDAZJH_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_GameNoInfo) ProtoMessage() {}

func (x *IDAZJH_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_GameNoInfo.ProtoReflect.Descriptor instead.
func (*IDAZJH_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{12}
}

func (x *IDAZJH_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

type IDAZJH_Follow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seatno *int32 `protobuf:"varint,1,req,name=seatno" json:"seatno,omitempty"`
	Follow *int32 `protobuf:"varint,2,req,name=follow" json:"follow,omitempty"` //当前的下注额
	Odd    *int32 `protobuf:"varint,3,req,name=odd" json:"odd,omitempty"`       //倍率
}

func (x *IDAZJH_Follow) Reset() {
	*x = IDAZJH_Follow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_Follow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_Follow) ProtoMessage() {}

func (x *IDAZJH_Follow) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_Follow.ProtoReflect.Descriptor instead.
func (*IDAZJH_Follow) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{13}
}

func (x *IDAZJH_Follow) GetSeatno() int32 {
	if x != nil && x.Seatno != nil {
		return *x.Seatno
	}
	return 0
}

func (x *IDAZJH_Follow) GetFollow() int32 {
	if x != nil && x.Follow != nil {
		return *x.Follow
	}
	return 0
}

func (x *IDAZJH_Follow) GetOdd() int32 {
	if x != nil && x.Odd != nil {
		return *x.Odd
	}
	return 0
}

type IDAZJH_WaitOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Check           *bool   `protobuf:"varint,1,req,name=check" json:"check,omitempty"`                      //是否看牌
	Drop            *bool   `protobuf:"varint,2,req,name=drop" json:"drop,omitempty"`                        //是否能棄牌
	Compare         *bool   `protobuf:"varint,3,req,name=compare" json:"compare,omitempty"`                  //是否能比牌
	SideCompare     *bool   `protobuf:"varint,4,req,name=sideCompare" json:"sideCompare,omitempty"`          //是否能旁邊比牌
	Fill            *bool   `protobuf:"varint,5,req,name=fill" json:"fill,omitempty"`                        //是否能跟牌
	Betadd          *bool   `protobuf:"varint,6,req,name=betadd" json:"betadd,omitempty"`                    //是否能加注
	First           *bool   `protobuf:"varint,7,req,name=first" json:"first,omitempty"`                      //是否是第一个操作的玩家
	OptTime         *int32  `protobuf:"varint,8,req,name=optTime" json:"optTime,omitempty"`                  //可操作时间
	Betaddvalue     []int32 `protobuf:"varint,9,rep,name=betaddvalue" json:"betaddvalue,omitempty"`          //下注選項
	ProtectOverTime *bool   `protobuf:"varint,10,req,name=ProtectOverTime" json:"ProtectOverTime,omitempty"` //是否能防超時
	SideCompareSeat *int32  `protobuf:"varint,11,opt,name=sideCompareSeat" json:"sideCompareSeat,omitempty"` //旁邊比牌的座位id
}

func (x *IDAZJH_WaitOpt) Reset() {
	*x = IDAZJH_WaitOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_WaitOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_WaitOpt) ProtoMessage() {}

func (x *IDAZJH_WaitOpt) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_WaitOpt.ProtoReflect.Descriptor instead.
func (*IDAZJH_WaitOpt) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{14}
}

func (x *IDAZJH_WaitOpt) GetCheck() bool {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetDrop() bool {
	if x != nil && x.Drop != nil {
		return *x.Drop
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetCompare() bool {
	if x != nil && x.Compare != nil {
		return *x.Compare
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetSideCompare() bool {
	if x != nil && x.SideCompare != nil {
		return *x.SideCompare
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetFill() bool {
	if x != nil && x.Fill != nil {
		return *x.Fill
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetBetadd() bool {
	if x != nil && x.Betadd != nil {
		return *x.Betadd
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetFirst() bool {
	if x != nil && x.First != nil {
		return *x.First
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

func (x *IDAZJH_WaitOpt) GetBetaddvalue() []int32 {
	if x != nil {
		return x.Betaddvalue
	}
	return nil
}

func (x *IDAZJH_WaitOpt) GetProtectOverTime() bool {
	if x != nil && x.ProtectOverTime != nil {
		return *x.ProtectOverTime
	}
	return false
}

func (x *IDAZJH_WaitOpt) GetSideCompareSeat() int32 {
	if x != nil && x.SideCompareSeat != nil {
		return *x.SideCompareSeat
	}
	return 0
}

type IDAZJH_Compare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId *int32 `protobuf:"varint,1,req,name=SeatId" json:"SeatId,omitempty"` //對哪個座位比牌
	Bet    *int32 `protobuf:"varint,2,req,name=Bet" json:"Bet,omitempty"`       //下注額
}

func (x *IDAZJH_Compare) Reset() {
	*x = IDAZJH_Compare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_Compare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_Compare) ProtoMessage() {}

func (x *IDAZJH_Compare) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_Compare.ProtoReflect.Descriptor instead.
func (*IDAZJH_Compare) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{15}
}

func (x *IDAZJH_Compare) GetSeatId() int32 {
	if x != nil && x.SeatId != nil {
		return *x.SeatId
	}
	return 0
}

func (x *IDAZJH_Compare) GetBet() int32 {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return 0
}

type IDAZJH_SideCompareBroadCast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId       *int32 `protobuf:"varint,1,req,name=SeatId" json:"SeatId,omitempty"`             //發起座位
	TargetSeatId *int32 `protobuf:"varint,2,req,name=TargetSeatId" json:"TargetSeatId,omitempty"` //被發起的座位
	Bet          *int32 `protobuf:"varint,3,req,name=Bet" json:"Bet,omitempty"`                   //下注額
	OptTime      *int32 `protobuf:"varint,4,req,name=OptTime" json:"OptTime,omitempty"`           //可操作时间
}

func (x *IDAZJH_SideCompareBroadCast) Reset() {
	*x = IDAZJH_SideCompareBroadCast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_SideCompareBroadCast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_SideCompareBroadCast) ProtoMessage() {}

func (x *IDAZJH_SideCompareBroadCast) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_SideCompareBroadCast.ProtoReflect.Descriptor instead.
func (*IDAZJH_SideCompareBroadCast) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{16}
}

func (x *IDAZJH_SideCompareBroadCast) GetSeatId() int32 {
	if x != nil && x.SeatId != nil {
		return *x.SeatId
	}
	return 0
}

func (x *IDAZJH_SideCompareBroadCast) GetTargetSeatId() int32 {
	if x != nil && x.TargetSeatId != nil {
		return *x.TargetSeatId
	}
	return 0
}

func (x *IDAZJH_SideCompareBroadCast) GetBet() int32 {
	if x != nil && x.Bet != nil {
		return *x.Bet
	}
	return 0
}

func (x *IDAZJH_SideCompareBroadCast) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

type IDAZJH_AcceptSideCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAccept *bool `protobuf:"varint,1,req,name=IsAccept" json:"IsAccept,omitempty"` //是否接受旁邊比牌
}

func (x *IDAZJH_AcceptSideCompare) Reset() {
	*x = IDAZJH_AcceptSideCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_AcceptSideCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_AcceptSideCompare) ProtoMessage() {}

func (x *IDAZJH_AcceptSideCompare) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_AcceptSideCompare.ProtoReflect.Descriptor instead.
func (*IDAZJH_AcceptSideCompare) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{17}
}

func (x *IDAZJH_AcceptSideCompare) GetIsAccept() bool {
	if x != nil && x.IsAccept != nil {
		return *x.IsAccept
	}
	return false
}

type IDAZJH_GameScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStatus    *IDAZJH_GameStatus  `protobuf:"varint,1,req,name=GameStatus,enum=netproto.IDAZJH_GameStatus" json:"GameStatus,omitempty"` //遊戲當前狀態
	CurrOptSeatno *int32              `protobuf:"varint,2,req,name=CurrOptSeatno" json:"CurrOptSeatno,omitempty"`                           //当前操作的座位号
	OptTime       *int32              `protobuf:"varint,3,req,name=OptTime" json:"OptTime,omitempty"`                                       //剩餘操作時間
	OptTimeTotal  *int32              `protobuf:"varint,4,req,name=OptTimeTotal" json:"OptTimeTotal,omitempty"`                             //總操作時間
	ZhuangSeatNO  *int32              `protobuf:"varint,5,req,name=ZhuangSeatNO" json:"ZhuangSeatNO,omitempty"`                             //庄家座位号
	BetTotal      *int64              `protobuf:"varint,6,req,name=BetTotal" json:"BetTotal,omitempty"`                                     //当前下注总额
	Currturn      *int32              `protobuf:"varint,7,req,name=Currturn" json:"Currturn,omitempty"`                                     //第幾輪
	Podlimit      *int64              `protobuf:"varint,8,req,name=Podlimit" json:"Podlimit,omitempty"`                                     //池子上限
	Maxblinds     *int32              `protobuf:"varint,9,req,name=Maxblinds" json:"Maxblinds,omitempty"`                                   //最大下盲次數
	Chaallimit    *int32              `protobuf:"varint,10,req,name=Chaallimit" json:"Chaallimit,omitempty"`                                //下注上限
	UserInfo      []*IDAZJH_UserInfo  `protobuf:"bytes,11,rep,name=UserInfo" json:"UserInfo,omitempty"`                                     //玩家資訊
	WaitOpt       *IDAZJH_WaitOpt     `protobuf:"bytes,12,opt,name=waitOpt" json:"waitOpt,omitempty"`                                       //若為當前操作玩家,可操作項目
	GameRet       *IDAZJH_GameRet     `protobuf:"bytes,13,opt,name=gameRet" json:"gameRet,omitempty"`                                       //若為結算時資訊
	CompareInfo   *IDAZJH_CompareInfo `protobuf:"bytes,14,opt,name=compareInfo" json:"compareInfo,omitempty"`                               //比牌資訊
}

func (x *IDAZJH_GameScene) Reset() {
	*x = IDAZJH_GameScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_GameScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_GameScene) ProtoMessage() {}

func (x *IDAZJH_GameScene) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_GameScene.ProtoReflect.Descriptor instead.
func (*IDAZJH_GameScene) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{18}
}

func (x *IDAZJH_GameScene) GetGameStatus() IDAZJH_GameStatus {
	if x != nil && x.GameStatus != nil {
		return *x.GameStatus
	}
	return IDAZJH_GameStatus_Gaming
}

func (x *IDAZJH_GameScene) GetCurrOptSeatno() int32 {
	if x != nil && x.CurrOptSeatno != nil {
		return *x.CurrOptSeatno
	}
	return 0
}

func (x *IDAZJH_GameScene) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

func (x *IDAZJH_GameScene) GetOptTimeTotal() int32 {
	if x != nil && x.OptTimeTotal != nil {
		return *x.OptTimeTotal
	}
	return 0
}

func (x *IDAZJH_GameScene) GetZhuangSeatNO() int32 {
	if x != nil && x.ZhuangSeatNO != nil {
		return *x.ZhuangSeatNO
	}
	return 0
}

func (x *IDAZJH_GameScene) GetBetTotal() int64 {
	if x != nil && x.BetTotal != nil {
		return *x.BetTotal
	}
	return 0
}

func (x *IDAZJH_GameScene) GetCurrturn() int32 {
	if x != nil && x.Currturn != nil {
		return *x.Currturn
	}
	return 0
}

func (x *IDAZJH_GameScene) GetPodlimit() int64 {
	if x != nil && x.Podlimit != nil {
		return *x.Podlimit
	}
	return 0
}

func (x *IDAZJH_GameScene) GetMaxblinds() int32 {
	if x != nil && x.Maxblinds != nil {
		return *x.Maxblinds
	}
	return 0
}

func (x *IDAZJH_GameScene) GetChaallimit() int32 {
	if x != nil && x.Chaallimit != nil {
		return *x.Chaallimit
	}
	return 0
}

func (x *IDAZJH_GameScene) GetUserInfo() []*IDAZJH_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *IDAZJH_GameScene) GetWaitOpt() *IDAZJH_WaitOpt {
	if x != nil {
		return x.WaitOpt
	}
	return nil
}

func (x *IDAZJH_GameScene) GetGameRet() *IDAZJH_GameRet {
	if x != nil {
		return x.GameRet
	}
	return nil
}

func (x *IDAZJH_GameScene) GetCompareInfo() *IDAZJH_CompareInfo {
	if x != nil {
		return x.CompareInfo
	}
	return nil
}

type IDAZJH_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seatno     *int32             `protobuf:"varint,1,req,name=seatno" json:"seatno,omitempty"`
	BetMoney   *int64             `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`                                     //下注的金額
	Check      *bool              `protobuf:"varint,3,req,name=check" json:"check,omitempty"`                                           //是否看牌
	LastAction *IDAZJH_UserAction `protobuf:"varint,4,req,name=lastAction,enum=netproto.IDAZJH_UserAction" json:"lastAction,omitempty"` //最後一次玩家執行動作
	UserPoker  *IDAZJH_Poker      `protobuf:"bytes,5,opt,name=userPoker" json:"userPoker,omitempty"`                                    //玩家牌型
}

func (x *IDAZJH_UserInfo) Reset() {
	*x = IDAZJH_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_UserInfo) ProtoMessage() {}

func (x *IDAZJH_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_UserInfo.ProtoReflect.Descriptor instead.
func (*IDAZJH_UserInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{19}
}

func (x *IDAZJH_UserInfo) GetSeatno() int32 {
	if x != nil && x.Seatno != nil {
		return *x.Seatno
	}
	return 0
}

func (x *IDAZJH_UserInfo) GetBetMoney() int64 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *IDAZJH_UserInfo) GetCheck() bool {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return false
}

func (x *IDAZJH_UserInfo) GetLastAction() IDAZJH_UserAction {
	if x != nil && x.LastAction != nil {
		return *x.LastAction
	}
	return IDAZJH_UserAction_NoAction
}

func (x *IDAZJH_UserInfo) GetUserPoker() *IDAZJH_Poker {
	if x != nil {
		return x.UserPoker
	}
	return nil
}

type IDAZJH_CompareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId       *int32 `protobuf:"varint,1,req,name=SeatId" json:"SeatId,omitempty"`             //發起座位
	TargetSeatId *int32 `protobuf:"varint,2,req,name=TargetSeatId" json:"TargetSeatId,omitempty"` //被發起的座位
}

func (x *IDAZJH_CompareInfo) Reset() {
	*x = IDAZJH_CompareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_CompareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_CompareInfo) ProtoMessage() {}

func (x *IDAZJH_CompareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_CompareInfo.ProtoReflect.Descriptor instead.
func (*IDAZJH_CompareInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{20}
}

func (x *IDAZJH_CompareInfo) GetSeatId() int32 {
	if x != nil && x.SeatId != nil {
		return *x.SeatId
	}
	return 0
}

func (x *IDAZJH_CompareInfo) GetTargetSeatId() int32 {
	if x != nil && x.TargetSeatId != nil {
		return *x.TargetSeatId
	}
	return 0
}

type IDAZJH_OverPotLimitBroadCast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetTotal   *int64             `protobuf:"varint,1,req,name=betTotal" json:"betTotal,omitempty"`                                     //目前下注總額
	UserBet    *int32             `protobuf:"varint,2,req,name=userBet" json:"userBet,omitempty"`                                       //玩家最後一次下注金額
	UserAction *IDAZJH_UserAction `protobuf:"varint,3,req,name=userAction,enum=netproto.IDAZJH_UserAction" json:"userAction,omitempty"` //玩家做的操作
}

func (x *IDAZJH_OverPotLimitBroadCast) Reset() {
	*x = IDAZJH_OverPotLimitBroadCast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_OverPotLimitBroadCast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_OverPotLimitBroadCast) ProtoMessage() {}

func (x *IDAZJH_OverPotLimitBroadCast) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_OverPotLimitBroadCast.ProtoReflect.Descriptor instead.
func (*IDAZJH_OverPotLimitBroadCast) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{21}
}

func (x *IDAZJH_OverPotLimitBroadCast) GetBetTotal() int64 {
	if x != nil && x.BetTotal != nil {
		return *x.BetTotal
	}
	return 0
}

func (x *IDAZJH_OverPotLimitBroadCast) GetUserBet() int32 {
	if x != nil && x.UserBet != nil {
		return *x.UserBet
	}
	return 0
}

func (x *IDAZJH_OverPotLimitBroadCast) GetUserAction() IDAZJH_UserAction {
	if x != nil && x.UserAction != nil {
		return *x.UserAction
	}
	return IDAZJH_UserAction_NoAction
}

type IDAZJH_OverPotLimitCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinSeatID  []int32 `protobuf:"varint,1,rep,name=winSeatID" json:"winSeatID,omitempty"`   //贏的座位號
	LoseSeatID []int32 `protobuf:"varint,2,rep,name=loseSeatID" json:"loseSeatID,omitempty"` //輸的座位號
}

func (x *IDAZJH_OverPotLimitCompare) Reset() {
	*x = IDAZJH_OverPotLimitCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_OverPotLimitCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_OverPotLimitCompare) ProtoMessage() {}

func (x *IDAZJH_OverPotLimitCompare) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_OverPotLimitCompare.ProtoReflect.Descriptor instead.
func (*IDAZJH_OverPotLimitCompare) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{22}
}

func (x *IDAZJH_OverPotLimitCompare) GetWinSeatID() []int32 {
	if x != nil {
		return x.WinSeatID
	}
	return nil
}

func (x *IDAZJH_OverPotLimitCompare) GetLoseSeatID() []int32 {
	if x != nil {
		return x.LoseSeatID
	}
	return nil
}

type IDAZJH_GameRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinInfo []*IDAZJH_WinInfo `protobuf:"bytes,1,rep,name=winInfo" json:"winInfo,omitempty"` //贏家資訊
}

func (x *IDAZJH_GameRet) Reset() {
	*x = IDAZJH_GameRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_GameRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_GameRet) ProtoMessage() {}

func (x *IDAZJH_GameRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_GameRet.ProtoReflect.Descriptor instead.
func (*IDAZJH_GameRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{23}
}

func (x *IDAZJH_GameRet) GetWinInfo() []*IDAZJH_WinInfo {
	if x != nil {
		return x.WinInfo
	}
	return nil
}

type IDAZJH_WinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinSeatNO *int32 `protobuf:"varint,1,req,name=winSeatNO" json:"winSeatNO,omitempty"` //贏家座位号
	Money     *int64 `protobuf:"varint,2,req,name=money" json:"money,omitempty"`         //赢家赢钱
	Userbet   *int64 `protobuf:"varint,3,req,name=userbet" json:"userbet,omitempty"`     //贏家下注總額
}

func (x *IDAZJH_WinInfo) Reset() {
	*x = IDAZJH_WinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_WinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_WinInfo) ProtoMessage() {}

func (x *IDAZJH_WinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_WinInfo.ProtoReflect.Descriptor instead.
func (*IDAZJH_WinInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{24}
}

func (x *IDAZJH_WinInfo) GetWinSeatNO() int32 {
	if x != nil && x.WinSeatNO != nil {
		return *x.WinSeatNO
	}
	return 0
}

func (x *IDAZJH_WinInfo) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *IDAZJH_WinInfo) GetUserbet() int64 {
	if x != nil && x.Userbet != nil {
		return *x.Userbet
	}
	return 0
}

//錯誤回應
type IDAZJH_ErrorRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode *IDAZJH_ErrorCode `protobuf:"varint,1,req,name=ErrorCode,enum=netproto.IDAZJH_ErrorCode" json:"ErrorCode,omitempty"` //錯誤代碼
	Message   *string           `protobuf:"bytes,2,req,name=Message" json:"Message,omitempty"`                                     //錯誤訊息
}

func (x *IDAZJH_ErrorRet) Reset() {
	*x = IDAZJH_ErrorRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_IDAZJH_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAZJH_ErrorRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAZJH_ErrorRet) ProtoMessage() {}

func (x *IDAZJH_ErrorRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_IDAZJH_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAZJH_ErrorRet.ProtoReflect.Descriptor instead.
func (*IDAZJH_ErrorRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_IDAZJH_proto_rawDescGZIP(), []int{25}
}

func (x *IDAZJH_ErrorRet) GetErrorCode() IDAZJH_ErrorCode {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return IDAZJH_ErrorCode_IDAZJHServerError
}

func (x *IDAZJH_ErrorRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

var File_GameMsg_IDAZJH_proto protoreflect.FileDescriptor

var file_GameMsg_IDAZJH_proto_rawDesc = []byte{
	0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x46, 0x0a, 0x12, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70,
	0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0e, 0x49, 0x44, 0x41, 0x5a, 0x4a,
	0x48, 0x5f, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x62, 0x65, 0x74, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x3f, 0x0a, 0x0d, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x46, 0x61, 0x69, 0x50, 0x61, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x62, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x22, 0x27, 0x0a, 0x0d, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x53, 0x65, 0x61, 0x74, 0x4e,
	0x4f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x49, 0x44,
	0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x69, 0x74, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x64, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x6f, 0x64, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x44, 0x41, 0x5a,
	0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x74,
	0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x62, 0x65, 0x74, 0x61, 0x64,
	0x64, 0x22, 0x73, 0x0a, 0x15, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x42, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x42, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74,
	0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x62, 0x65, 0x74, 0x61, 0x64, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x64,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x0c, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48,
	0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x4d, 0x0a, 0x13, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x22, 0x30, 0x0a, 0x10, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x0f, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x43, 0x75, 0x72,
	0x72, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72,
	0x6e, 0x22, 0x29, 0x0a, 0x0f, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x72, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x11,
	0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x22, 0x51, 0x0a, 0x0d, 0x49, 0x44, 0x41,
	0x5a, 0x4a, 0x48, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74,
	0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x64,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x64, 0x64, 0x22, 0xc8, 0x02, 0x0a,
	0x0e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x74,
	0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x62, 0x65, 0x74, 0x61, 0x64,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x64, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x64, 0x64, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x22, 0x3a, 0x0a, 0x0e, 0x49, 0x44, 0x41, 0x5a, 0x4a,
	0x48, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x42, 0x65, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x53,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x42, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x69, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x22, 0xc8, 0x04, 0x0a, 0x10, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x75,
	0x72, 0x72, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x70, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0c, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72,
	0x72, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72,
	0x72, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x50, 0x6f, 0x64, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x35, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41,
	0x5a, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x4f, 0x70,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70,
	0x74, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x74, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x12, 0x3e,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xce,
	0x01, 0x0a, 0x0f, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a,
	0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x22,
	0x50, 0x0a, 0x12, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x4f, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x1a, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f,
	0x4f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x61, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x44, 0x22, 0x44, 0x0a, 0x0e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x57, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x77, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x0e, 0x49, 0x44, 0x41, 0x5a, 0x4a,
	0x48, 0x5f, 0x57, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x62, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x62, 0x65, 0x74, 0x22, 0x65, 0x0a, 0x0f, 0x49, 0x44, 0x41, 0x5a, 0x4a,
	0x48, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xff,
	0x01, 0x0a, 0x10, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x11, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa0, 0x9c, 0x01, 0x12, 0x15, 0x0a, 0x0f,
	0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xa1, 0x9c, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x52, 0x61, 0x69,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa2, 0x9c, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xa3, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x53,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xa4, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xa5, 0x9c, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x44, 0x72, 0x6f,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa6, 0x9c, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x49, 0x44,
	0x41, 0x5a, 0x4a, 0x48, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa7,
	0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x45, 0x61, 0x72, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa8, 0x9c, 0x01,
	0x2a, 0x91, 0x01, 0x0a, 0x11, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x61, 0x69, 0x73, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x69, 0x64,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x73,
	0x65, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x08, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x65, 0x65, 0x6e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x74, 0x10, 0x0a, 0x2a, 0x66, 0x0a, 0x11, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_IDAZJH_proto_rawDescOnce sync.Once
	file_GameMsg_IDAZJH_proto_rawDescData = file_GameMsg_IDAZJH_proto_rawDesc
)

func file_GameMsg_IDAZJH_proto_rawDescGZIP() []byte {
	file_GameMsg_IDAZJH_proto_rawDescOnce.Do(func() {
		file_GameMsg_IDAZJH_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_IDAZJH_proto_rawDescData)
	})
	return file_GameMsg_IDAZJH_proto_rawDescData
}

var file_GameMsg_IDAZJH_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_GameMsg_IDAZJH_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_GameMsg_IDAZJH_proto_goTypes = []interface{}{
	(IDAZJH_ErrorCode)(0),                // 0: netproto.IDAZJH_ErrorCode
	(IDAZJH_UserAction)(0),               // 1: netproto.IDAZJH_UserAction
	(IDAZJH_GameStatus)(0),               // 2: netproto.IDAZJH_GameStatus
	(*IDAZJH_WaitOptSeat)(nil),           // 3: netproto.IDAZJH_WaitOptSeat
	(*IDAZJH_BetBase)(nil),               // 4: netproto.IDAZJH_BetBase
	(*IDAZJH_FaiPai)(nil),                // 5: netproto.IDAZJH_FaiPai
	(*IDAZJH_SeatNO)(nil),                // 6: netproto.IDAZJH_SeatNO
	(*IDAZJH_CompareCardsRet)(nil),       // 7: netproto.IDAZJH_CompareCardsRet
	(*IDAZJH_BetAdd)(nil),                // 8: netproto.IDAZJH_BetAdd
	(*IDAZJH_BetAddBrodCast)(nil),        // 9: netproto.IDAZJH_BetAddBrodCast
	(*IDAZJH_Poker)(nil),                 // 10: netproto.IDAZJH_Poker
	(*IDAZJH_ComparePoker)(nil),          // 11: netproto.IDAZJH_ComparePoker
	(*IDAZJH_ReadyTime)(nil),             // 12: netproto.IDAZJH_ReadyTime
	(*IDAZJH_Currturn)(nil),              // 13: netproto.IDAZJH_Currturn
	(*IDAZJH_UserDrop)(nil),              // 14: netproto.IDAZJH_UserDrop
	(*IDAZJH_GameNoInfo)(nil),            // 15: netproto.IDAZJH_GameNoInfo
	(*IDAZJH_Follow)(nil),                // 16: netproto.IDAZJH_Follow
	(*IDAZJH_WaitOpt)(nil),               // 17: netproto.IDAZJH_WaitOpt
	(*IDAZJH_Compare)(nil),               // 18: netproto.IDAZJH_Compare
	(*IDAZJH_SideCompareBroadCast)(nil),  // 19: netproto.IDAZJH_SideCompareBroadCast
	(*IDAZJH_AcceptSideCompare)(nil),     // 20: netproto.IDAZJH_AcceptSideCompare
	(*IDAZJH_GameScene)(nil),             // 21: netproto.IDAZJH_GameScene
	(*IDAZJH_UserInfo)(nil),              // 22: netproto.IDAZJH_UserInfo
	(*IDAZJH_CompareInfo)(nil),           // 23: netproto.IDAZJH_CompareInfo
	(*IDAZJH_OverPotLimitBroadCast)(nil), // 24: netproto.IDAZJH_OverPotLimitBroadCast
	(*IDAZJH_OverPotLimitCompare)(nil),   // 25: netproto.IDAZJH_OverPotLimitCompare
	(*IDAZJH_GameRet)(nil),               // 26: netproto.IDAZJH_GameRet
	(*IDAZJH_WinInfo)(nil),               // 27: netproto.IDAZJH_WinInfo
	(*IDAZJH_ErrorRet)(nil),              // 28: netproto.IDAZJH_ErrorRet
	(*UserPoker)(nil),                    // 29: netproto.UserPoker
}
var file_GameMsg_IDAZJH_proto_depIdxs = []int32{
	29, // 0: netproto.IDAZJH_Poker.userpokergroup:type_name -> netproto.UserPoker
	10, // 1: netproto.IDAZJH_ComparePoker.OtherPoker:type_name -> netproto.IDAZJH_Poker
	2,  // 2: netproto.IDAZJH_GameScene.GameStatus:type_name -> netproto.IDAZJH_GameStatus
	22, // 3: netproto.IDAZJH_GameScene.UserInfo:type_name -> netproto.IDAZJH_UserInfo
	17, // 4: netproto.IDAZJH_GameScene.waitOpt:type_name -> netproto.IDAZJH_WaitOpt
	26, // 5: netproto.IDAZJH_GameScene.gameRet:type_name -> netproto.IDAZJH_GameRet
	23, // 6: netproto.IDAZJH_GameScene.compareInfo:type_name -> netproto.IDAZJH_CompareInfo
	1,  // 7: netproto.IDAZJH_UserInfo.lastAction:type_name -> netproto.IDAZJH_UserAction
	10, // 8: netproto.IDAZJH_UserInfo.userPoker:type_name -> netproto.IDAZJH_Poker
	1,  // 9: netproto.IDAZJH_OverPotLimitBroadCast.userAction:type_name -> netproto.IDAZJH_UserAction
	27, // 10: netproto.IDAZJH_GameRet.winInfo:type_name -> netproto.IDAZJH_WinInfo
	0,  // 11: netproto.IDAZJH_ErrorRet.ErrorCode:type_name -> netproto.IDAZJH_ErrorCode
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_GameMsg_IDAZJH_proto_init() }
func file_GameMsg_IDAZJH_proto_init() {
	if File_GameMsg_IDAZJH_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_IDAZJH_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_WaitOptSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_BetBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_FaiPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_SeatNO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_CompareCardsRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_BetAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_BetAddBrodCast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_Poker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_ComparePoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_ReadyTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_Currturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_UserDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_Follow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_WaitOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_Compare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_SideCompareBroadCast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_AcceptSideCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_GameScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_CompareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_OverPotLimitBroadCast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_OverPotLimitCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_GameRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_WinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_IDAZJH_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAZJH_ErrorRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_IDAZJH_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_IDAZJH_proto_goTypes,
		DependencyIndexes: file_GameMsg_IDAZJH_proto_depIdxs,
		EnumInfos:         file_GameMsg_IDAZJH_proto_enumTypes,
		MessageInfos:      file_GameMsg_IDAZJH_proto_msgTypes,
	}.Build()
	File_GameMsg_IDAZJH_proto = out.File
	file_GameMsg_IDAZJH_proto_rawDesc = nil
	file_GameMsg_IDAZJH_proto_goTypes = nil
	file_GameMsg_IDAZJH_proto_depIdxs = nil
}
