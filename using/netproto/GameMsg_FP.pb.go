// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: GameMsg_FP.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FP_Flow int32

const (
	FP_Flow_FPReady          FP_Flow = 1 //准备中
	FP_Flow_FPStartAction    FP_Flow = 2 //遊戲開始
	FP_Flow_FPBet            FP_Flow = 3 //下注状态
	FP_Flow_FPBetEnd         FP_Flow = 4 //下注結束
	FP_Flow_FPKaiJiang       FP_Flow = 5 //开奖状态, 开牌中
	FP_Flow_FPKaiJiangAction FP_Flow = 6 //开奖动画, 派奖中.
	FP_Flow_FPEndAction      FP_Flow = 7 //结算动画, 休息中.
	FP_Flow_FPWait           FP_Flow = 8 //等待游戏开始,
)

// Enum value maps for FP_Flow.
var (
	FP_Flow_name = map[int32]string{
		1: "FPReady",
		2: "FPStartAction",
		3: "FPBet",
		4: "FPBetEnd",
		5: "FPKaiJiang",
		6: "FPKaiJiangAction",
		7: "FPEndAction",
		8: "FPWait",
	}
	FP_Flow_value = map[string]int32{
		"FPReady":          1,
		"FPStartAction":    2,
		"FPBet":            3,
		"FPBetEnd":         4,
		"FPKaiJiang":       5,
		"FPKaiJiangAction": 6,
		"FPEndAction":      7,
		"FPWait":           8,
	}
)

func (x FP_Flow) Enum() *FP_Flow {
	p := new(FP_Flow)
	*p = x
	return p
}

func (x FP_Flow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FP_Flow) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_FP_proto_enumTypes[0].Descriptor()
}

func (FP_Flow) Type() protoreflect.EnumType {
	return &file_GameMsg_FP_proto_enumTypes[0]
}

func (x FP_Flow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FP_Flow) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FP_Flow(num)
	return nil
}

// Deprecated: Use FP_Flow.Descriptor instead.
func (FP_Flow) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{0}
}

type FP_Animal int32

const (
	FP_Animal_FPAnimalLion   FP_Animal = 1
	FP_Animal_FPAnimalPanda  FP_Animal = 2
	FP_Animal_FPAnimalMonkey FP_Animal = 3
	FP_Animal_FPAnimalRabbit FP_Animal = 4
)

// Enum value maps for FP_Animal.
var (
	FP_Animal_name = map[int32]string{
		1: "FPAnimalLion",
		2: "FPAnimalPanda",
		3: "FPAnimalMonkey",
		4: "FPAnimalRabbit",
	}
	FP_Animal_value = map[string]int32{
		"FPAnimalLion":   1,
		"FPAnimalPanda":  2,
		"FPAnimalMonkey": 3,
		"FPAnimalRabbit": 4,
	}
)

func (x FP_Animal) Enum() *FP_Animal {
	p := new(FP_Animal)
	*p = x
	return p
}

func (x FP_Animal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FP_Animal) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_FP_proto_enumTypes[1].Descriptor()
}

func (FP_Animal) Type() protoreflect.EnumType {
	return &file_GameMsg_FP_proto_enumTypes[1]
}

func (x FP_Animal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FP_Animal) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FP_Animal(num)
	return nil
}

// Deprecated: Use FP_Animal.Descriptor instead.
func (FP_Animal) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{1}
}

type FP_Animal_Color int32

const (
	FP_Animal_Color_FPAnimalColorRed    FP_Animal_Color = 1
	FP_Animal_Color_FPAnimalColorYellow FP_Animal_Color = 2
	FP_Animal_Color_FPAnimalColorGreen  FP_Animal_Color = 3
)

// Enum value maps for FP_Animal_Color.
var (
	FP_Animal_Color_name = map[int32]string{
		1: "FPAnimalColorRed",
		2: "FPAnimalColorYellow",
		3: "FPAnimalColorGreen",
	}
	FP_Animal_Color_value = map[string]int32{
		"FPAnimalColorRed":    1,
		"FPAnimalColorYellow": 2,
		"FPAnimalColorGreen":  3,
	}
)

func (x FP_Animal_Color) Enum() *FP_Animal_Color {
	p := new(FP_Animal_Color)
	*p = x
	return p
}

func (x FP_Animal_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FP_Animal_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_FP_proto_enumTypes[2].Descriptor()
}

func (FP_Animal_Color) Type() protoreflect.EnumType {
	return &file_GameMsg_FP_proto_enumTypes[2]
}

func (x FP_Animal_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FP_Animal_Color) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FP_Animal_Color(num)
	return nil
}

// Deprecated: Use FP_Animal_Color.Descriptor instead.
func (FP_Animal_Color) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{2}
}

type FP_BetType int32

const (
	FP_BetType_FPBetTypeRedLion      FP_BetType = 1  //紅獅子
	FP_BetType_FPBetTypeYellowLion   FP_BetType = 2  //黃獅子
	FP_BetType_FPBetTypeGreenLion    FP_BetType = 3  //綠師子
	FP_BetType_FPBetTypeRedPanda     FP_BetType = 4  //紅熊貓
	FP_BetType_FPBetTypeYellowPanda  FP_BetType = 5  //黃熊貓
	FP_BetType_FPBetTypeGreenPanda   FP_BetType = 6  //綠熊貓
	FP_BetType_FPBetTypeRedMonkey    FP_BetType = 7  //紅猴子
	FP_BetType_FPBetTypeYellowMonkey FP_BetType = 8  //黃猴子
	FP_BetType_FPBetTypeGreenMonkey  FP_BetType = 9  //綠猴子
	FP_BetType_FPBetTypeRedRabbit    FP_BetType = 10 //紅兔子
	FP_BetType_FPBetTypeYellowRabbit FP_BetType = 11 //黃兔子
	FP_BetType_FPBetTypeGreenRabbit  FP_BetType = 12 //綠兔子
)

// Enum value maps for FP_BetType.
var (
	FP_BetType_name = map[int32]string{
		1:  "FPBetTypeRedLion",
		2:  "FPBetTypeYellowLion",
		3:  "FPBetTypeGreenLion",
		4:  "FPBetTypeRedPanda",
		5:  "FPBetTypeYellowPanda",
		6:  "FPBetTypeGreenPanda",
		7:  "FPBetTypeRedMonkey",
		8:  "FPBetTypeYellowMonkey",
		9:  "FPBetTypeGreenMonkey",
		10: "FPBetTypeRedRabbit",
		11: "FPBetTypeYellowRabbit",
		12: "FPBetTypeGreenRabbit",
	}
	FP_BetType_value = map[string]int32{
		"FPBetTypeRedLion":      1,
		"FPBetTypeYellowLion":   2,
		"FPBetTypeGreenLion":    3,
		"FPBetTypeRedPanda":     4,
		"FPBetTypeYellowPanda":  5,
		"FPBetTypeGreenPanda":   6,
		"FPBetTypeRedMonkey":    7,
		"FPBetTypeYellowMonkey": 8,
		"FPBetTypeGreenMonkey":  9,
		"FPBetTypeRedRabbit":    10,
		"FPBetTypeYellowRabbit": 11,
		"FPBetTypeGreenRabbit":  12,
	}
)

func (x FP_BetType) Enum() *FP_BetType {
	p := new(FP_BetType)
	*p = x
	return p
}

func (x FP_BetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FP_BetType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_FP_proto_enumTypes[3].Descriptor()
}

func (FP_BetType) Type() protoreflect.EnumType {
	return &file_GameMsg_FP_proto_enumTypes[3]
}

func (x FP_BetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FP_BetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FP_BetType(num)
	return nil
}

// Deprecated: Use FP_BetType.Descriptor instead.
func (FP_BetType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{3}
}

type FP_ResultType int32

const (
	FP_ResultType_FPResultTypeNormal    FP_ResultType = 1 //一般模式
	FP_ResultType_FPResultTypeLightning FP_ResultType = 2 //閃電模式
	FP_ResultType_FPResultTypeTwice     FP_ResultType = 3 //送燈模式
	FP_ResultType_FPResultTypeDaisangen FP_ResultType = 4 //大三元模式
	FP_ResultType_FPResultTypeBigFour   FP_ResultType = 5 //大四喜模式
)

// Enum value maps for FP_ResultType.
var (
	FP_ResultType_name = map[int32]string{
		1: "FPResultTypeNormal",
		2: "FPResultTypeLightning",
		3: "FPResultTypeTwice",
		4: "FPResultTypeDaisangen",
		5: "FPResultTypeBigFour",
	}
	FP_ResultType_value = map[string]int32{
		"FPResultTypeNormal":    1,
		"FPResultTypeLightning": 2,
		"FPResultTypeTwice":     3,
		"FPResultTypeDaisangen": 4,
		"FPResultTypeBigFour":   5,
	}
)

func (x FP_ResultType) Enum() *FP_ResultType {
	p := new(FP_ResultType)
	*p = x
	return p
}

func (x FP_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FP_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_FP_proto_enumTypes[4].Descriptor()
}

func (FP_ResultType) Type() protoreflect.EnumType {
	return &file_GameMsg_FP_proto_enumTypes[4]
}

func (x FP_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FP_ResultType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FP_ResultType(num)
	return nil
}

// Deprecated: Use FP_ResultType.Descriptor instead.
func (FP_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{4}
}

//下注设置
type FP_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipScore []int64          `protobuf:"varint,1,rep,name=ChipScore" json:"ChipScore,omitempty"` //下注的籌碼
	BetScore  *int64           `protobuf:"varint,2,req,name=BetScore" json:"BetScore,omitempty"`   //最小下注籌碼
	BetRange  *FP_BetRangeList `protobuf:"bytes,3,req,name=BetRange" json:"BetRange,omitempty"`    //個人下注上下限紅
}

func (x *FP_Setting) Reset() {
	*x = FP_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_Setting) ProtoMessage() {}

func (x *FP_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_Setting.ProtoReflect.Descriptor instead.
func (*FP_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{0}
}

func (x *FP_Setting) GetChipScore() []int64 {
	if x != nil {
		return x.ChipScore
	}
	return nil
}

func (x *FP_Setting) GetBetScore() int64 {
	if x != nil && x.BetScore != nil {
		return *x.BetScore
	}
	return 0
}

func (x *FP_Setting) GetBetRange() *FP_BetRangeList {
	if x != nil {
		return x.BetRange
	}
	return nil
}

//下注限制列表消息
type FP_BetRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FP_Range `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *FP_BetRangeList) Reset() {
	*x = FP_BetRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_BetRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_BetRangeList) ProtoMessage() {}

func (x *FP_BetRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_BetRangeList.ProtoReflect.Descriptor instead.
func (*FP_BetRangeList) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{1}
}

func (x *FP_BetRangeList) GetData() []*FP_Range {
	if x != nil {
		return x.Data
	}
	return nil
}

type FP_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *FP_BetType `protobuf:"varint,1,req,name=BetType,enum=netproto.FP_BetType" json:"BetType,omitempty"`
	Min     *int64      `protobuf:"varint,2,req,name=Min" json:"Min,omitempty"`
	Max     *int64      `protobuf:"varint,3,req,name=Max" json:"Max,omitempty"`
}

func (x *FP_Range) Reset() {
	*x = FP_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_Range) ProtoMessage() {}

func (x *FP_Range) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_Range.ProtoReflect.Descriptor instead.
func (*FP_Range) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{2}
}

func (x *FP_Range) GetBetType() FP_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return FP_BetType_FPBetTypeRedLion
}

func (x *FP_Range) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *FP_Range) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type FP_Turntable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Animal      []FP_Animal       `protobuf:"varint,1,rep,name=Animal,enum=netproto.FP_Animal" json:"Animal,omitempty"`
	AnimalColor []FP_Animal_Color `protobuf:"varint,2,rep,name=AnimalColor,enum=netproto.FP_Animal_Color" json:"AnimalColor,omitempty"`
}

func (x *FP_Turntable) Reset() {
	*x = FP_Turntable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_Turntable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_Turntable) ProtoMessage() {}

func (x *FP_Turntable) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_Turntable.ProtoReflect.Descriptor instead.
func (*FP_Turntable) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{3}
}

func (x *FP_Turntable) GetAnimal() []FP_Animal {
	if x != nil {
		return x.Animal
	}
	return nil
}

func (x *FP_Turntable) GetAnimalColor() []FP_Animal_Color {
	if x != nil {
		return x.AnimalColor
	}
	return nil
}

type FP_BetTypeOdds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *FP_BetType `protobuf:"varint,1,req,name=BetType,enum=netproto.FP_BetType" json:"BetType,omitempty"`
	Odds    *int32      `protobuf:"varint,2,req,name=Odds" json:"Odds,omitempty"`
}

func (x *FP_BetTypeOdds) Reset() {
	*x = FP_BetTypeOdds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_BetTypeOdds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_BetTypeOdds) ProtoMessage() {}

func (x *FP_BetTypeOdds) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_BetTypeOdds.ProtoReflect.Descriptor instead.
func (*FP_BetTypeOdds) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{4}
}

func (x *FP_BetTypeOdds) GetBetType() FP_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return FP_BetType_FPBetTypeRedLion
}

func (x *FP_BetTypeOdds) GetOdds() int32 {
	if x != nil && x.Odds != nil {
		return *x.Odds
	}
	return 0
}

//牌局編號
type FP_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *FP_GameNoInfo) Reset() {
	*x = FP_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_GameNoInfo) ProtoMessage() {}

func (x *FP_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_GameNoInfo.ProtoReflect.Descriptor instead.
func (*FP_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{5}
}

func (x *FP_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

type FP_RoundSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnTable *FP_Turntable     `protobuf:"bytes,1,req,name=TurnTable" json:"TurnTable,omitempty"`
	Odds      []*FP_BetTypeOdds `protobuf:"bytes,2,rep,name=Odds" json:"Odds,omitempty"`
	GameNo    *FP_GameNoInfo    `protobuf:"bytes,3,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *FP_RoundSetting) Reset() {
	*x = FP_RoundSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_RoundSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_RoundSetting) ProtoMessage() {}

func (x *FP_RoundSetting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_RoundSetting.ProtoReflect.Descriptor instead.
func (*FP_RoundSetting) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{6}
}

func (x *FP_RoundSetting) GetTurnTable() *FP_Turntable {
	if x != nil {
		return x.TurnTable
	}
	return nil
}

func (x *FP_RoundSetting) GetOdds() []*FP_BetTypeOdds {
	if x != nil {
		return x.Odds
	}
	return nil
}

func (x *FP_RoundSetting) GetGameNo() *FP_GameNoInfo {
	if x != nil {
		return x.GameNo
	}
	return nil
}

//状态消息
type FP_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *FP_Flow `protobuf:"varint,1,req,name=State,enum=netproto.FP_Flow" json:"State,omitempty"` //状态
	Time  *int32   `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`                         //此状态的剩余时间
}

func (x *FP_State) Reset() {
	*x = FP_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_State) ProtoMessage() {}

func (x *FP_State) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_State.ProtoReflect.Descriptor instead.
func (*FP_State) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{7}
}

func (x *FP_State) GetState() FP_Flow {
	if x != nil && x.State != nil {
		return *x.State
	}
	return FP_Flow_FPReady
}

func (x *FP_State) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//前20次开出的牌
type FP_ResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultSummary *FP_GameResultSummary `protobuf:"bytes,1,req,name=ResultSummary" json:"ResultSummary,omitempty"`
	Results       []*FP_GameResult      `protobuf:"bytes,2,rep,name=Results" json:"Results,omitempty"`
}

func (x *FP_ResultList) Reset() {
	*x = FP_ResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_ResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_ResultList) ProtoMessage() {}

func (x *FP_ResultList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_ResultList.ProtoReflect.Descriptor instead.
func (*FP_ResultList) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{8}
}

func (x *FP_ResultList) GetResultSummary() *FP_GameResultSummary {
	if x != nil {
		return x.ResultSummary
	}
	return nil
}

func (x *FP_ResultList) GetResults() []*FP_GameResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FP_GameResultSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalCount    *int32 `protobuf:"varint,1,req,name=NormalCount" json:"NormalCount,omitempty"`
	LightningCount *int32 `protobuf:"varint,2,req,name=LightningCount" json:"LightningCount,omitempty"`
	TwiceCount     *int32 `protobuf:"varint,3,req,name=TwiceCount" json:"TwiceCount,omitempty"`
	DaisangenCount *int32 `protobuf:"varint,4,req,name=DaisangenCount" json:"DaisangenCount,omitempty"`
	BigFourCount   *int32 `protobuf:"varint,5,req,name=BigFourCount" json:"BigFourCount,omitempty"`
}

func (x *FP_GameResultSummary) Reset() {
	*x = FP_GameResultSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_GameResultSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_GameResultSummary) ProtoMessage() {}

func (x *FP_GameResultSummary) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_GameResultSummary.ProtoReflect.Descriptor instead.
func (*FP_GameResultSummary) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{9}
}

func (x *FP_GameResultSummary) GetNormalCount() int32 {
	if x != nil && x.NormalCount != nil {
		return *x.NormalCount
	}
	return 0
}

func (x *FP_GameResultSummary) GetLightningCount() int32 {
	if x != nil && x.LightningCount != nil {
		return *x.LightningCount
	}
	return 0
}

func (x *FP_GameResultSummary) GetTwiceCount() int32 {
	if x != nil && x.TwiceCount != nil {
		return *x.TwiceCount
	}
	return 0
}

func (x *FP_GameResultSummary) GetDaisangenCount() int32 {
	if x != nil && x.DaisangenCount != nil {
		return *x.DaisangenCount
	}
	return 0
}

func (x *FP_GameResultSummary) GetBigFourCount() int32 {
	if x != nil && x.BigFourCount != nil {
		return *x.BigFourCount
	}
	return 0
}

//游戏结果
type FP_GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultType           *FP_ResultType `protobuf:"varint,1,req,name=ResultType,enum=netproto.FP_ResultType" json:"ResultType,omitempty"`
	Result               []FP_BetType   `protobuf:"varint,2,rep,name=Result,enum=netproto.FP_BetType" json:"Result,omitempty"`
	TurntableAnimalIndex []int32        `protobuf:"varint,3,rep,name=TurntableAnimalIndex" json:"TurntableAnimalIndex,omitempty"`
	TurntableColorIndex  []int32        `protobuf:"varint,4,rep,name=TurntableColorIndex" json:"TurntableColorIndex,omitempty"`
}

func (x *FP_GameResult) Reset() {
	*x = FP_GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_GameResult) ProtoMessage() {}

func (x *FP_GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_GameResult.ProtoReflect.Descriptor instead.
func (*FP_GameResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{10}
}

func (x *FP_GameResult) GetResultType() FP_ResultType {
	if x != nil && x.ResultType != nil {
		return *x.ResultType
	}
	return FP_ResultType_FPResultTypeNormal
}

func (x *FP_GameResult) GetResult() []FP_BetType {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FP_GameResult) GetTurntableAnimalIndex() []int32 {
	if x != nil {
		return x.TurntableAnimalIndex
	}
	return nil
}

func (x *FP_GameResult) GetTurntableColorIndex() []int32 {
	if x != nil {
		return x.TurntableColorIndex
	}
	return nil
}

//广播用户下注的数组
type FP_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32             `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*FP_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *FP_BroadCastBetArr) Reset() {
	*x = FP_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_BroadCastBetArr) ProtoMessage() {}

func (x *FP_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*FP_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{11}
}

func (x *FP_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *FP_BroadCastBetArr) GetBroadCastBetArr() []*FP_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//广播用户下注内容数据结构
type FP_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *FP_BetType `protobuf:"varint,1,req,name=Type,enum=netproto.FP_BetType" json:"Type,omitempty"`
	Score *int64      `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`
}

func (x *FP_BroadCastBet) Reset() {
	*x = FP_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_BroadCastBet) ProtoMessage() {}

func (x *FP_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_BroadCastBet.ProtoReflect.Descriptor instead.
func (*FP_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{12}
}

func (x *FP_BroadCastBet) GetType() FP_BetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FP_BetType_FPBetTypeRedLion
}

func (x *FP_BroadCastBet) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

//用户下注数组
type FP_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*FP_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *FP_BetArr) Reset() {
	*x = FP_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_BetArr) ProtoMessage() {}

func (x *FP_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_BetArr.ProtoReflect.Descriptor instead.
func (*FP_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{13}
}

func (x *FP_BetArr) GetBetArr() []*FP_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type FP_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *FP_BetType `protobuf:"varint,1,req,name=BetType,enum=netproto.FP_BetType" json:"BetType,omitempty"`
	Score   *int64      `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`
}

func (x *FP_Bet) Reset() {
	*x = FP_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_Bet) ProtoMessage() {}

func (x *FP_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_Bet.ProtoReflect.Descriptor instead.
func (*FP_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{14}
}

func (x *FP_Bet) GetBetType() FP_BetType {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return FP_BetType_FPBetTypeRedLion
}

func (x *FP_Bet) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

//下注的结果
type FP_BetAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32      `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`                            //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4此类下注已达到上限，-5下注金額不能為0，-6用户金额小於下注限制
	Score  *int64      `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`                        //用户的钱，下注以后的金额。
	Type   *FP_BetType `protobuf:"varint,3,opt,name=Type,enum=netproto.FP_BetType" json:"Type,omitempty"` //下注超过限制的下注类型
	BetArr []*FP_Bet   `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"`                       //用户下注数据
}

func (x *FP_BetAck) Reset() {
	*x = FP_BetAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_BetAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_BetAck) ProtoMessage() {}

func (x *FP_BetAck) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_BetAck.ProtoReflect.Descriptor instead.
func (*FP_BetAck) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{15}
}

func (x *FP_BetAck) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *FP_BetAck) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *FP_BetAck) GetType() FP_BetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FP_BetType_FPBetTypeRedLion
}

func (x *FP_BetAck) GetBetArr() []*FP_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//游戏用户赢钱结果
type FP_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemWin *int64 `protobuf:"varint,1,req,name=SystemWin" json:"SystemWin,omitempty"`
	SelfWin   *int64 `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
}

func (x *FP_GameResultUserMoney) Reset() {
	*x = FP_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_GameResultUserMoney) ProtoMessage() {}

func (x *FP_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*FP_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{16}
}

func (x *FP_GameResultUserMoney) GetSystemWin() int64 {
	if x != nil && x.SystemWin != nil {
		return *x.SystemWin
	}
	return 0
}

func (x *FP_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

type FP_Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        *FP_State               `protobuf:"bytes,1,req,name=State" json:"State,omitempty"`
	RoundSetting *FP_RoundSetting        `protobuf:"bytes,2,req,name=RoundSetting" json:"RoundSetting,omitempty"`
	ResultList   *FP_ResultList          `protobuf:"bytes,3,opt,name=ResultList" json:"ResultList,omitempty"`
	UserBet      *FP_UserBetInfo         `protobuf:"bytes,4,opt,name=UserBet" json:"UserBet,omitempty"`
	TotalUserBet *FP_BroadCastBetArr     `protobuf:"bytes,5,opt,name=TotalUserBet" json:"TotalUserBet,omitempty"`
	GameResult   *FP_GameResult          `protobuf:"bytes,6,opt,name=GameResult" json:"GameResult,omitempty"`
	UserWinLose  *FP_GameResultUserMoney `protobuf:"bytes,7,opt,name=UserWinLose" json:"UserWinLose,omitempty"`
}

func (x *FP_Scene) Reset() {
	*x = FP_Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_Scene) ProtoMessage() {}

func (x *FP_Scene) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_Scene.ProtoReflect.Descriptor instead.
func (*FP_Scene) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{17}
}

func (x *FP_Scene) GetState() *FP_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *FP_Scene) GetRoundSetting() *FP_RoundSetting {
	if x != nil {
		return x.RoundSetting
	}
	return nil
}

func (x *FP_Scene) GetResultList() *FP_ResultList {
	if x != nil {
		return x.ResultList
	}
	return nil
}

func (x *FP_Scene) GetUserBet() *FP_UserBetInfo {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *FP_Scene) GetTotalUserBet() *FP_BroadCastBetArr {
	if x != nil {
		return x.TotalUserBet
	}
	return nil
}

func (x *FP_Scene) GetGameResult() *FP_GameResult {
	if x != nil {
		return x.GameResult
	}
	return nil
}

func (x *FP_Scene) GetUserWinLose() *FP_GameResultUserMoney {
	if x != nil {
		return x.UserWinLose
	}
	return nil
}

//用户断线重连下注消息
type FP_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score   *int64             `protobuf:"varint,1,req,name=Score" json:"Score,omitempty"`
	BetInfo []*FP_BroadCastBet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *FP_UserBetInfo) Reset() {
	*x = FP_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_FP_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FP_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FP_UserBetInfo) ProtoMessage() {}

func (x *FP_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_FP_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FP_UserBetInfo.ProtoReflect.Descriptor instead.
func (*FP_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_FP_proto_rawDescGZIP(), []int{18}
}

func (x *FP_UserBetInfo) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *FP_UserBetInfo) GetBetInfo() []*FP_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

var File_GameMsg_FP_proto protoreflect.FileDescriptor

var file_GameMsg_FP_proto_rawDesc = []byte{
	0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x46, 0x50, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x0a,
	0x46, 0x50, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x69, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x43,
	0x68, 0x69, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x46,
	0x50, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x50, 0x5f, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x50, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x22, 0x78, 0x0a, 0x0c, 0x46, 0x50, 0x5f, 0x54, 0x75, 0x72,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x22, 0x54, 0x0a, 0x0e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64,
	0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x50, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x0d, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x22,
	0xa6, 0x01, 0x0a, 0x0f, 0x46, 0x50, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09,
	0x54, 0x75, 0x72, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x4f, 0x64, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x64, 0x64,
	0x73, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x22, 0x47, 0x0a, 0x08, 0x46, 0x50, 0x5f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x50, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x46, 0x50, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xcc, 0x01, 0x0a,
	0x14, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x77, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x77, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x61, 0x69, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x61, 0x69, 0x73, 0x61, 0x6e, 0x67,
	0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x67, 0x46, 0x6f,
	0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x42,
	0x69, 0x67, 0x46, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x0d,
	0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x14, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x71, 0x0a, 0x12, 0x46, 0x50,
	0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x51, 0x0a,
	0x0f, 0x46, 0x50, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x35, 0x0a, 0x09, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x28, 0x0a,
	0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x52,
	0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x4e, 0x0a, 0x06, 0x46, 0x50, 0x5f, 0x42, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50,
	0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x46, 0x50, 0x5f, 0x42,
	0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x22, 0x50, 0x0a, 0x16, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c,
	0x66, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66,
	0x57, 0x69, 0x6e, 0x22, 0x9f, 0x03, 0x0a, 0x08, 0x46, 0x50, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x50, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x42, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69,
	0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x46, 0x50, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x50, 0x5f, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2a, 0x85, 0x01, 0x0a, 0x07, 0x46, 0x50, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x50, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x50, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x50, 0x42, 0x65, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x50, 0x42,
	0x65, 0x74, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x50, 0x4b, 0x61, 0x69,
	0x4a, 0x69, 0x61, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x50, 0x4b, 0x61, 0x69,
	0x4a, 0x69, 0x61, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x50, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x50, 0x57, 0x61, 0x69, 0x74, 0x10, 0x08, 0x2a, 0x58, 0x0a, 0x09, 0x46, 0x50,
	0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x50, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x4c, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x50, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x64, 0x61, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x50, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x50, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x10, 0x04, 0x2a, 0x58, 0x0a, 0x0f, 0x46, 0x50, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x50, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x50, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x50, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x03, 0x2a, 0xb7,
	0x02, 0x0a, 0x0a, 0x46, 0x50, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x64, 0x4c, 0x69, 0x6f,
	0x6e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x69,
	0x6f, 0x6e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x6e, 0x64, 0x61, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61,
	0x6e, 0x64, 0x61, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x6e, 0x64, 0x61, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x64, 0x4d, 0x6f,
	0x6e, 0x6b, 0x65, 0x79, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x10,
	0x08, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x64, 0x52, 0x61, 0x62, 0x62, 0x69,
	0x74, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x10, 0x0b, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x50, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x10, 0x0c, 0x2a, 0x8d, 0x01, 0x0a, 0x0d, 0x46, 0x50, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x50,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x50, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x50, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x77, 0x69,
	0x63, 0x65, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x50, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x69, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x50, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x69, 0x67, 0x46, 0x6f, 0x75, 0x72, 0x10, 0x05, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_FP_proto_rawDescOnce sync.Once
	file_GameMsg_FP_proto_rawDescData = file_GameMsg_FP_proto_rawDesc
)

func file_GameMsg_FP_proto_rawDescGZIP() []byte {
	file_GameMsg_FP_proto_rawDescOnce.Do(func() {
		file_GameMsg_FP_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_FP_proto_rawDescData)
	})
	return file_GameMsg_FP_proto_rawDescData
}

var file_GameMsg_FP_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_GameMsg_FP_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_GameMsg_FP_proto_goTypes = []interface{}{
	(FP_Flow)(0),                   // 0: netproto.FP_Flow
	(FP_Animal)(0),                 // 1: netproto.FP_Animal
	(FP_Animal_Color)(0),           // 2: netproto.FP_Animal_Color
	(FP_BetType)(0),                // 3: netproto.FP_BetType
	(FP_ResultType)(0),             // 4: netproto.FP_ResultType
	(*FP_Setting)(nil),             // 5: netproto.FP_Setting
	(*FP_BetRangeList)(nil),        // 6: netproto.FP_BetRangeList
	(*FP_Range)(nil),               // 7: netproto.FP_Range
	(*FP_Turntable)(nil),           // 8: netproto.FP_Turntable
	(*FP_BetTypeOdds)(nil),         // 9: netproto.FP_BetTypeOdds
	(*FP_GameNoInfo)(nil),          // 10: netproto.FP_GameNoInfo
	(*FP_RoundSetting)(nil),        // 11: netproto.FP_RoundSetting
	(*FP_State)(nil),               // 12: netproto.FP_State
	(*FP_ResultList)(nil),          // 13: netproto.FP_ResultList
	(*FP_GameResultSummary)(nil),   // 14: netproto.FP_GameResultSummary
	(*FP_GameResult)(nil),          // 15: netproto.FP_GameResult
	(*FP_BroadCastBetArr)(nil),     // 16: netproto.FP_BroadCastBetArr
	(*FP_BroadCastBet)(nil),        // 17: netproto.FP_BroadCastBet
	(*FP_BetArr)(nil),              // 18: netproto.FP_BetArr
	(*FP_Bet)(nil),                 // 19: netproto.FP_Bet
	(*FP_BetAck)(nil),              // 20: netproto.FP_BetAck
	(*FP_GameResultUserMoney)(nil), // 21: netproto.FP_GameResultUserMoney
	(*FP_Scene)(nil),               // 22: netproto.FP_Scene
	(*FP_UserBetInfo)(nil),         // 23: netproto.FP_UserBetInfo
}
var file_GameMsg_FP_proto_depIdxs = []int32{
	6,  // 0: netproto.FP_Setting.BetRange:type_name -> netproto.FP_BetRangeList
	7,  // 1: netproto.FP_BetRangeList.data:type_name -> netproto.FP_Range
	3,  // 2: netproto.FP_Range.BetType:type_name -> netproto.FP_BetType
	1,  // 3: netproto.FP_Turntable.Animal:type_name -> netproto.FP_Animal
	2,  // 4: netproto.FP_Turntable.AnimalColor:type_name -> netproto.FP_Animal_Color
	3,  // 5: netproto.FP_BetTypeOdds.BetType:type_name -> netproto.FP_BetType
	8,  // 6: netproto.FP_RoundSetting.TurnTable:type_name -> netproto.FP_Turntable
	9,  // 7: netproto.FP_RoundSetting.Odds:type_name -> netproto.FP_BetTypeOdds
	10, // 8: netproto.FP_RoundSetting.GameNo:type_name -> netproto.FP_GameNoInfo
	0,  // 9: netproto.FP_State.State:type_name -> netproto.FP_Flow
	14, // 10: netproto.FP_ResultList.ResultSummary:type_name -> netproto.FP_GameResultSummary
	15, // 11: netproto.FP_ResultList.Results:type_name -> netproto.FP_GameResult
	4,  // 12: netproto.FP_GameResult.ResultType:type_name -> netproto.FP_ResultType
	3,  // 13: netproto.FP_GameResult.Result:type_name -> netproto.FP_BetType
	17, // 14: netproto.FP_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.FP_BroadCastBet
	3,  // 15: netproto.FP_BroadCastBet.Type:type_name -> netproto.FP_BetType
	19, // 16: netproto.FP_BetArr.BetArr:type_name -> netproto.FP_Bet
	3,  // 17: netproto.FP_Bet.BetType:type_name -> netproto.FP_BetType
	3,  // 18: netproto.FP_BetAck.Type:type_name -> netproto.FP_BetType
	19, // 19: netproto.FP_BetAck.BetArr:type_name -> netproto.FP_Bet
	12, // 20: netproto.FP_Scene.State:type_name -> netproto.FP_State
	11, // 21: netproto.FP_Scene.RoundSetting:type_name -> netproto.FP_RoundSetting
	13, // 22: netproto.FP_Scene.ResultList:type_name -> netproto.FP_ResultList
	23, // 23: netproto.FP_Scene.UserBet:type_name -> netproto.FP_UserBetInfo
	16, // 24: netproto.FP_Scene.TotalUserBet:type_name -> netproto.FP_BroadCastBetArr
	15, // 25: netproto.FP_Scene.GameResult:type_name -> netproto.FP_GameResult
	21, // 26: netproto.FP_Scene.UserWinLose:type_name -> netproto.FP_GameResultUserMoney
	17, // 27: netproto.FP_UserBetInfo.BetInfo:type_name -> netproto.FP_BroadCastBet
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_GameMsg_FP_proto_init() }
func file_GameMsg_FP_proto_init() {
	if File_GameMsg_FP_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_FP_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_BetRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_Turntable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_BetTypeOdds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_RoundSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_ResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_GameResultSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_BetAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_FP_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FP_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_FP_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_FP_proto_goTypes,
		DependencyIndexes: file_GameMsg_FP_proto_depIdxs,
		EnumInfos:         file_GameMsg_FP_proto_enumTypes,
		MessageInfos:      file_GameMsg_FP_proto_msgTypes,
	}.Build()
	File_GameMsg_FP_proto = out.File
	file_GameMsg_FP_proto_rawDesc = nil
	file_GameMsg_FP_proto_goTypes = nil
	file_GameMsg_FP_proto_depIdxs = nil
}
