// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_ALD.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// [訊息] 遊戲初始時所需資訊 Server to Client -> Slot_SettingID = 20001
type ALD_MSG_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayLineMode    *int32                 `protobuf:"varint,1,req,name=PayLineMode" json:"PayLineMode,omitempty"`      // 賠付線類型 (0.非全線, 1.全線)
	TotalPayLine   *int32                 `protobuf:"varint,2,req,name=TotalPayLine" json:"TotalPayLine,omitempty"`    // 總共多少賠付線(非全線讀SlotPayLine表，全線賠付為定值)
	BetCount       []int32                `protobuf:"varint,3,rep,name=BetCount" json:"BetCount,omitempty"`            // 一次下注的數量
	BigWinStep     []int32                `protobuf:"varint,4,rep,name=BigWinStep" json:"BigWinStep,omitempty"`        // BigWin各階段演出條件
	RowCounts      *int32                 `protobuf:"varint,5,opt,name=RowCounts" json:"RowCounts,omitempty"`          // 顯示結算的行數
	ReelSetting    []*Slot_ReelSetting    `protobuf:"bytes,6,rep,name=ReelSetting" json:"ReelSetting,omitempty"`       // 動態輪軸
	SymbolPayTable []*Slot_SymbolPayTable `protobuf:"bytes,7,rep,name=SymbolPayTable" json:"SymbolPayTable,omitempty"` // 符號倍率設定
	PayLines       []*Slot_PayLine        `protobuf:"bytes,8,rep,name=PayLines" json:"PayLines,omitempty"`             // 所有賠線
	MinCarryMoney  *int64                 `protobuf:"varint,9,req,name=MinCarryMoney" json:"MinCarryMoney,omitempty"`  // 最小攜帶金額
	PayLineDesc    *string                `protobuf:"bytes,10,opt,name=PayLineDesc" json:"PayLineDesc,omitempty"`      // 派彩線說明文字
}

func (x *ALD_MSG_Setting) Reset() {
	*x = ALD_MSG_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ALD_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ALD_MSG_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ALD_MSG_Setting) ProtoMessage() {}

func (x *ALD_MSG_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ALD_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ALD_MSG_Setting.ProtoReflect.Descriptor instead.
func (*ALD_MSG_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_ALD_proto_rawDescGZIP(), []int{0}
}

func (x *ALD_MSG_Setting) GetPayLineMode() int32 {
	if x != nil && x.PayLineMode != nil {
		return *x.PayLineMode
	}
	return 0
}

func (x *ALD_MSG_Setting) GetTotalPayLine() int32 {
	if x != nil && x.TotalPayLine != nil {
		return *x.TotalPayLine
	}
	return 0
}

func (x *ALD_MSG_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *ALD_MSG_Setting) GetBigWinStep() []int32 {
	if x != nil {
		return x.BigWinStep
	}
	return nil
}

func (x *ALD_MSG_Setting) GetRowCounts() int32 {
	if x != nil && x.RowCounts != nil {
		return *x.RowCounts
	}
	return 0
}

func (x *ALD_MSG_Setting) GetReelSetting() []*Slot_ReelSetting {
	if x != nil {
		return x.ReelSetting
	}
	return nil
}

func (x *ALD_MSG_Setting) GetSymbolPayTable() []*Slot_SymbolPayTable {
	if x != nil {
		return x.SymbolPayTable
	}
	return nil
}

func (x *ALD_MSG_Setting) GetPayLines() []*Slot_PayLine {
	if x != nil {
		return x.PayLines
	}
	return nil
}

func (x *ALD_MSG_Setting) GetMinCarryMoney() int64 {
	if x != nil && x.MinCarryMoney != nil {
		return *x.MinCarryMoney
	}
	return 0
}

func (x *ALD_MSG_Setting) GetPayLineDesc() string {
	if x != nil && x.PayLineDesc != nil {
		return *x.PayLineDesc
	}
	return ""
}

// [訊息] 遊戲結果 (轉出內容，中獎項目，中獎金額) Server to Client -> Slot_GameResultID = 20004
type ALD_MSG_GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetMoney   *int64            `protobuf:"varint,1,req,name=BetMoney" json:"BetMoney,omitempty"`     // 下注金額
	WinMoney   *int64            `protobuf:"varint,2,req,name=WinMoney" json:"WinMoney,omitempty"`     // 贏得獎金
	FinalMoney *int64            `protobuf:"varint,3,req,name=FinalMoney" json:"FinalMoney,omitempty"` // 最終身上金額
	SlotResult []*ALD_GameResult `protobuf:"bytes,4,rep,name=SlotResult" json:"SlotResult,omitempty"`  // 輪軸結果
}

func (x *ALD_MSG_GameResult) Reset() {
	*x = ALD_MSG_GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ALD_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ALD_MSG_GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ALD_MSG_GameResult) ProtoMessage() {}

func (x *ALD_MSG_GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ALD_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ALD_MSG_GameResult.ProtoReflect.Descriptor instead.
func (*ALD_MSG_GameResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_ALD_proto_rawDescGZIP(), []int{1}
}

func (x *ALD_MSG_GameResult) GetBetMoney() int64 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *ALD_MSG_GameResult) GetWinMoney() int64 {
	if x != nil && x.WinMoney != nil {
		return *x.WinMoney
	}
	return 0
}

func (x *ALD_MSG_GameResult) GetFinalMoney() int64 {
	if x != nil && x.FinalMoney != nil {
		return *x.FinalMoney
	}
	return 0
}

func (x *ALD_MSG_GameResult) GetSlotResult() []*ALD_GameResult {
	if x != nil {
		return x.SlotResult
	}
	return nil
}

// 阿拉丁遊戲結果 會附帶一組第一次轉完畫面，與拓展後畫面加結算，
type ALD_GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitResult  []*Slot_ReelResult   `protobuf:"bytes,1,rep,name=InitResult" json:"InitResult,omitempty"`   // 第一次轉完畫面
	IsRespin    *bool                `protobuf:"varint,2,req,name=IsRespin" json:"IsRespin,omitempty"`      // 是否為重轉
	IsExpand    *bool                `protobuf:"varint,3,req,name=IsExpand" json:"IsExpand,omitempty"`      // 是否表演拓展
	ExpandReel  []int32              `protobuf:"varint,4,rep,name=ExpandReel" json:"ExpandReel,omitempty"`  // 若有拓展，是第幾軸
	ExpandOrder *string              `protobuf:"bytes,5,opt,name=ExpandOrder" json:"ExpandOrder,omitempty"` // 若有拓展，順序為 ASC: 上到下，DESC: 下到上
	SlotResult  *Slot_MSG_GameResult `protobuf:"bytes,6,req,name=SlotResult" json:"SlotResult,omitempty"`   // 拓展後畫面與結算
}

func (x *ALD_GameResult) Reset() {
	*x = ALD_GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_ALD_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ALD_GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ALD_GameResult) ProtoMessage() {}

func (x *ALD_GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_ALD_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ALD_GameResult.ProtoReflect.Descriptor instead.
func (*ALD_GameResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_ALD_proto_rawDescGZIP(), []int{2}
}

func (x *ALD_GameResult) GetInitResult() []*Slot_ReelResult {
	if x != nil {
		return x.InitResult
	}
	return nil
}

func (x *ALD_GameResult) GetIsRespin() bool {
	if x != nil && x.IsRespin != nil {
		return *x.IsRespin
	}
	return false
}

func (x *ALD_GameResult) GetIsExpand() bool {
	if x != nil && x.IsExpand != nil {
		return *x.IsExpand
	}
	return false
}

func (x *ALD_GameResult) GetExpandReel() []int32 {
	if x != nil {
		return x.ExpandReel
	}
	return nil
}

func (x *ALD_GameResult) GetExpandOrder() string {
	if x != nil && x.ExpandOrder != nil {
		return *x.ExpandOrder
	}
	return ""
}

func (x *ALD_GameResult) GetSlotResult() *Slot_MSG_GameResult {
	if x != nil {
		return x.SlotResult
	}
	return nil
}

var File_GameMsg_ALD_proto protoreflect.FileDescriptor

var file_GameMsg_ALD_proto_rawDesc = []byte{
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x41, 0x4c, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb2, 0x03, 0x0a, 0x0f, 0x41, 0x4c, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x4c,
	0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x42,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x67, 0x57, 0x69,
	0x6e, 0x53, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x69, 0x67,
	0x57, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x52, 0x65, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x52, 0x65, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x50, 0x61, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x50, 0x61, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x50, 0x61,
	0x79, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x50, 0x61, 0x79,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x72, 0x79, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x4c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x41, 0x4c, 0x44, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x08, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x4c, 0x44, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x84, 0x02, 0x0a, 0x0e, 0x41, 0x4c, 0x44, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_ALD_proto_rawDescOnce sync.Once
	file_GameMsg_ALD_proto_rawDescData = file_GameMsg_ALD_proto_rawDesc
)

func file_GameMsg_ALD_proto_rawDescGZIP() []byte {
	file_GameMsg_ALD_proto_rawDescOnce.Do(func() {
		file_GameMsg_ALD_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_ALD_proto_rawDescData)
	})
	return file_GameMsg_ALD_proto_rawDescData
}

var file_GameMsg_ALD_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_GameMsg_ALD_proto_goTypes = []interface{}{
	(*ALD_MSG_Setting)(nil),     // 0: netproto.ALD_MSG_Setting
	(*ALD_MSG_GameResult)(nil),  // 1: netproto.ALD_MSG_GameResult
	(*ALD_GameResult)(nil),      // 2: netproto.ALD_GameResult
	(*Slot_ReelSetting)(nil),    // 3: netproto.Slot_ReelSetting
	(*Slot_SymbolPayTable)(nil), // 4: netproto.Slot_SymbolPayTable
	(*Slot_PayLine)(nil),        // 5: netproto.Slot_PayLine
	(*Slot_ReelResult)(nil),     // 6: netproto.Slot_ReelResult
	(*Slot_MSG_GameResult)(nil), // 7: netproto.Slot_MSG_GameResult
}
var file_GameMsg_ALD_proto_depIdxs = []int32{
	3, // 0: netproto.ALD_MSG_Setting.ReelSetting:type_name -> netproto.Slot_ReelSetting
	4, // 1: netproto.ALD_MSG_Setting.SymbolPayTable:type_name -> netproto.Slot_SymbolPayTable
	5, // 2: netproto.ALD_MSG_Setting.PayLines:type_name -> netproto.Slot_PayLine
	2, // 3: netproto.ALD_MSG_GameResult.SlotResult:type_name -> netproto.ALD_GameResult
	6, // 4: netproto.ALD_GameResult.InitResult:type_name -> netproto.Slot_ReelResult
	7, // 5: netproto.ALD_GameResult.SlotResult:type_name -> netproto.Slot_MSG_GameResult
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_GameMsg_ALD_proto_init() }
func file_GameMsg_ALD_proto_init() {
	if File_GameMsg_ALD_proto != nil {
		return
	}
	file_GameMsg_Slot_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_ALD_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ALD_MSG_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ALD_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ALD_MSG_GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_ALD_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ALD_GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_ALD_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_ALD_proto_goTypes,
		DependencyIndexes: file_GameMsg_ALD_proto_depIdxs,
		MessageInfos:      file_GameMsg_ALD_proto_msgTypes,
	}.Build()
	File_GameMsg_ALD_proto = out.File
	file_GameMsg_ALD_proto_rawDesc = nil
	file_GameMsg_ALD_proto_goTypes = nil
	file_GameMsg_ALD_proto_depIdxs = nil
}
