// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_HHNN.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//下注设置
type HHNN_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCount    []int32 `protobuf:"varint,1,rep,name=BetCount" json:"BetCount,omitempty"`       //一次下注的数量
	BetMoney    *int32  `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`       //一次下注的钱
	ZhuangLimit *int64  `protobuf:"varint,3,req,name=ZhuangLimit" json:"ZhuangLimit,omitempty"` //上庄钱限制
}

func (x *HHNN_Setting) Reset() {
	*x = HHNN_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_Setting) ProtoMessage() {}

func (x *HHNN_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_Setting.ProtoReflect.Descriptor instead.
func (*HHNN_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{0}
}

func (x *HHNN_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *HHNN_Setting) GetBetMoney() int32 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *HHNN_Setting) GetZhuangLimit() int64 {
	if x != nil && x.ZhuangLimit != nil {
		return *x.ZhuangLimit
	}
	return 0
}

//状态消息
type HHNN_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"` //状态
	Time  *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`   //此状态的剩余时间
}

func (x *HHNN_Sate) Reset() {
	*x = HHNN_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_Sate) ProtoMessage() {}

func (x *HHNN_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_Sate.ProtoReflect.Descriptor instead.
func (*HHNN_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{1}
}

func (x *HHNN_Sate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *HHNN_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户断线重连下注消息
type HHNN_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMoney *int64               `protobuf:"varint,1,req,name=UserMoney" json:"UserMoney,omitempty"`
	BetInfo   []*HHNN_BroadCastBet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *HHNN_UserBetInfo) Reset() {
	*x = HHNN_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_UserBetInfo) ProtoMessage() {}

func (x *HHNN_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_UserBetInfo.ProtoReflect.Descriptor instead.
func (*HHNN_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{2}
}

func (x *HHNN_UserBetInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *HHNN_UserBetInfo) GetBetInfo() []*HHNN_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//广播用户下注的数组
type HHNN_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32               `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*HHNN_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *HHNN_BroadCastBetArr) Reset() {
	*x = HHNN_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_BroadCastBetArr) ProtoMessage() {}

func (x *HHNN_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*HHNN_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{3}
}

func (x *HHNN_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHNN_BroadCastBetArr) GetBroadCastBetArr() []*HHNN_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//广播用户下注内容数据结构
type HHNN_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Money     *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
	LuckyStar *bool  `protobuf:"varint,3,req,name=LuckyStar" json:"LuckyStar,omitempty"`
}

func (x *HHNN_BroadCastBet) Reset() {
	*x = HHNN_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_BroadCastBet) ProtoMessage() {}

func (x *HHNN_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_BroadCastBet.ProtoReflect.Descriptor instead.
func (*HHNN_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{4}
}

func (x *HHNN_BroadCastBet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *HHNN_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *HHNN_BroadCastBet) GetLuckyStar() bool {
	if x != nil && x.LuckyStar != nil {
		return *x.LuckyStar
	}
	return false
}

//用户下注数组
type HHNN_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*HHNN_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *HHNN_BetArr) Reset() {
	*x = HHNN_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_BetArr) ProtoMessage() {}

func (x *HHNN_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_BetArr.ProtoReflect.Descriptor instead.
func (*HHNN_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{5}
}

func (x *HHNN_BetArr) GetBetArr() []*HHNN_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type HHNN_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *int32 `protobuf:"varint,1,req,name=BetType" json:"BetType,omitempty"`
	Count   *int32 `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
}

func (x *HHNN_Bet) Reset() {
	*x = HHNN_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_Bet) ProtoMessage() {}

func (x *HHNN_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_Bet.ProtoReflect.Descriptor instead.
func (*HHNN_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{6}
}

func (x *HHNN_Bet) GetBetType() int32 {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return 0
}

func (x *HHNN_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//下注的结果
type HHNN_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32      `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`      //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4此类下注已达到上限，-5不可同时下注龙与虎，-6用户金额小於下注限制
	Money  *int64      `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`  //用户的钱，下注以后的金额。
	Type   *int32      `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`    //下注超过限制的下注类型
	BetArr []*HHNN_Bet `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"` //用户下注数据
}

func (x *HHNN_BetRet) Reset() {
	*x = HHNN_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_BetRet) ProtoMessage() {}

func (x *HHNN_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_BetRet.ProtoReflect.Descriptor instead.
func (*HHNN_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{7}
}

func (x *HHNN_BetRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *HHNN_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *HHNN_BetRet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *HHNN_BetRet) GetBetArr() []*HHNN_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//游戏用户赢钱结果
type HHNN_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin    *int64               `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`
	SelfWin      *int64               `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	WinUserInfo  []*HHNN_WinUerInfo   `protobuf:"bytes,3,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"`   //赢钱前三名的人信息
	StageUerInfo []*HHNN_StageUerInfo `protobuf:"bytes,4,rep,name=StageUerInfo" json:"StageUerInfo,omitempty"` //標誌玩家赢钱信息
}

func (x *HHNN_GameResultUserMoney) Reset() {
	*x = HHNN_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_GameResultUserMoney) ProtoMessage() {}

func (x *HHNN_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*HHNN_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{8}
}

func (x *HHNN_GameResultUserMoney) GetZhuangWin() int64 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *HHNN_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *HHNN_GameResultUserMoney) GetWinUserInfo() []*HHNN_WinUerInfo {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

func (x *HHNN_GameResultUserMoney) GetStageUerInfo() []*HHNN_StageUerInfo {
	if x != nil {
		return x.StageUerInfo
	}
	return nil
}

//赢钱玩家信息
type HHNN_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *HHNN_WinUerInfo) Reset() {
	*x = HHNN_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_WinUerInfo) ProtoMessage() {}

func (x *HHNN_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_WinUerInfo.ProtoReflect.Descriptor instead.
func (*HHNN_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{9}
}

func (x *HHNN_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *HHNN_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//標誌玩家赢钱信息
type HHNN_StageUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Win    *int64 `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *HHNN_StageUerInfo) Reset() {
	*x = HHNN_StageUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_StageUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_StageUerInfo) ProtoMessage() {}

func (x *HHNN_StageUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_StageUerInfo.ProtoReflect.Descriptor instead.
func (*HHNN_StageUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{10}
}

func (x *HHNN_StageUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHNN_StageUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

type HHNN_Cards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards   []*HHNN_Poker `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"`
	RoundID *int32        `protobuf:"varint,2,req,name=RoundID" json:"RoundID,omitempty"` //局數
}

func (x *HHNN_Cards) Reset() {
	*x = HHNN_Cards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_Cards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_Cards) ProtoMessage() {}

func (x *HHNN_Cards) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_Cards.ProtoReflect.Descriptor instead.
func (*HHNN_Cards) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{11}
}

func (x *HHNN_Cards) GetCards() []*HHNN_Poker {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *HHNN_Cards) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

//上庄结果
type HHNN_ShangzhuangRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"` //值为1时下庄成功，值为0表示上庄成功，值为-1时上庄失败资金不足，值为-2时已经在上庄列表中。
}

func (x *HHNN_ShangzhuangRet) Reset() {
	*x = HHNN_ShangzhuangRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_ShangzhuangRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_ShangzhuangRet) ProtoMessage() {}

func (x *HHNN_ShangzhuangRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_ShangzhuangRet.ProtoReflect.Descriptor instead.
func (*HHNN_ShangzhuangRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{12}
}

func (x *HHNN_ShangzhuangRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//是否上庄
type HHNN_ShangZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShangZhuang *bool `protobuf:"varint,1,req,name=IsShangZhuang" json:"IsShangZhuang,omitempty"`
}

func (x *HHNN_ShangZhuang) Reset() {
	*x = HHNN_ShangZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_ShangZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_ShangZhuang) ProtoMessage() {}

func (x *HHNN_ShangZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_ShangZhuang.ProtoReflect.Descriptor instead.
func (*HHNN_ShangZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{13}
}

func (x *HHNN_ShangZhuang) GetIsShangZhuang() bool {
	if x != nil && x.IsShangZhuang != nil {
		return *x.IsShangZhuang
	}
	return false
}

//庄家信息
type HHNN_ZhuangInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32      `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	LastTurn *int32      `protobuf:"varint,2,req,name=LastTurn" json:"LastTurn,omitempty"`
	UserInfo []*GameUser `protobuf:"bytes,3,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *HHNN_ZhuangInfo) Reset() {
	*x = HHNN_ZhuangInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_ZhuangInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_ZhuangInfo) ProtoMessage() {}

func (x *HHNN_ZhuangInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_ZhuangInfo.ProtoReflect.Descriptor instead.
func (*HHNN_ZhuangInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{14}
}

func (x *HHNN_ZhuangInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHNN_ZhuangInfo) GetLastTurn() int32 {
	if x != nil && x.LastTurn != nil {
		return *x.LastTurn
	}
	return 0
}

func (x *HHNN_ZhuangInfo) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//上庄列表
type HHNN_ZhuangList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*GameUser `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *HHNN_ZhuangList) Reset() {
	*x = HHNN_ZhuangList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_ZhuangList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_ZhuangList) ProtoMessage() {}

func (x *HHNN_ZhuangList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_ZhuangList.ProtoReflect.Descriptor instead.
func (*HHNN_ZhuangList) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{15}
}

func (x *HHNN_ZhuangList) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//清除结果回应消息
type HHNN_BetClearRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` //当前的钱
	Ret   *int32 `protobuf:"varint,2,req,name=Ret" json:"Ret,omitempty"`     //清除结果-1，清理失败，达到清理上限，0清理成功
}

func (x *HHNN_BetClearRet) Reset() {
	*x = HHNN_BetClearRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_BetClearRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_BetClearRet) ProtoMessage() {}

func (x *HHNN_BetClearRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_BetClearRet.ProtoReflect.Descriptor instead.
func (*HHNN_BetClearRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{16}
}

func (x *HHNN_BetClearRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *HHNN_BetClearRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//大富豪列表消息
type HHNN_RichestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichestList []*HHNN_Richest `protobuf:"bytes,1,rep,name=RichestList" json:"RichestList,omitempty"` //富豪的排行榜
}

func (x *HHNN_RichestList) Reset() {
	*x = HHNN_RichestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_RichestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_RichestList) ProtoMessage() {}

func (x *HHNN_RichestList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_RichestList.ProtoReflect.Descriptor instead.
func (*HHNN_RichestList) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{17}
}

func (x *HHNN_RichestList) GetRichestList() []*HHNN_Richest {
	if x != nil {
		return x.RichestList
	}
	return nil
}

//大富豪的玩家資訊
type HHNN_Richest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking       *int32 `protobuf:"varint,1,req,name=Ranking" json:"Ranking,omitempty"`             //富豪排名
	UserID        *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`               //富豪ID
	UserFaceID    *int32 `protobuf:"varint,3,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //富豪頭像ID
	Money         *int64 `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`                 //富豪当前身上的钱
	AvatarFrameID *int32 `protobuf:"varint,5,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
}

func (x *HHNN_Richest) Reset() {
	*x = HHNN_Richest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_Richest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_Richest) ProtoMessage() {}

func (x *HHNN_Richest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_Richest.ProtoReflect.Descriptor instead.
func (*HHNN_Richest) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{18}
}

func (x *HHNN_Richest) GetRanking() int32 {
	if x != nil && x.Ranking != nil {
		return *x.Ranking
	}
	return 0
}

func (x *HHNN_Richest) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHNN_Richest) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *HHNN_Richest) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *HHNN_Richest) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

//幸運星玩家消息
type HHNN_LuckyStarList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuckyStarList []*HHNN_LuckyStar `protobuf:"bytes,1,rep,name=LuckyStarList" json:"LuckyStarList,omitempty"` //幸運星玩家資訊
}

func (x *HHNN_LuckyStarList) Reset() {
	*x = HHNN_LuckyStarList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_LuckyStarList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_LuckyStarList) ProtoMessage() {}

func (x *HHNN_LuckyStarList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_LuckyStarList.ProtoReflect.Descriptor instead.
func (*HHNN_LuckyStarList) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{19}
}

func (x *HHNN_LuckyStarList) GetLuckyStarList() []*HHNN_LuckyStar {
	if x != nil {
		return x.LuckyStarList
	}
	return nil
}

//幸運星玩家資訊
type HHNN_LuckyStar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`               //幸運星ID
	UserFaceID    *int32 `protobuf:"varint,2,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //幸運星頭像ID
	AvatarFrameID *int32 `protobuf:"varint,3,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
}

func (x *HHNN_LuckyStar) Reset() {
	*x = HHNN_LuckyStar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_LuckyStar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_LuckyStar) ProtoMessage() {}

func (x *HHNN_LuckyStar) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_LuckyStar.ProtoReflect.Descriptor instead.
func (*HHNN_LuckyStar) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{20}
}

func (x *HHNN_LuckyStar) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHNN_LuckyStar) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *HHNN_LuckyStar) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

//本局局數
type HHNN_RoundID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HungWin *int32 `protobuf:"varint,1,req,name=HungWin" json:"HungWin,omitempty"` //紅贏局數
	HeiWin  *int32 `protobuf:"varint,2,req,name=HeiWin" json:"HeiWin,omitempty"`   //黑贏局數
	RoundID *int32 `protobuf:"varint,3,req,name=RoundID" json:"RoundID,omitempty"` //局數
}

func (x *HHNN_RoundID) Reset() {
	*x = HHNN_RoundID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_RoundID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_RoundID) ProtoMessage() {}

func (x *HHNN_RoundID) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_RoundID.ProtoReflect.Descriptor instead.
func (*HHNN_RoundID) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{21}
}

func (x *HHNN_RoundID) GetHungWin() int32 {
	if x != nil && x.HungWin != nil {
		return *x.HungWin
	}
	return 0
}

func (x *HHNN_RoundID) GetHeiWin() int32 {
	if x != nil && x.HeiWin != nil {
		return *x.HeiWin
	}
	return 0
}

func (x *HHNN_RoundID) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

//廣播發牌第一手三張牌
type HHNN_BrodcastPokerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPokerCard []*HHNN_BrodcastUserPokerCard `protobuf:"bytes,1,rep,name=UserPokerCard" json:"UserPokerCard,omitempty"`
}

func (x *HHNN_BrodcastPokerCard) Reset() {
	*x = HHNN_BrodcastPokerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_BrodcastPokerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_BrodcastPokerCard) ProtoMessage() {}

func (x *HHNN_BrodcastPokerCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_BrodcastPokerCard.ProtoReflect.Descriptor instead.
func (*HHNN_BrodcastPokerCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{22}
}

func (x *HHNN_BrodcastPokerCard) GetUserPokerCard() []*HHNN_BrodcastUserPokerCard {
	if x != nil {
		return x.UserPokerCard
	}
	return nil
}

//每個座位上的亮牌
type HHNN_BrodcastUserPokerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitNo     *int32       `protobuf:"varint,1,req,name=SitNo" json:"SitNo,omitempty"`
	CardGroup []*PokerCard `protobuf:"bytes,2,rep,name=CardGroup" json:"CardGroup,omitempty"`
}

func (x *HHNN_BrodcastUserPokerCard) Reset() {
	*x = HHNN_BrodcastUserPokerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_BrodcastUserPokerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_BrodcastUserPokerCard) ProtoMessage() {}

func (x *HHNN_BrodcastUserPokerCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_BrodcastUserPokerCard.ProtoReflect.Descriptor instead.
func (*HHNN_BrodcastUserPokerCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{23}
}

func (x *HHNN_BrodcastUserPokerCard) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

func (x *HHNN_BrodcastUserPokerCard) GetCardGroup() []*PokerCard {
	if x != nil {
		return x.CardGroup
	}
	return nil
}

//前20次开出的牌
type HHNN_ResultCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList []*HHNN_GameResultPoker `protobuf:"bytes,1,rep,name=CardList" json:"CardList,omitempty"`
}

func (x *HHNN_ResultCardList) Reset() {
	*x = HHNN_ResultCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_ResultCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_ResultCardList) ProtoMessage() {}

func (x *HHNN_ResultCardList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_ResultCardList.ProtoReflect.Descriptor instead.
func (*HHNN_ResultCardList) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{24}
}

func (x *HHNN_ResultCardList) GetCardList() []*HHNN_GameResultPoker {
	if x != nil {
		return x.CardList
	}
	return nil
}

//游戏扑克结果
type HHNN_GameResultPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HungPoker *HHNN_Poker `protobuf:"bytes,1,req,name=HungPoker" json:"HungPoker,omitempty"` //紅區扑克牌
	HeiPoker  *HHNN_Poker `protobuf:"bytes,2,req,name=HeiPoker" json:"HeiPoker,omitempty"`   //黑區扑克牌
	Win       *int32      `protobuf:"varint,5,req,name=Win" json:"Win,omitempty"`            //贏家，1:紅，2:黑
	RoundID   *int32      `protobuf:"varint,6,req,name=RoundID" json:"RoundID,omitempty"`    //局數
}

func (x *HHNN_GameResultPoker) Reset() {
	*x = HHNN_GameResultPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_GameResultPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_GameResultPoker) ProtoMessage() {}

func (x *HHNN_GameResultPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_GameResultPoker.ProtoReflect.Descriptor instead.
func (*HHNN_GameResultPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{25}
}

func (x *HHNN_GameResultPoker) GetHungPoker() *HHNN_Poker {
	if x != nil {
		return x.HungPoker
	}
	return nil
}

func (x *HHNN_GameResultPoker) GetHeiPoker() *HHNN_Poker {
	if x != nil {
		return x.HeiPoker
	}
	return nil
}

func (x *HHNN_GameResultPoker) GetWin() int32 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

func (x *HHNN_GameResultPoker) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

//一局的
type HHNN_Poker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NiuNiuRet    *int32       `protobuf:"varint,2,req,name=NiuNiuRet" json:"NiuNiuRet,omitempty"`       //牛牛類型: 0 五小牛; 1四炸; 2 五花牛; 3 牛牛; 4 有牛; 5 無牛;
	NiuNiuNumber *int32       `protobuf:"varint,3,req,name=NiuNiuNumber" json:"NiuNiuNumber,omitempty"` //牛幾
	Cards        []*PokerCard `protobuf:"bytes,4,rep,name=Cards" json:"Cards,omitempty"`                //牌
}

func (x *HHNN_Poker) Reset() {
	*x = HHNN_Poker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHNN_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHNN_Poker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHNN_Poker) ProtoMessage() {}

func (x *HHNN_Poker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHNN_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHNN_Poker.ProtoReflect.Descriptor instead.
func (*HHNN_Poker) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHNN_proto_rawDescGZIP(), []int{26}
}

func (x *HHNN_Poker) GetNiuNiuRet() int32 {
	if x != nil && x.NiuNiuRet != nil {
		return *x.NiuNiuRet
	}
	return 0
}

func (x *HHNN_Poker) GetNiuNiuNumber() int32 {
	if x != nil && x.NiuNiuNumber != nil {
		return *x.NiuNiuNumber
	}
	return 0
}

func (x *HHNN_Poker) GetCards() []*PokerCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

var File_GameMsg_HHNN_proto protoreflect.FileDescriptor

var file_GameMsg_HHNN_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x48, 0x48, 0x4e, 0x4e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a,
	0x0c, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x5a, 0x68, 0x75, 0x61,
	0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x35, 0x0a, 0x09, 0x48, 0x48, 0x4e, 0x4e, 0x5f,
	0x53, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67,
	0x0a, 0x10, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e,
	0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x07,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x14, 0x48, 0x48, 0x4e, 0x4e, 0x5f,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e, 0x4e,
	0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x5b,
	0x0a, 0x11, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74,
	0x42, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x22, 0x39, 0x0a, 0x0b, 0x48,
	0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06,
	0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x3a, 0x0a, 0x08, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x75, 0x0a, 0x0b, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x65,
	0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x48, 0x48,
	0x4e, 0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x48, 0x4e, 0x4e, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e,
	0x4e, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x0f,
	0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x57,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x3d, 0x0a,
	0x11, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x52, 0x0a, 0x0a,
	0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x22, 0x27, 0x0a, 0x13, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0x68,
	0x75, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x48, 0x48, 0x4e,
	0x4e, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x22, 0x75, 0x0a, 0x0f, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x5a, 0x68, 0x75, 0x61,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x48, 0x48,
	0x4e, 0x4e, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a,
	0x10, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x4c, 0x0a, 0x10, 0x48, 0x48, 0x4e,
	0x4e, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48,
	0x4e, 0x4e, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x52, 0x69, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x48, 0x48, 0x4e, 0x4e,
	0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x12, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x4c,
	0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x48, 0x4e, 0x4e, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x52, 0x0d, 0x4c,
	0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0e,
	0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x0c,
	0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x48, 0x75, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x48,
	0x75, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x57, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x57, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x16, 0x48, 0x48, 0x4e, 0x4e,
	0x5f, 0x42, 0x72, 0x6f, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x22, 0x65,
	0x0a, 0x1a, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x42, 0x72, 0x6f, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x69, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74,
	0x4e, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x51, 0x0a, 0x13, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x08,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x48, 0x48, 0x4e,
	0x4e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x09, 0x48, 0x75, 0x6e, 0x67, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x09, 0x48, 0x75, 0x6e, 0x67,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x48, 0x65, 0x69, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x48,
	0x65, 0x69, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x0a, 0x48, 0x48, 0x4e, 0x4e, 0x5f, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x52, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x52, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_HHNN_proto_rawDescOnce sync.Once
	file_GameMsg_HHNN_proto_rawDescData = file_GameMsg_HHNN_proto_rawDesc
)

func file_GameMsg_HHNN_proto_rawDescGZIP() []byte {
	file_GameMsg_HHNN_proto_rawDescOnce.Do(func() {
		file_GameMsg_HHNN_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_HHNN_proto_rawDescData)
	})
	return file_GameMsg_HHNN_proto_rawDescData
}

var file_GameMsg_HHNN_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_GameMsg_HHNN_proto_goTypes = []interface{}{
	(*HHNN_Setting)(nil),               // 0: netproto.HHNN_Setting
	(*HHNN_Sate)(nil),                  // 1: netproto.HHNN_Sate
	(*HHNN_UserBetInfo)(nil),           // 2: netproto.HHNN_UserBetInfo
	(*HHNN_BroadCastBetArr)(nil),       // 3: netproto.HHNN_BroadCastBetArr
	(*HHNN_BroadCastBet)(nil),          // 4: netproto.HHNN_BroadCastBet
	(*HHNN_BetArr)(nil),                // 5: netproto.HHNN_BetArr
	(*HHNN_Bet)(nil),                   // 6: netproto.HHNN_Bet
	(*HHNN_BetRet)(nil),                // 7: netproto.HHNN_BetRet
	(*HHNN_GameResultUserMoney)(nil),   // 8: netproto.HHNN_GameResultUserMoney
	(*HHNN_WinUerInfo)(nil),            // 9: netproto.HHNN_WinUerInfo
	(*HHNN_StageUerInfo)(nil),          // 10: netproto.HHNN_StageUerInfo
	(*HHNN_Cards)(nil),                 // 11: netproto.HHNN_Cards
	(*HHNN_ShangzhuangRet)(nil),        // 12: netproto.HHNN_ShangzhuangRet
	(*HHNN_ShangZhuang)(nil),           // 13: netproto.HHNN_ShangZhuang
	(*HHNN_ZhuangInfo)(nil),            // 14: netproto.HHNN_ZhuangInfo
	(*HHNN_ZhuangList)(nil),            // 15: netproto.HHNN_ZhuangList
	(*HHNN_BetClearRet)(nil),           // 16: netproto.HHNN_BetClearRet
	(*HHNN_RichestList)(nil),           // 17: netproto.HHNN_RichestList
	(*HHNN_Richest)(nil),               // 18: netproto.HHNN_Richest
	(*HHNN_LuckyStarList)(nil),         // 19: netproto.HHNN_LuckyStarList
	(*HHNN_LuckyStar)(nil),             // 20: netproto.HHNN_LuckyStar
	(*HHNN_RoundID)(nil),               // 21: netproto.HHNN_RoundID
	(*HHNN_BrodcastPokerCard)(nil),     // 22: netproto.HHNN_BrodcastPokerCard
	(*HHNN_BrodcastUserPokerCard)(nil), // 23: netproto.HHNN_BrodcastUserPokerCard
	(*HHNN_ResultCardList)(nil),        // 24: netproto.HHNN_ResultCardList
	(*HHNN_GameResultPoker)(nil),       // 25: netproto.HHNN_GameResultPoker
	(*HHNN_Poker)(nil),                 // 26: netproto.HHNN_Poker
	(*GameUser)(nil),                   // 27: netproto.GameUser
	(*PokerCard)(nil),                  // 28: netproto.PokerCard
}
var file_GameMsg_HHNN_proto_depIdxs = []int32{
	4,  // 0: netproto.HHNN_UserBetInfo.BetInfo:type_name -> netproto.HHNN_BroadCastBet
	4,  // 1: netproto.HHNN_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.HHNN_BroadCastBet
	6,  // 2: netproto.HHNN_BetArr.BetArr:type_name -> netproto.HHNN_Bet
	6,  // 3: netproto.HHNN_BetRet.BetArr:type_name -> netproto.HHNN_Bet
	9,  // 4: netproto.HHNN_GameResultUserMoney.WinUserInfo:type_name -> netproto.HHNN_WinUerInfo
	10, // 5: netproto.HHNN_GameResultUserMoney.StageUerInfo:type_name -> netproto.HHNN_StageUerInfo
	26, // 6: netproto.HHNN_Cards.Cards:type_name -> netproto.HHNN_Poker
	27, // 7: netproto.HHNN_ZhuangInfo.UserInfo:type_name -> netproto.GameUser
	27, // 8: netproto.HHNN_ZhuangList.UserInfo:type_name -> netproto.GameUser
	18, // 9: netproto.HHNN_RichestList.RichestList:type_name -> netproto.HHNN_Richest
	20, // 10: netproto.HHNN_LuckyStarList.LuckyStarList:type_name -> netproto.HHNN_LuckyStar
	23, // 11: netproto.HHNN_BrodcastPokerCard.UserPokerCard:type_name -> netproto.HHNN_BrodcastUserPokerCard
	28, // 12: netproto.HHNN_BrodcastUserPokerCard.CardGroup:type_name -> netproto.PokerCard
	25, // 13: netproto.HHNN_ResultCardList.CardList:type_name -> netproto.HHNN_GameResultPoker
	26, // 14: netproto.HHNN_GameResultPoker.HungPoker:type_name -> netproto.HHNN_Poker
	26, // 15: netproto.HHNN_GameResultPoker.HeiPoker:type_name -> netproto.HHNN_Poker
	28, // 16: netproto.HHNN_Poker.Cards:type_name -> netproto.PokerCard
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_GameMsg_HHNN_proto_init() }
func file_GameMsg_HHNN_proto_init() {
	if File_GameMsg_HHNN_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_HHNN_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_StageUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_Cards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_ShangzhuangRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_ShangZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_ZhuangInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_ZhuangList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_BetClearRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_RichestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_Richest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_LuckyStarList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_LuckyStar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_RoundID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_BrodcastPokerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_BrodcastUserPokerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_ResultCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_GameResultPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHNN_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHNN_Poker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_HHNN_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_HHNN_proto_goTypes,
		DependencyIndexes: file_GameMsg_HHNN_proto_depIdxs,
		MessageInfos:      file_GameMsg_HHNN_proto_msgTypes,
	}.Build()
	File_GameMsg_HHNN_proto = out.File
	file_GameMsg_HHNN_proto_rawDesc = nil
	file_GameMsg_HHNN_proto_goTypes = nil
	file_GameMsg_HHNN_proto_depIdxs = nil
}
