// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_HHDZ.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HHDZ_BetZone int32

const (
	HHDZ_BetZone_Red     HHDZ_BetZone = 1 //紅
	HHDZ_BetZone_Black   HHDZ_BetZone = 2 //黑
	HHDZ_BetZone_Special HHDZ_BetZone = 3 //特殊牌
)

// Enum value maps for HHDZ_BetZone.
var (
	HHDZ_BetZone_name = map[int32]string{
		1: "Red",
		2: "Black",
		3: "Special",
	}
	HHDZ_BetZone_value = map[string]int32{
		"Red":     1,
		"Black":   2,
		"Special": 3,
	}
)

func (x HHDZ_BetZone) Enum() *HHDZ_BetZone {
	p := new(HHDZ_BetZone)
	*p = x
	return p
}

func (x HHDZ_BetZone) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HHDZ_BetZone) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_HHDZ_proto_enumTypes[0].Descriptor()
}

func (HHDZ_BetZone) Type() protoreflect.EnumType {
	return &file_GameMsg_HHDZ_proto_enumTypes[0]
}

func (x HHDZ_BetZone) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HHDZ_BetZone) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HHDZ_BetZone(num)
	return nil
}

// Deprecated: Use HHDZ_BetZone.Descriptor instead.
func (HHDZ_BetZone) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{0}
}

type HHDZ_BetType int32

const (
	HHDZ_BetType_RedPrize   HHDZ_BetType = 1 //紅
	HHDZ_BetType_BlackPrize HHDZ_BetType = 2 //黑
	HHDZ_BetType_BAOZI      HHDZ_BetType = 3 //豹子
	HHDZ_BetType_SHUNJIN    HHDZ_BetType = 4 //順金
	HHDZ_BetType_JINHUA     HHDZ_BetType = 5 //金花
	HHDZ_BetType_SHUNZI     HHDZ_BetType = 6 //順子
	HHDZ_BetType_BIGDUIZI   HHDZ_BetType = 7 //對子(9-A)
	HHDZ_BetType_SMALLDUIZI HHDZ_BetType = 8 //對子(2-8)
	HHDZ_BetType_DANPAI     HHDZ_BetType = 9 //單張
)

// Enum value maps for HHDZ_BetType.
var (
	HHDZ_BetType_name = map[int32]string{
		1: "RedPrize",
		2: "BlackPrize",
		3: "BAOZI",
		4: "SHUNJIN",
		5: "JINHUA",
		6: "SHUNZI",
		7: "BIGDUIZI",
		8: "SMALLDUIZI",
		9: "DANPAI",
	}
	HHDZ_BetType_value = map[string]int32{
		"RedPrize":   1,
		"BlackPrize": 2,
		"BAOZI":      3,
		"SHUNJIN":    4,
		"JINHUA":     5,
		"SHUNZI":     6,
		"BIGDUIZI":   7,
		"SMALLDUIZI": 8,
		"DANPAI":     9,
	}
)

func (x HHDZ_BetType) Enum() *HHDZ_BetType {
	p := new(HHDZ_BetType)
	*p = x
	return p
}

func (x HHDZ_BetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HHDZ_BetType) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_HHDZ_proto_enumTypes[1].Descriptor()
}

func (HHDZ_BetType) Type() protoreflect.EnumType {
	return &file_GameMsg_HHDZ_proto_enumTypes[1]
}

func (x HHDZ_BetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HHDZ_BetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HHDZ_BetType(num)
	return nil
}

// Deprecated: Use HHDZ_BetType.Descriptor instead.
func (HHDZ_BetType) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{1}
}

type HHDZ_State int32

const (
	HHDZ_State_Ready          HHDZ_State = 1 //准备中
	HHDZ_State_Bet            HHDZ_State = 2 //下注状态
	HHDZ_State_KaiJiang       HHDZ_State = 3 //开牌中
	HHDZ_State_KaiJiangAction HHDZ_State = 4 //派奖中.
	HHDZ_State_EndAction      HHDZ_State = 5 //结算动画,休息中
	HHDZ_State_Wait           HHDZ_State = 6 //等待游戏开始,
)

// Enum value maps for HHDZ_State.
var (
	HHDZ_State_name = map[int32]string{
		1: "Ready",
		2: "Bet",
		3: "KaiJiang",
		4: "KaiJiangAction",
		5: "EndAction",
		6: "Wait",
	}
	HHDZ_State_value = map[string]int32{
		"Ready":          1,
		"Bet":            2,
		"KaiJiang":       3,
		"KaiJiangAction": 4,
		"EndAction":      5,
		"Wait":           6,
	}
)

func (x HHDZ_State) Enum() *HHDZ_State {
	p := new(HHDZ_State)
	*p = x
	return p
}

func (x HHDZ_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HHDZ_State) Descriptor() protoreflect.EnumDescriptor {
	return file_GameMsg_HHDZ_proto_enumTypes[2].Descriptor()
}

func (HHDZ_State) Type() protoreflect.EnumType {
	return &file_GameMsg_HHDZ_proto_enumTypes[2]
}

func (x HHDZ_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HHDZ_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HHDZ_State(num)
	return nil
}

// Deprecated: Use HHDZ_State.Descriptor instead.
func (HHDZ_State) EnumDescriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{2}
}

//下注设置
type HHDZ_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCount []int32            `protobuf:"varint,1,rep,name=BetCount" json:"BetCount,omitempty"` //一次下注的数量
	BetMoney *int32             `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"` //一次下注的钱
	BetRange *HHDZ_BetRangeList `protobuf:"bytes,3,req,name=BetRange" json:"BetRange,omitempty"`  //個人下注上下限紅
}

func (x *HHDZ_Setting) Reset() {
	*x = HHDZ_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_Setting) ProtoMessage() {}

func (x *HHDZ_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_Setting.ProtoReflect.Descriptor instead.
func (*HHDZ_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{0}
}

func (x *HHDZ_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *HHDZ_Setting) GetBetMoney() int32 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *HHDZ_Setting) GetBetRange() *HHDZ_BetRangeList {
	if x != nil {
		return x.BetRange
	}
	return nil
}

//状态消息
type HHDZ_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *HHDZ_State `protobuf:"varint,1,req,name=State,enum=netproto.HHDZ_State" json:"State,omitempty"` //状态
	Time  *int32      `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`                            //此状态的剩余时间
}

func (x *HHDZ_Sate) Reset() {
	*x = HHDZ_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_Sate) ProtoMessage() {}

func (x *HHDZ_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_Sate.ProtoReflect.Descriptor instead.
func (*HHDZ_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{1}
}

func (x *HHDZ_Sate) GetState() HHDZ_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return HHDZ_State_Ready
}

func (x *HHDZ_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户断线重连下注消息
type HHDZ_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMoney *int64               `protobuf:"varint,1,req,name=UserMoney" json:"UserMoney,omitempty"`
	BetInfo   []*HHDZ_BroadCastBet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *HHDZ_UserBetInfo) Reset() {
	*x = HHDZ_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_UserBetInfo) ProtoMessage() {}

func (x *HHDZ_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_UserBetInfo.ProtoReflect.Descriptor instead.
func (*HHDZ_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{2}
}

func (x *HHDZ_UserBetInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *HHDZ_UserBetInfo) GetBetInfo() []*HHDZ_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//广播用户下注的数组
type HHDZ_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32               `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*HHDZ_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *HHDZ_BroadCastBetArr) Reset() {
	*x = HHDZ_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_BroadCastBetArr) ProtoMessage() {}

func (x *HHDZ_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*HHDZ_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{3}
}

func (x *HHDZ_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHDZ_BroadCastBetArr) GetBroadCastBetArr() []*HHDZ_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//广播用户下注内容数据结构
type HHDZ_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *HHDZ_BetZone `protobuf:"varint,1,req,name=Type,enum=netproto.HHDZ_BetZone" json:"Type,omitempty"`
	Money *int64        `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
}

func (x *HHDZ_BroadCastBet) Reset() {
	*x = HHDZ_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_BroadCastBet) ProtoMessage() {}

func (x *HHDZ_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_BroadCastBet.ProtoReflect.Descriptor instead.
func (*HHDZ_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{4}
}

func (x *HHDZ_BroadCastBet) GetType() HHDZ_BetZone {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HHDZ_BetZone_Red
}

func (x *HHDZ_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

//用户下注数组
type HHDZ_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*HHDZ_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *HHDZ_BetArr) Reset() {
	*x = HHDZ_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_BetArr) ProtoMessage() {}

func (x *HHDZ_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_BetArr.ProtoReflect.Descriptor instead.
func (*HHDZ_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{5}
}

func (x *HHDZ_BetArr) GetBetArr() []*HHDZ_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type HHDZ_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *HHDZ_BetZone `protobuf:"varint,1,req,name=BetType,enum=netproto.HHDZ_BetZone" json:"BetType,omitempty"`
	Count   *int32        `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
}

func (x *HHDZ_Bet) Reset() {
	*x = HHDZ_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_Bet) ProtoMessage() {}

func (x *HHDZ_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_Bet.ProtoReflect.Descriptor instead.
func (*HHDZ_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{6}
}

func (x *HHDZ_Bet) GetBetType() HHDZ_BetZone {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return HHDZ_BetZone_Red
}

func (x *HHDZ_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//下注的结果
type HHDZ_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32        `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`                              //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4此类下注已达到上限，-5不可同时下注紅與黑，-6用户金额小於下注限制
	Money  *int64        `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`                          //用户的钱，下注以后的金额。
	Type   *HHDZ_BetZone `protobuf:"varint,3,opt,name=Type,enum=netproto.HHDZ_BetZone" json:"Type,omitempty"` //下注超过限制的下注类型
	BetArr []*HHDZ_Bet   `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"`                         //用户下注数据
}

func (x *HHDZ_BetRet) Reset() {
	*x = HHDZ_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_BetRet) ProtoMessage() {}

func (x *HHDZ_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_BetRet.ProtoReflect.Descriptor instead.
func (*HHDZ_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{7}
}

func (x *HHDZ_BetRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *HHDZ_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *HHDZ_BetRet) GetType() HHDZ_BetZone {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HHDZ_BetZone_Red
}

func (x *HHDZ_BetRet) GetBetArr() []*HHDZ_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//游戏扑克结果
type HHDZ_GameResultPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPoker       []*PokerCard  `protobuf:"bytes,1,rep,name=RedPoker" json:"RedPoker,omitempty"`                                         //紅區扑克牌
	BlackPoker     []*PokerCard  `protobuf:"bytes,2,rep,name=BlackPoker" json:"BlackPoker,omitempty"`                                     //黑區扑克牌
	RedPokerType   *HHDZ_BetType `protobuf:"varint,3,req,name=RedPokerType,enum=netproto.HHDZ_BetType" json:"RedPokerType,omitempty"`     //紅的组合结果
	BlackPokerType *HHDZ_BetType `protobuf:"varint,4,req,name=BlackPokerType,enum=netproto.HHDZ_BetType" json:"BlackPokerType,omitempty"` //黑的组合结果
	Win            *HHDZ_BetZone `protobuf:"varint,5,req,name=Win,enum=netproto.HHDZ_BetZone" json:"Win,omitempty"`                       //贏家，1:紅，2:黑
	RoundID        *int32        `protobuf:"varint,6,req,name=RoundID" json:"RoundID,omitempty"`                                          //局數
}

func (x *HHDZ_GameResultPoker) Reset() {
	*x = HHDZ_GameResultPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_GameResultPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_GameResultPoker) ProtoMessage() {}

func (x *HHDZ_GameResultPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_GameResultPoker.ProtoReflect.Descriptor instead.
func (*HHDZ_GameResultPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{8}
}

func (x *HHDZ_GameResultPoker) GetRedPoker() []*PokerCard {
	if x != nil {
		return x.RedPoker
	}
	return nil
}

func (x *HHDZ_GameResultPoker) GetBlackPoker() []*PokerCard {
	if x != nil {
		return x.BlackPoker
	}
	return nil
}

func (x *HHDZ_GameResultPoker) GetRedPokerType() HHDZ_BetType {
	if x != nil && x.RedPokerType != nil {
		return *x.RedPokerType
	}
	return HHDZ_BetType_RedPrize
}

func (x *HHDZ_GameResultPoker) GetBlackPokerType() HHDZ_BetType {
	if x != nil && x.BlackPokerType != nil {
		return *x.BlackPokerType
	}
	return HHDZ_BetType_RedPrize
}

func (x *HHDZ_GameResultPoker) GetWin() HHDZ_BetZone {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return HHDZ_BetZone_Red
}

func (x *HHDZ_GameResultPoker) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

//游戏用户赢钱结果
type HHDZ_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemWin    *int64               `protobuf:"varint,1,req,name=SystemWin" json:"SystemWin,omitempty"`      //莊家輸贏
	SelfWin      *int64               `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`          //玩家本金+淨輸贏
	WinUserInfo  []*HHDZ_WinUerInfo   `protobuf:"bytes,3,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"`   //赢钱前三名的人信息
	StageUerInfo []*HHDZ_StageUerInfo `protobuf:"bytes,4,rep,name=StageUerInfo" json:"StageUerInfo,omitempty"` //標誌玩家赢钱信息
	WinLose      *int64               `protobuf:"varint,5,req,name=WinLose" json:"WinLose,omitempty"`          //玩家淨輸贏
}

func (x *HHDZ_GameResultUserMoney) Reset() {
	*x = HHDZ_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_GameResultUserMoney) ProtoMessage() {}

func (x *HHDZ_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*HHDZ_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{9}
}

func (x *HHDZ_GameResultUserMoney) GetSystemWin() int64 {
	if x != nil && x.SystemWin != nil {
		return *x.SystemWin
	}
	return 0
}

func (x *HHDZ_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *HHDZ_GameResultUserMoney) GetWinUserInfo() []*HHDZ_WinUerInfo {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

func (x *HHDZ_GameResultUserMoney) GetStageUerInfo() []*HHDZ_StageUerInfo {
	if x != nil {
		return x.StageUerInfo
	}
	return nil
}

func (x *HHDZ_GameResultUserMoney) GetWinLose() int64 {
	if x != nil && x.WinLose != nil {
		return *x.WinLose
	}
	return 0
}

//赢钱玩家信息
type HHDZ_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *HHDZ_WinUerInfo) Reset() {
	*x = HHDZ_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_WinUerInfo) ProtoMessage() {}

func (x *HHDZ_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_WinUerInfo.ProtoReflect.Descriptor instead.
func (*HHDZ_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{10}
}

func (x *HHDZ_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *HHDZ_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//標誌玩家赢钱信息
type HHDZ_StageUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Win    *int64 `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *HHDZ_StageUerInfo) Reset() {
	*x = HHDZ_StageUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_StageUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_StageUerInfo) ProtoMessage() {}

func (x *HHDZ_StageUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_StageUerInfo.ProtoReflect.Descriptor instead.
func (*HHDZ_StageUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{11}
}

func (x *HHDZ_StageUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHDZ_StageUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//本局局數
type HHDZ_RoundID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedWin   *int32 `protobuf:"varint,1,req,name=RedWin" json:"RedWin,omitempty"`     //紅贏局數
	BlackWin *int32 `protobuf:"varint,2,req,name=BlackWin" json:"BlackWin,omitempty"` //黑贏局數
	RoundID  *int32 `protobuf:"varint,3,req,name=RoundID" json:"RoundID,omitempty"`   //局數
}

func (x *HHDZ_RoundID) Reset() {
	*x = HHDZ_RoundID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_RoundID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_RoundID) ProtoMessage() {}

func (x *HHDZ_RoundID) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_RoundID.ProtoReflect.Descriptor instead.
func (*HHDZ_RoundID) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{12}
}

func (x *HHDZ_RoundID) GetRedWin() int32 {
	if x != nil && x.RedWin != nil {
		return *x.RedWin
	}
	return 0
}

func (x *HHDZ_RoundID) GetBlackWin() int32 {
	if x != nil && x.BlackWin != nil {
		return *x.BlackWin
	}
	return 0
}

func (x *HHDZ_RoundID) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

//下注限制列表消息
type HHDZ_BetRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red     *HHDZ_Range `protobuf:"bytes,1,req,name=Red" json:"Red,omitempty"`         //紅
	Black   *HHDZ_Range `protobuf:"bytes,2,req,name=Black" json:"Black,omitempty"`     //黑
	Special *HHDZ_Range `protobuf:"bytes,3,req,name=Special" json:"Special,omitempty"` //特殊牌型
}

func (x *HHDZ_BetRangeList) Reset() {
	*x = HHDZ_BetRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_BetRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_BetRangeList) ProtoMessage() {}

func (x *HHDZ_BetRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_BetRangeList.ProtoReflect.Descriptor instead.
func (*HHDZ_BetRangeList) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{13}
}

func (x *HHDZ_BetRangeList) GetRed() *HHDZ_Range {
	if x != nil {
		return x.Red
	}
	return nil
}

func (x *HHDZ_BetRangeList) GetBlack() *HHDZ_Range {
	if x != nil {
		return x.Black
	}
	return nil
}

func (x *HHDZ_BetRangeList) GetSpecial() *HHDZ_Range {
	if x != nil {
		return x.Special
	}
	return nil
}

type HHDZ_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *int32 `protobuf:"varint,1,req,name=Min" json:"Min,omitempty"`
	Max *int32 `protobuf:"varint,2,req,name=Max" json:"Max,omitempty"`
}

func (x *HHDZ_Range) Reset() {
	*x = HHDZ_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_Range) ProtoMessage() {}

func (x *HHDZ_Range) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_Range.ProtoReflect.Descriptor instead.
func (*HHDZ_Range) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{14}
}

func (x *HHDZ_Range) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *HHDZ_Range) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

//牌局編號
type HHDZ_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *HHDZ_GameNoInfo) Reset() {
	*x = HHDZ_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_GameNoInfo) ProtoMessage() {}

func (x *HHDZ_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_GameNoInfo.ProtoReflect.Descriptor instead.
func (*HHDZ_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{15}
}

func (x *HHDZ_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

//大富豪列表消息
type HHDZ_RichestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichestList []*HHDZ_Richest `protobuf:"bytes,1,rep,name=RichestList" json:"RichestList,omitempty"` //富豪的排行榜
}

func (x *HHDZ_RichestList) Reset() {
	*x = HHDZ_RichestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_RichestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_RichestList) ProtoMessage() {}

func (x *HHDZ_RichestList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_RichestList.ProtoReflect.Descriptor instead.
func (*HHDZ_RichestList) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{16}
}

func (x *HHDZ_RichestList) GetRichestList() []*HHDZ_Richest {
	if x != nil {
		return x.RichestList
	}
	return nil
}

//大富豪的玩家資訊
type HHDZ_Richest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking       *int32 `protobuf:"varint,1,req,name=Ranking" json:"Ranking,omitempty"`             //富豪排名
	UserID        *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`               //富豪ID
	UserFaceID    *int32 `protobuf:"varint,3,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //富豪頭像ID
	Money         *int64 `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`                 //富豪当前身上的钱
	AvatarFrameID *int32 `protobuf:"varint,5,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
	LastBetTotal  *int64 `protobuf:"varint,6,opt,name=LastBetTotal" json:"LastBetTotal,omitempty"`   //上局下注總量
}

func (x *HHDZ_Richest) Reset() {
	*x = HHDZ_Richest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_HHDZ_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HHDZ_Richest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HHDZ_Richest) ProtoMessage() {}

func (x *HHDZ_Richest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_HHDZ_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HHDZ_Richest.ProtoReflect.Descriptor instead.
func (*HHDZ_Richest) Descriptor() ([]byte, []int) {
	return file_GameMsg_HHDZ_proto_rawDescGZIP(), []int{17}
}

func (x *HHDZ_Richest) GetRanking() int32 {
	if x != nil && x.Ranking != nil {
		return *x.Ranking
	}
	return 0
}

func (x *HHDZ_Richest) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *HHDZ_Richest) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *HHDZ_Richest) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *HHDZ_Richest) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

func (x *HHDZ_Richest) GetLastBetTotal() int64 {
	if x != nil && x.LastBetTotal != nil {
		return *x.LastBetTotal
	}
	return 0
}

var File_GameMsg_HHDZ_proto protoreflect.FileDescriptor

var file_GameMsg_HHDZ_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x48, 0x48, 0x44, 0x5a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a,
	0x0c, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4b,
	0x0a, 0x09, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x53, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x48,
	0x48, 0x44, 0x5a, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x14, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x55, 0x0a, 0x11, 0x48,
	0x48, 0x44, 0x5a, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42,
	0x65, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x22, 0x39, 0x0a, 0x0b, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44,
	0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x52, 0x0a,
	0x08, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x42, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72,
	0x72, 0x22, 0xbc, 0x02, 0x0a, 0x14, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65,
	0x64, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x08, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x52, 0x65, 0x64, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x03,
	0x57, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x22, 0xea, 0x01, 0x0a, 0x18, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65,
	0x6c, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x22, 0x3f, 0x0a,
	0x0f, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x3d,
	0x0a, 0x11, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x57,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22, 0x5c, 0x0a,
	0x0c, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52,
	0x65, 0x64, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x22, 0x97, 0x01, 0x0a, 0x11,
	0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x03, 0x52, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x52, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x30, 0x0a, 0x0a, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x22, 0x29, 0x0a, 0x0f, 0x48, 0x48, 0x44, 0x5a, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x22, 0x4c, 0x0a, 0x10, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52, 0x69, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x2a, 0x2f, 0x0a, 0x0c, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65, 0x74, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a, 0x0c, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x42, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x4f, 0x5a, 0x49, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x48, 0x55, 0x4e, 0x4a, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4a,
	0x49, 0x4e, 0x48, 0x55, 0x41, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x55, 0x4e, 0x5a,
	0x49, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x47, 0x44, 0x55, 0x49, 0x5a, 0x49, 0x10,
	0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x44, 0x55, 0x49, 0x5a, 0x49, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x4e, 0x50, 0x41, 0x49, 0x10, 0x09, 0x2a, 0x5b, 0x0a,
	0x0a, 0x48, 0x48, 0x44, 0x5a, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x61, 0x69, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x4b, 0x61, 0x69, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x10, 0x06, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_HHDZ_proto_rawDescOnce sync.Once
	file_GameMsg_HHDZ_proto_rawDescData = file_GameMsg_HHDZ_proto_rawDesc
)

func file_GameMsg_HHDZ_proto_rawDescGZIP() []byte {
	file_GameMsg_HHDZ_proto_rawDescOnce.Do(func() {
		file_GameMsg_HHDZ_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_HHDZ_proto_rawDescData)
	})
	return file_GameMsg_HHDZ_proto_rawDescData
}

var file_GameMsg_HHDZ_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_GameMsg_HHDZ_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_GameMsg_HHDZ_proto_goTypes = []interface{}{
	(HHDZ_BetZone)(0),                // 0: netproto.HHDZ_BetZone
	(HHDZ_BetType)(0),                // 1: netproto.HHDZ_BetType
	(HHDZ_State)(0),                  // 2: netproto.HHDZ_State
	(*HHDZ_Setting)(nil),             // 3: netproto.HHDZ_Setting
	(*HHDZ_Sate)(nil),                // 4: netproto.HHDZ_Sate
	(*HHDZ_UserBetInfo)(nil),         // 5: netproto.HHDZ_UserBetInfo
	(*HHDZ_BroadCastBetArr)(nil),     // 6: netproto.HHDZ_BroadCastBetArr
	(*HHDZ_BroadCastBet)(nil),        // 7: netproto.HHDZ_BroadCastBet
	(*HHDZ_BetArr)(nil),              // 8: netproto.HHDZ_BetArr
	(*HHDZ_Bet)(nil),                 // 9: netproto.HHDZ_Bet
	(*HHDZ_BetRet)(nil),              // 10: netproto.HHDZ_BetRet
	(*HHDZ_GameResultPoker)(nil),     // 11: netproto.HHDZ_GameResultPoker
	(*HHDZ_GameResultUserMoney)(nil), // 12: netproto.HHDZ_GameResultUserMoney
	(*HHDZ_WinUerInfo)(nil),          // 13: netproto.HHDZ_WinUerInfo
	(*HHDZ_StageUerInfo)(nil),        // 14: netproto.HHDZ_StageUerInfo
	(*HHDZ_RoundID)(nil),             // 15: netproto.HHDZ_RoundID
	(*HHDZ_BetRangeList)(nil),        // 16: netproto.HHDZ_BetRangeList
	(*HHDZ_Range)(nil),               // 17: netproto.HHDZ_Range
	(*HHDZ_GameNoInfo)(nil),          // 18: netproto.HHDZ_GameNoInfo
	(*HHDZ_RichestList)(nil),         // 19: netproto.HHDZ_RichestList
	(*HHDZ_Richest)(nil),             // 20: netproto.HHDZ_Richest
	(*PokerCard)(nil),                // 21: netproto.PokerCard
}
var file_GameMsg_HHDZ_proto_depIdxs = []int32{
	16, // 0: netproto.HHDZ_Setting.BetRange:type_name -> netproto.HHDZ_BetRangeList
	2,  // 1: netproto.HHDZ_Sate.State:type_name -> netproto.HHDZ_State
	7,  // 2: netproto.HHDZ_UserBetInfo.BetInfo:type_name -> netproto.HHDZ_BroadCastBet
	7,  // 3: netproto.HHDZ_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.HHDZ_BroadCastBet
	0,  // 4: netproto.HHDZ_BroadCastBet.Type:type_name -> netproto.HHDZ_BetZone
	9,  // 5: netproto.HHDZ_BetArr.BetArr:type_name -> netproto.HHDZ_Bet
	0,  // 6: netproto.HHDZ_Bet.BetType:type_name -> netproto.HHDZ_BetZone
	0,  // 7: netproto.HHDZ_BetRet.Type:type_name -> netproto.HHDZ_BetZone
	9,  // 8: netproto.HHDZ_BetRet.BetArr:type_name -> netproto.HHDZ_Bet
	21, // 9: netproto.HHDZ_GameResultPoker.RedPoker:type_name -> netproto.PokerCard
	21, // 10: netproto.HHDZ_GameResultPoker.BlackPoker:type_name -> netproto.PokerCard
	1,  // 11: netproto.HHDZ_GameResultPoker.RedPokerType:type_name -> netproto.HHDZ_BetType
	1,  // 12: netproto.HHDZ_GameResultPoker.BlackPokerType:type_name -> netproto.HHDZ_BetType
	0,  // 13: netproto.HHDZ_GameResultPoker.Win:type_name -> netproto.HHDZ_BetZone
	13, // 14: netproto.HHDZ_GameResultUserMoney.WinUserInfo:type_name -> netproto.HHDZ_WinUerInfo
	14, // 15: netproto.HHDZ_GameResultUserMoney.StageUerInfo:type_name -> netproto.HHDZ_StageUerInfo
	17, // 16: netproto.HHDZ_BetRangeList.Red:type_name -> netproto.HHDZ_Range
	17, // 17: netproto.HHDZ_BetRangeList.Black:type_name -> netproto.HHDZ_Range
	17, // 18: netproto.HHDZ_BetRangeList.Special:type_name -> netproto.HHDZ_Range
	20, // 19: netproto.HHDZ_RichestList.RichestList:type_name -> netproto.HHDZ_Richest
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_GameMsg_HHDZ_proto_init() }
func file_GameMsg_HHDZ_proto_init() {
	if File_GameMsg_HHDZ_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_HHDZ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_GameResultPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_StageUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_RoundID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_BetRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_RichestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_HHDZ_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HHDZ_Richest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_HHDZ_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_HHDZ_proto_goTypes,
		DependencyIndexes: file_GameMsg_HHDZ_proto_depIdxs,
		EnumInfos:         file_GameMsg_HHDZ_proto_enumTypes,
		MessageInfos:      file_GameMsg_HHDZ_proto_msgTypes,
	}.Build()
	File_GameMsg_HHDZ_proto = out.File
	file_GameMsg_HHDZ_proto_rawDesc = nil
	file_GameMsg_HHDZ_proto_goTypes = nil
	file_GameMsg_HHDZ_proto_depIdxs = nil
}
