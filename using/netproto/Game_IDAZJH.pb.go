// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: Game_IDAZJH.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IDAZJH_GameMessageClassID int32

const (
	IDAZJH_GameMessageClassID_IDAZJHBetBaseId                    IDAZJH_GameMessageClassID = 10001 //下底 ZJH_BetBase
	IDAZJH_GameMessageClassID_IDAZJHFaPaiId                      IDAZJH_GameMessageClassID = 10002 //发牌
	IDAZJH_GameMessageClassID_IDAZJHWaitOptID                    IDAZJH_GameMessageClassID = 10003 //等待操作 ZJH_WaitOpt
	IDAZJH_GameMessageClassID_IDAZJHCurrOptID                    IDAZJH_GameMessageClassID = 10004 //当前操作的椅子号 ZJH_WaitOptSeat
	IDAZJH_GameMessageClassID_IDAZJHCheckCardsID                 IDAZJH_GameMessageClassID = 10005 //查看手牌 客户端向服务器发送
	IDAZJH_GameMessageClassID_IDAZJHCheckCardsBroadCastID        IDAZJH_GameMessageClassID = 10006 //查看手牌广播
	IDAZJH_GameMessageClassID_IDAZJHCompareID                    IDAZJH_GameMessageClassID = 10008 //比牌消息 客户端向服务器发送 ZJH_CompareCards
	IDAZJH_GameMessageClassID_IDAZJHCompareRetID                 IDAZJH_GameMessageClassID = 10009 //比牌结果 ZJH_CompareCardsRet
	IDAZJH_GameMessageClassID_IDAZJHDropID                       IDAZJH_GameMessageClassID = 10010 //弃牌消息 ZJH_Drop
	IDAZJH_GameMessageClassID_IDAZJHDropBroadCastID              IDAZJH_GameMessageClassID = 10011 //弃牌广播
	IDAZJH_GameMessageClassID_IDAZJHFollowID                     IDAZJH_GameMessageClassID = 10012 //跟注
	IDAZJH_GameMessageClassID_IDAZJHFollowBrodCastID             IDAZJH_GameMessageClassID = 10013 //服务器下发客户端 跟注广播 ZJH_Follow
	IDAZJH_GameMessageClassID_IDAZJHBetAddID                     IDAZJH_GameMessageClassID = 10014 //加注 客户端发送 ZJH_BetAdd
	IDAZJH_GameMessageClassID_IDAZJHBetAddBrodCastID             IDAZJH_GameMessageClassID = 10015 //加注广播 ZJH_BetAddBrodCast
	IDAZJH_GameMessageClassID_IDAZJHGameResultID                 IDAZJH_GameMessageClassID = 10016 //游戏计算消息 ZJH_GameRet
	IDAZJH_GameMessageClassID_IDAZJHComparePokerID               IDAZJH_GameMessageClassID = 10017 //和玩家比过牌的牌型和牌数据
	IDAZJH_GameMessageClassID_IDAZJHGameSceneID                  IDAZJH_GameMessageClassID = 10018 //游戏场景恢复消息
	IDAZJH_GameMessageClassID_IDAZJHReadyTime                    IDAZJH_GameMessageClassID = 10019 //游戏结束准备时间
	IDAZJH_GameMessageClassID_IDAZJHEarlyChangeTable             IDAZJH_GameMessageClassID = 10021 //提前換桌
	IDAZJH_GameMessageClassID_IDAZJHEarlyLeaveTable              IDAZJH_GameMessageClassID = 10024 //提前離桌
	IDAZJH_GameMessageClassID_IDAZJHGameCurrturn                 IDAZJH_GameMessageClassID = 10025 //現在第幾輪
	IDAZJH_GameMessageClassID_IDAZJHUserCardType                 IDAZJH_GameMessageClassID = 10027 //用戶牌型
	IDAZJH_GameMessageClassID_IDAZJHGameNo                       IDAZJH_GameMessageClassID = 10028
	IDAZJH_GameMessageClassID_IDAZJHSideCompareID                IDAZJH_GameMessageClassID = 10032 //旁邊比牌 idazjh 客户端向服務器發送
	IDAZJH_GameMessageClassID_IDAZJHSideCompareBroadCastID       IDAZJH_GameMessageClassID = 10033 //旁邊比排廣播 idazjh
	IDAZJH_GameMessageClassID_IDAZJHAcceptSideCompareID          IDAZJH_GameMessageClassID = 10034 //是否接受比排 idazjh 客户端向服務器發送
	IDAZJH_GameMessageClassID_IDAZJHAcceptSideCompareBroadCastID IDAZJH_GameMessageClassID = 10035 //是否接受比排廣播 idazjh
	IDAZJH_GameMessageClassID_IDAZJHOverPotLimitBroadCastID      IDAZJH_GameMessageClassID = 10036 //超過池子上限廣播強制比牌 idazjh
	IDAZJH_GameMessageClassID_IDAZJHOverPotLimitCompareRetID     IDAZJH_GameMessageClassID = 10037 //超過池子比牌結果 idazjh
	IDAZJH_GameMessageClassID_IDAZJHErrorRetID                   IDAZJH_GameMessageClassID = 10029 //錯誤訊息封包 (StoC)
)

// Enum value maps for IDAZJH_GameMessageClassID.
var (
	IDAZJH_GameMessageClassID_name = map[int32]string{
		10001: "IDAZJHBetBaseId",
		10002: "IDAZJHFaPaiId",
		10003: "IDAZJHWaitOptID",
		10004: "IDAZJHCurrOptID",
		10005: "IDAZJHCheckCardsID",
		10006: "IDAZJHCheckCardsBroadCastID",
		10008: "IDAZJHCompareID",
		10009: "IDAZJHCompareRetID",
		10010: "IDAZJHDropID",
		10011: "IDAZJHDropBroadCastID",
		10012: "IDAZJHFollowID",
		10013: "IDAZJHFollowBrodCastID",
		10014: "IDAZJHBetAddID",
		10015: "IDAZJHBetAddBrodCastID",
		10016: "IDAZJHGameResultID",
		10017: "IDAZJHComparePokerID",
		10018: "IDAZJHGameSceneID",
		10019: "IDAZJHReadyTime",
		10021: "IDAZJHEarlyChangeTable",
		10024: "IDAZJHEarlyLeaveTable",
		10025: "IDAZJHGameCurrturn",
		10027: "IDAZJHUserCardType",
		10028: "IDAZJHGameNo",
		10032: "IDAZJHSideCompareID",
		10033: "IDAZJHSideCompareBroadCastID",
		10034: "IDAZJHAcceptSideCompareID",
		10035: "IDAZJHAcceptSideCompareBroadCastID",
		10036: "IDAZJHOverPotLimitBroadCastID",
		10037: "IDAZJHOverPotLimitCompareRetID",
		10029: "IDAZJHErrorRetID",
	}
	IDAZJH_GameMessageClassID_value = map[string]int32{
		"IDAZJHBetBaseId":                    10001,
		"IDAZJHFaPaiId":                      10002,
		"IDAZJHWaitOptID":                    10003,
		"IDAZJHCurrOptID":                    10004,
		"IDAZJHCheckCardsID":                 10005,
		"IDAZJHCheckCardsBroadCastID":        10006,
		"IDAZJHCompareID":                    10008,
		"IDAZJHCompareRetID":                 10009,
		"IDAZJHDropID":                       10010,
		"IDAZJHDropBroadCastID":              10011,
		"IDAZJHFollowID":                     10012,
		"IDAZJHFollowBrodCastID":             10013,
		"IDAZJHBetAddID":                     10014,
		"IDAZJHBetAddBrodCastID":             10015,
		"IDAZJHGameResultID":                 10016,
		"IDAZJHComparePokerID":               10017,
		"IDAZJHGameSceneID":                  10018,
		"IDAZJHReadyTime":                    10019,
		"IDAZJHEarlyChangeTable":             10021,
		"IDAZJHEarlyLeaveTable":              10024,
		"IDAZJHGameCurrturn":                 10025,
		"IDAZJHUserCardType":                 10027,
		"IDAZJHGameNo":                       10028,
		"IDAZJHSideCompareID":                10032,
		"IDAZJHSideCompareBroadCastID":       10033,
		"IDAZJHAcceptSideCompareID":          10034,
		"IDAZJHAcceptSideCompareBroadCastID": 10035,
		"IDAZJHOverPotLimitBroadCastID":      10036,
		"IDAZJHOverPotLimitCompareRetID":     10037,
		"IDAZJHErrorRetID":                   10029,
	}
)

func (x IDAZJH_GameMessageClassID) Enum() *IDAZJH_GameMessageClassID {
	p := new(IDAZJH_GameMessageClassID)
	*p = x
	return p
}

func (x IDAZJH_GameMessageClassID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDAZJH_GameMessageClassID) Descriptor() protoreflect.EnumDescriptor {
	return file_Game_IDAZJH_proto_enumTypes[0].Descriptor()
}

func (IDAZJH_GameMessageClassID) Type() protoreflect.EnumType {
	return &file_Game_IDAZJH_proto_enumTypes[0]
}

func (x IDAZJH_GameMessageClassID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IDAZJH_GameMessageClassID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IDAZJH_GameMessageClassID(num)
	return nil
}

// Deprecated: Use IDAZJH_GameMessageClassID.Descriptor instead.
func (IDAZJH_GameMessageClassID) EnumDescriptor() ([]byte, []int) {
	return file_Game_IDAZJH_proto_rawDescGZIP(), []int{0}
}

var File_Game_IDAZJH_proto protoreflect.FileDescriptor

var file_Game_IDAZJH_proto_rawDesc = []byte{
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xb4, 0x06,
	0x0a, 0x19, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x0f, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x10, 0x91,
	0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x46, 0x61, 0x50, 0x61, 0x69,
	0x49, 0x64, 0x10, 0x92, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x57,
	0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x49, 0x44, 0x10, 0x93, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74, 0x49, 0x44, 0x10, 0x94,
	0x4e, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x44, 0x10, 0x95, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x49, 0x44,
	0x41, 0x5a, 0x4a, 0x48, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x49, 0x44, 0x10, 0x96, 0x4e, 0x12, 0x14, 0x0a, 0x0f,
	0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x44, 0x10,
	0x98, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x74, 0x49, 0x44, 0x10, 0x99, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x10, 0x9a, 0x4e, 0x12, 0x1a,
	0x0a, 0x15, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x49, 0x44, 0x10, 0x9b, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x44,
	0x41, 0x5a, 0x4a, 0x48, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x10, 0x9c, 0x4e, 0x12,
	0x1b, 0x0a, 0x16, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42,
	0x72, 0x6f, 0x64, 0x43, 0x61, 0x73, 0x74, 0x49, 0x44, 0x10, 0x9d, 0x4e, 0x12, 0x13, 0x0a, 0x0e,
	0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x42, 0x65, 0x74, 0x41, 0x64, 0x64, 0x49, 0x44, 0x10, 0x9e,
	0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x42, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x42, 0x72, 0x6f, 0x64, 0x43, 0x61, 0x73, 0x74, 0x49, 0x44, 0x10, 0x9f, 0x4e, 0x12, 0x17,
	0x0a, 0x12, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x44, 0x10, 0xa0, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x44, 0x41, 0x5a, 0x4a,
	0x48, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x10,
	0xa1, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x10, 0xa2, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x44,
	0x41, 0x5a, 0x4a, 0x48, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x10, 0xa3, 0x4e,
	0x12, 0x1b, 0x0a, 0x16, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xa5, 0x4e, 0x12, 0x1a, 0x0a,
	0x15, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xa8, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x44, 0x41,
	0x5a, 0x4a, 0x48, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x74, 0x75, 0x72, 0x6e, 0x10,
	0xa9, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0xab, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x10, 0xac, 0x4e, 0x12, 0x18,
	0x0a, 0x13, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x10, 0xb0, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x49, 0x44, 0x41, 0x5a,
	0x4a, 0x48, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x49, 0x44, 0x10, 0xb1, 0x4e, 0x12, 0x1e, 0x0a, 0x19, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x69, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x44, 0x10, 0xb2, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x49,
	0x44, 0x41, 0x5a, 0x4a, 0x48, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x69, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x49,
	0x44, 0x10, 0xb3, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x4f, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x49, 0x44, 0x10, 0xb4, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x49, 0x44, 0x41, 0x5a,
	0x4a, 0x48, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x74, 0x49, 0x44, 0x10, 0xb5, 0x4e, 0x12, 0x15, 0x0a,
	0x10, 0x49, 0x44, 0x41, 0x5a, 0x4a, 0x48, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x49,
	0x44, 0x10, 0xad, 0x4e, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f,
}

var (
	file_Game_IDAZJH_proto_rawDescOnce sync.Once
	file_Game_IDAZJH_proto_rawDescData = file_Game_IDAZJH_proto_rawDesc
)

func file_Game_IDAZJH_proto_rawDescGZIP() []byte {
	file_Game_IDAZJH_proto_rawDescOnce.Do(func() {
		file_Game_IDAZJH_proto_rawDescData = protoimpl.X.CompressGZIP(file_Game_IDAZJH_proto_rawDescData)
	})
	return file_Game_IDAZJH_proto_rawDescData
}

var file_Game_IDAZJH_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Game_IDAZJH_proto_goTypes = []interface{}{
	(IDAZJH_GameMessageClassID)(0), // 0: netproto.IDAZJH_GameMessageClassID
}
var file_Game_IDAZJH_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Game_IDAZJH_proto_init() }
func file_Game_IDAZJH_proto_init() {
	if File_Game_IDAZJH_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Game_IDAZJH_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Game_IDAZJH_proto_goTypes,
		DependencyIndexes: file_Game_IDAZJH_proto_depIdxs,
		EnumInfos:         file_Game_IDAZJH_proto_enumTypes,
	}.Build()
	File_Game_IDAZJH_proto = out.File
	file_Game_IDAZJH_proto_rawDesc = nil
	file_Game_IDAZJH_proto_goTypes = nil
	file_Game_IDAZJH_proto_depIdxs = nil
}
