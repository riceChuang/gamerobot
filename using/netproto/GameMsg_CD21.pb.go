// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_CD21.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//下注设置
type CD21_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetMoneyLimit *int64 `protobuf:"varint,1,req,name=BetMoneyLimit" json:"BetMoneyLimit,omitempty"` //下注上限
}

func (x *CD21_Setting) Reset() {
	*x = CD21_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_Setting) ProtoMessage() {}

func (x *CD21_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_Setting.ProtoReflect.Descriptor instead.
func (*CD21_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{0}
}

func (x *CD21_Setting) GetBetMoneyLimit() int64 {
	if x != nil && x.BetMoneyLimit != nil {
		return *x.BetMoneyLimit
	}
	return 0
}

//状态消息
type CD21_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"` //状态
	Time  *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`   //此状态的剩余时间
}

func (x *CD21_Sate) Reset() {
	*x = CD21_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_Sate) ProtoMessage() {}

func (x *CD21_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_Sate.ProtoReflect.Descriptor instead.
func (*CD21_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{1}
}

func (x *CD21_Sate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CD21_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户下注数据结构
type CD21_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *int32 `protobuf:"varint,1,req,name=Count" json:"Count,omitempty"` //金额
	SitNo *int32 `protobuf:"varint,2,req,name=SitNo" json:"SitNo,omitempty"` //座位操作信息
}

func (x *CD21_Bet) Reset() {
	*x = CD21_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_Bet) ProtoMessage() {}

func (x *CD21_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_Bet.ProtoReflect.Descriptor instead.
func (*CD21_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{2}
}

func (x *CD21_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CD21_Bet) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

//21點下注的结果
type CD21_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     *int32    `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`        //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4下注金额非法，-5该位置已被下注 -6 重复下注
	Money   *int64    `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`    //用户的钱，下注以后的金额。
	BetData *CD21_Bet `protobuf:"bytes,3,req,name=BetData" json:"BetData,omitempty"` //用户下注数据
}

func (x *CD21_BetRet) Reset() {
	*x = CD21_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_BetRet) ProtoMessage() {}

func (x *CD21_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_BetRet.ProtoReflect.Descriptor instead.
func (*CD21_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{3}
}

func (x *CD21_BetRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *CD21_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *CD21_BetRet) GetBetData() *CD21_Bet {
	if x != nil {
		return x.BetData
	}
	return nil
}

//广播用户下注的数组
type CD21_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32               `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*CD21_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
	SitNoArr        []int32              `protobuf:"varint,3,rep,name=SitNoArr" json:"SitNoArr,omitempty"` //可下注的座位号
}

func (x *CD21_BroadCastBetArr) Reset() {
	*x = CD21_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_BroadCastBetArr) ProtoMessage() {}

func (x *CD21_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*CD21_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{4}
}

func (x *CD21_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *CD21_BroadCastBetArr) GetBroadCastBetArr() []*CD21_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

func (x *CD21_BroadCastBetArr) GetSitNoArr() []int32 {
	if x != nil {
		return x.SitNoArr
	}
	return nil
}

//广播用户断线下注内容数据结构
type CD21_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *int32        `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"` //0底注 1保险 2加倍 3分牌
	Money   *int64        `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
	OptInfo *CD21_OptInfo `protobuf:"bytes,3,req,name=OptInfo" json:"OptInfo,omitempty"` //用户详情
}

func (x *CD21_BroadCastBet) Reset() {
	*x = CD21_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_BroadCastBet) ProtoMessage() {}

func (x *CD21_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_BroadCastBet.ProtoReflect.Descriptor instead.
func (*CD21_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{5}
}

func (x *CD21_BroadCastBet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CD21_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *CD21_BroadCastBet) GetOptInfo() *CD21_OptInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

//21點發牌
type CD21_Fapai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*CD21CardContent `protobuf:"bytes,1,rep,name=Content" json:"Content,omitempty"` //用户下注数据
}

func (x *CD21_Fapai) Reset() {
	*x = CD21_Fapai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_Fapai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_Fapai) ProtoMessage() {}

func (x *CD21_Fapai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_Fapai.ProtoReflect.Descriptor instead.
func (*CD21_Fapai) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{6}
}

func (x *CD21_Fapai) GetContent() []*CD21CardContent {
	if x != nil {
		return x.Content
	}
	return nil
}

//21點發牌
type CD21CardContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitNo      *int32       `protobuf:"varint,1,req,name=SitNo" json:"SitNo,omitempty"`           //座位的編號
	SitPoker   []*PokerCard `protobuf:"bytes,2,rep,name=SitPoker" json:"SitPoker,omitempty"`      //座位上的撲克牌
	CardNumber []int32      `protobuf:"varint,3,rep,name=CardNumber" json:"CardNumber,omitempty"` //牌點總合
}

func (x *CD21CardContent) Reset() {
	*x = CD21CardContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21CardContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21CardContent) ProtoMessage() {}

func (x *CD21CardContent) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21CardContent.ProtoReflect.Descriptor instead.
func (*CD21CardContent) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{7}
}

func (x *CD21CardContent) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

func (x *CD21CardContent) GetSitPoker() []*PokerCard {
	if x != nil {
		return x.SitPoker
	}
	return nil
}

func (x *CD21CardContent) GetCardNumber() []int32 {
	if x != nil {
		return x.CardNumber
	}
	return nil
}

//21用户结算当前操作广播
type CD21_StopOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
}

func (x *CD21_StopOperation) Reset() {
	*x = CD21_StopOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_StopOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_StopOperation) ProtoMessage() {}

func (x *CD21_StopOperation) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_StopOperation.ProtoReflect.Descriptor instead.
func (*CD21_StopOperation) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{8}
}

func (x *CD21_StopOperation) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

//21點要牌
type CD21_Yaopai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptInfo   *CD21_OptInfo `protobuf:"bytes,1,req,name=OptInfo" json:"OptInfo,omitempty"`      //座位操作信息
	SitPoker  []*PokerCard  `protobuf:"bytes,2,rep,name=SitPoker" json:"SitPoker,omitempty"`    //發下的撲克牌
	Double    *bool         `protobuf:"varint,3,req,name=Double" json:"Double,omitempty"`       //玩家是否加倍
	CardTotal []int32       `protobuf:"varint,4,rep,name=CardTotal" json:"CardTotal,omitempty"` //牌點總和
}

func (x *CD21_Yaopai) Reset() {
	*x = CD21_Yaopai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_Yaopai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_Yaopai) ProtoMessage() {}

func (x *CD21_Yaopai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_Yaopai.ProtoReflect.Descriptor instead.
func (*CD21_Yaopai) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{9}
}

func (x *CD21_Yaopai) GetOptInfo() *CD21_OptInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

func (x *CD21_Yaopai) GetSitPoker() []*PokerCard {
	if x != nil {
		return x.SitPoker
	}
	return nil
}

func (x *CD21_Yaopai) GetDouble() bool {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return false
}

func (x *CD21_Yaopai) GetCardTotal() []int32 {
	if x != nil {
		return x.CardTotal
	}
	return nil
}

//21點玩家保險
type CD21_UserCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Insurance *bool         `protobuf:"varint,1,req,name=Insurance" json:"Insurance,omitempty"` //保險
	Cancel    *bool         `protobuf:"varint,2,req,name=Cancel" json:"Cancel,omitempty"`       //取消
	OptInfo   *CD21_OptInfo `protobuf:"bytes,3,req,name=OptInfo" json:"OptInfo,omitempty"`      //座位信息
}

func (x *CD21_UserCheck) Reset() {
	*x = CD21_UserCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_UserCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_UserCheck) ProtoMessage() {}

func (x *CD21_UserCheck) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_UserCheck.ProtoReflect.Descriptor instead.
func (*CD21_UserCheck) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{10}
}

func (x *CD21_UserCheck) GetInsurance() bool {
	if x != nil && x.Insurance != nil {
		return *x.Insurance
	}
	return false
}

func (x *CD21_UserCheck) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return false
}

func (x *CD21_UserCheck) GetOptInfo() *CD21_OptInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

//21點玩家可操作行為
type CD21_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptInfo *CD21_OptInfo `protobuf:"bytes,1,req,name=OptInfo" json:"OptInfo,omitempty"`  //座位信息
	Hit     *bool         `protobuf:"varint,2,req,name=Hit" json:"Hit,omitempty"`         //要牌
	Stand   *bool         `protobuf:"varint,3,req,name=Stand" json:"Stand,omitempty"`     //停牌
	Split   *bool         `protobuf:"varint,4,req,name=Split" json:"Split,omitempty"`     //分牌
	Double  *bool         `protobuf:"varint,5,req,name=Double" json:"Double,omitempty"`   //加倍
	Bust    *bool         `protobuf:"varint,6,req,name=Bust" json:"Bust,omitempty"`       //爆牌
	OptTime *int32        `protobuf:"varint,7,req,name=OptTime" json:"OptTime,omitempty"` //操作時間
}

func (x *CD21_UserInfo) Reset() {
	*x = CD21_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_UserInfo) ProtoMessage() {}

func (x *CD21_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_UserInfo.ProtoReflect.Descriptor instead.
func (*CD21_UserInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{11}
}

func (x *CD21_UserInfo) GetOptInfo() *CD21_OptInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

func (x *CD21_UserInfo) GetHit() bool {
	if x != nil && x.Hit != nil {
		return *x.Hit
	}
	return false
}

func (x *CD21_UserInfo) GetStand() bool {
	if x != nil && x.Stand != nil {
		return *x.Stand
	}
	return false
}

func (x *CD21_UserInfo) GetSplit() bool {
	if x != nil && x.Split != nil {
		return *x.Split
	}
	return false
}

func (x *CD21_UserInfo) GetDouble() bool {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return false
}

func (x *CD21_UserInfo) GetBust() bool {
	if x != nil && x.Bust != nil {
		return *x.Bust
	}
	return false
}

func (x *CD21_UserInfo) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

//21點玩家可操作
type CD21_OptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitNo   *int32 `protobuf:"varint,1,req,name=SitNo" json:"SitNo,omitempty"` //座位號
	UserID  *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`
	IsSplit *bool  `protobuf:"varint,3,req,name=IsSplit" json:"IsSplit,omitempty"` //是否为分牌操作
}

func (x *CD21_OptInfo) Reset() {
	*x = CD21_OptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_OptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_OptInfo) ProtoMessage() {}

func (x *CD21_OptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_OptInfo.ProtoReflect.Descriptor instead.
func (*CD21_OptInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{12}
}

func (x *CD21_OptInfo) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

func (x *CD21_OptInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *CD21_OptInfo) GetIsSplit() bool {
	if x != nil && x.IsSplit != nil {
		return *x.IsSplit
	}
	return false
}

//游戏用户保险结果
type CD21_BaXianResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlackJack     *bool                  `protobuf:"varint,1,req,name=IsBlackJack" json:"IsBlackJack,omitempty"`        //是否为黑杰克
	FanPai          *CD21_FanPai           `protobuf:"bytes,2,opt,name=FanPai" json:"FanPai,omitempty"`                   //庄家翻牌信息 为黑杰克才会有
	ResultUserMoney []*CD21_GameSettlement `protobuf:"bytes,3,rep,name=ResultUserMoney" json:"ResultUserMoney,omitempty"` //结算信息
}

func (x *CD21_BaXianResult) Reset() {
	*x = CD21_BaXianResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_BaXianResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_BaXianResult) ProtoMessage() {}

func (x *CD21_BaXianResult) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_BaXianResult.ProtoReflect.Descriptor instead.
func (*CD21_BaXianResult) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{13}
}

func (x *CD21_BaXianResult) GetIsBlackJack() bool {
	if x != nil && x.IsBlackJack != nil {
		return *x.IsBlackJack
	}
	return false
}

func (x *CD21_BaXianResult) GetFanPai() *CD21_FanPai {
	if x != nil {
		return x.FanPai
	}
	return nil
}

func (x *CD21_BaXianResult) GetResultUserMoney() []*CD21_GameSettlement {
	if x != nil {
		return x.ResultUserMoney
	}
	return nil
}

//游戏用户赢钱结果
type CD21_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultUserMoney []*CD21_GameSettlement `protobuf:"bytes,1,rep,name=ResultUserMoney" json:"ResultUserMoney,omitempty"` //贏多少錢
}

func (x *CD21_GameResultUserMoney) Reset() {
	*x = CD21_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_GameResultUserMoney) ProtoMessage() {}

func (x *CD21_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*CD21_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{14}
}

func (x *CD21_GameResultUserMoney) GetResultUserMoney() []*CD21_GameSettlement {
	if x != nil {
		return x.ResultUserMoney
	}
	return nil
}

//玩家遊戲結算金額
type CD21_GameSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitNo     *int32           `protobuf:"varint,1,req,name=SitNo" json:"SitNo,omitempty"`         //座位號
	UserID    *int32           `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`       //座位號
	TotalWin  *int64           `protobuf:"varint,3,req,name=TotalWin" json:"TotalWin,omitempty"`   //贏多少錢
	BetResult *int64           `protobuf:"varint,4,req,name=BetResult" json:"BetResult,omitempty"` //投注结果
	Block     []*CD21_WinBlock `protobuf:"bytes,5,rep,name=Block" json:"Block,omitempty"`          //哪些區塊贏錢
}

func (x *CD21_GameSettlement) Reset() {
	*x = CD21_GameSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_GameSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_GameSettlement) ProtoMessage() {}

func (x *CD21_GameSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_GameSettlement.ProtoReflect.Descriptor instead.
func (*CD21_GameSettlement) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{15}
}

func (x *CD21_GameSettlement) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

func (x *CD21_GameSettlement) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *CD21_GameSettlement) GetTotalWin() int64 {
	if x != nil && x.TotalWin != nil {
		return *x.TotalWin
	}
	return 0
}

func (x *CD21_GameSettlement) GetBetResult() int64 {
	if x != nil && x.BetResult != nil {
		return *x.BetResult
	}
	return 0
}

func (x *CD21_GameSettlement) GetBlock() []*CD21_WinBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

//玩家贏錢區域
type CD21_WinBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfWin *int64 `protobuf:"varint,1,req,name=SelfWin" json:"SelfWin,omitempty"` //贏多少錢
	Block   *int32 `protobuf:"varint,2,req,name=Block" json:"Block,omitempty"`     //哪些區塊贏錢
}

func (x *CD21_WinBlock) Reset() {
	*x = CD21_WinBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_WinBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_WinBlock) ProtoMessage() {}

func (x *CD21_WinBlock) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_WinBlock.ProtoReflect.Descriptor instead.
func (*CD21_WinBlock) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{16}
}

func (x *CD21_WinBlock) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *CD21_WinBlock) GetBlock() int32 {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return 0
}

//21點莊家翻牌
type CD21_FanPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitPoker  []*PokerCard `protobuf:"bytes,1,rep,name=SitPoker" json:"SitPoker,omitempty"`    //發下的撲克牌
	CardTotal []int32      `protobuf:"varint,2,rep,name=CardTotal" json:"CardTotal,omitempty"` //牌點總和数组
}

func (x *CD21_FanPai) Reset() {
	*x = CD21_FanPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_FanPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_FanPai) ProtoMessage() {}

func (x *CD21_FanPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_FanPai.ProtoReflect.Descriptor instead.
func (*CD21_FanPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{17}
}

func (x *CD21_FanPai) GetSitPoker() []*PokerCard {
	if x != nil {
		return x.SitPoker
	}
	return nil
}

func (x *CD21_FanPai) GetCardTotal() []int32 {
	if x != nil {
		return x.CardTotal
	}
	return nil
}

//21點操作時間
type CD21_WaitOptSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptInfo *CD21_OptInfo `protobuf:"bytes,1,req,name=OptInfo" json:"OptInfo,omitempty"`  //座位的編號
	OptTime *int32        `protobuf:"varint,2,req,name=OptTime" json:"OptTime,omitempty"` //操作時間
}

func (x *CD21_WaitOptSeat) Reset() {
	*x = CD21_WaitOptSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_WaitOptSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_WaitOptSeat) ProtoMessage() {}

func (x *CD21_WaitOptSeat) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_WaitOptSeat.ProtoReflect.Descriptor instead.
func (*CD21_WaitOptSeat) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{18}
}

func (x *CD21_WaitOptSeat) GetOptInfo() *CD21_OptInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

func (x *CD21_WaitOptSeat) GetOptTime() int32 {
	if x != nil && x.OptTime != nil {
		return *x.OptTime
	}
	return 0
}

//用户分牌後的牌結構
type CD21_SplitCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptInfo        *CD21_OptInfo `protobuf:"bytes,1,req,name=OptInfo" json:"OptInfo,omitempty"`                //座位操作信息
	SitPoker       []*PokerCard  `protobuf:"bytes,2,rep,name=SitPoker" json:"SitPoker,omitempty"`              //發下的撲克牌
	SplitSitPoker  []*PokerCard  `protobuf:"bytes,3,rep,name=SplitSitPoker" json:"SplitSitPoker,omitempty"`    //分牌發下的撲克牌
	CardTotal      []int32       `protobuf:"varint,4,rep,name=CardTotal" json:"CardTotal,omitempty"`           //牌點總和
	SplitCardTotal []int32       `protobuf:"varint,5,rep,name=SplitCardTotal" json:"SplitCardTotal,omitempty"` //分牌後點總和
}

func (x *CD21_SplitCard) Reset() {
	*x = CD21_SplitCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_SplitCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_SplitCard) ProtoMessage() {}

func (x *CD21_SplitCard) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_SplitCard.ProtoReflect.Descriptor instead.
func (*CD21_SplitCard) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{19}
}

func (x *CD21_SplitCard) GetOptInfo() *CD21_OptInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

func (x *CD21_SplitCard) GetSitPoker() []*PokerCard {
	if x != nil {
		return x.SitPoker
	}
	return nil
}

func (x *CD21_SplitCard) GetSplitSitPoker() []*PokerCard {
	if x != nil {
		return x.SplitSitPoker
	}
	return nil
}

func (x *CD21_SplitCard) GetCardTotal() []int32 {
	if x != nil {
		return x.CardTotal
	}
	return nil
}

func (x *CD21_SplitCard) GetSplitCardTotal() []int32 {
	if x != nil {
		return x.SplitCardTotal
	}
	return nil
}

//莊家要牌廣播
type CD21_ZhuangYaoPai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitNo     *int32       `protobuf:"varint,1,req,name=SitNo" json:"SitNo,omitempty"`         //座位的編號
	SitPoker  []*PokerCard `protobuf:"bytes,2,rep,name=SitPoker" json:"SitPoker,omitempty"`    //發下的撲克牌
	CardTotal []int32      `protobuf:"varint,3,rep,name=CardTotal" json:"CardTotal,omitempty"` //牌點總和
}

func (x *CD21_ZhuangYaoPai) Reset() {
	*x = CD21_ZhuangYaoPai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_ZhuangYaoPai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_ZhuangYaoPai) ProtoMessage() {}

func (x *CD21_ZhuangYaoPai) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_ZhuangYaoPai.ProtoReflect.Descriptor instead.
func (*CD21_ZhuangYaoPai) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{20}
}

func (x *CD21_ZhuangYaoPai) GetSitNo() int32 {
	if x != nil && x.SitNo != nil {
		return *x.SitNo
	}
	return 0
}

func (x *CD21_ZhuangYaoPai) GetSitPoker() []*PokerCard {
	if x != nil {
		return x.SitPoker
	}
	return nil
}

func (x *CD21_ZhuangYaoPai) GetCardTotal() []int32 {
	if x != nil {
		return x.CardTotal
	}
	return nil
}

//其他玩家下注內容
type CD21_RecoverBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Money *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
}

func (x *CD21_RecoverBetInfo) Reset() {
	*x = CD21_RecoverBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_RecoverBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_RecoverBetInfo) ProtoMessage() {}

func (x *CD21_RecoverBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_RecoverBetInfo.ProtoReflect.Descriptor instead.
func (*CD21_RecoverBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{21}
}

func (x *CD21_RecoverBetInfo) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CD21_RecoverBetInfo) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

//准备时间
type CD21_ReadyTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadyTime *int32 `protobuf:"varint,1,req,name=ReadyTime" json:"ReadyTime,omitempty"`
}

func (x *CD21_ReadyTime) Reset() {
	*x = CD21_ReadyTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_ReadyTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_ReadyTime) ProtoMessage() {}

func (x *CD21_ReadyTime) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_ReadyTime.ProtoReflect.Descriptor instead.
func (*CD21_ReadyTime) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{22}
}

func (x *CD21_ReadyTime) GetReadyTime() int32 {
	if x != nil && x.ReadyTime != nil {
		return *x.ReadyTime
	}
	return 0
}

//牌局編號
type CD21_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *CD21_GameNoInfo) Reset() {
	*x = CD21_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_GameNoInfo) ProtoMessage() {}

func (x *CD21_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_GameNoInfo.ProtoReflect.Descriptor instead.
func (*CD21_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{23}
}

func (x *CD21_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

//状态消息
type CD21_RecoverSate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"`           //状态
	Time       *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`             //此状态的时间
	UsableTime *int32 `protobuf:"varint,3,req,name=UsableTime" json:"UsableTime,omitempty"` //此状态的剩余时间
}

func (x *CD21_RecoverSate) Reset() {
	*x = CD21_RecoverSate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_RecoverSate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_RecoverSate) ProtoMessage() {}

func (x *CD21_RecoverSate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_RecoverSate.ProtoReflect.Descriptor instead.
func (*CD21_RecoverSate) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{24}
}

func (x *CD21_RecoverSate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CD21_RecoverSate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CD21_RecoverSate) GetUsableTime() int32 {
	if x != nil && x.UsableTime != nil {
		return *x.UsableTime
	}
	return 0
}

//断线重连
type CD21_RecoverScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSate      *CD21_RecoverSate            `protobuf:"bytes,1,req,name=GameSate" json:"GameSate,omitempty"`           //游戏状态
	BetInfo       *CD21_BroadCastBetArrRecover `protobuf:"bytes,2,opt,name=BetInfo" json:"BetInfo,omitempty"`             //总下注详情
	PokerRecover  []*CD21_PokerRecover         `protobuf:"bytes,3,rep,name=PokerRecover" json:"PokerRecover,omitempty"`   //发牌信息
	InsuranceInfo *CD21_InsuranceRecover       `protobuf:"bytes,4,opt,name=InsuranceInfo" json:"InsuranceInfo,omitempty"` //投保选择
	UserOpt       *CD21_UserInfoRecover        `protobuf:"bytes,5,opt,name=UserOpt" json:"UserOpt,omitempty"`             //用户操作详情
	BaoXianResult *CD21_GameResultUserMoney    `protobuf:"bytes,6,opt,name=BaoXianResult" json:"BaoXianResult,omitempty"` //保险结算信息
	TotalResult   *CD21_GameResultUserMoney    `protobuf:"bytes,7,opt,name=TotalResult" json:"TotalResult,omitempty"`     //总结算信息
	GameNo        *CD21_GameNoInfo             `protobuf:"bytes,8,req,name=GameNo" json:"GameNo,omitempty"`               //牌局编号
}

func (x *CD21_RecoverScene) Reset() {
	*x = CD21_RecoverScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_RecoverScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_RecoverScene) ProtoMessage() {}

func (x *CD21_RecoverScene) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_RecoverScene.ProtoReflect.Descriptor instead.
func (*CD21_RecoverScene) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{25}
}

func (x *CD21_RecoverScene) GetGameSate() *CD21_RecoverSate {
	if x != nil {
		return x.GameSate
	}
	return nil
}

func (x *CD21_RecoverScene) GetBetInfo() *CD21_BroadCastBetArrRecover {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

func (x *CD21_RecoverScene) GetPokerRecover() []*CD21_PokerRecover {
	if x != nil {
		return x.PokerRecover
	}
	return nil
}

func (x *CD21_RecoverScene) GetInsuranceInfo() *CD21_InsuranceRecover {
	if x != nil {
		return x.InsuranceInfo
	}
	return nil
}

func (x *CD21_RecoverScene) GetUserOpt() *CD21_UserInfoRecover {
	if x != nil {
		return x.UserOpt
	}
	return nil
}

func (x *CD21_RecoverScene) GetBaoXianResult() *CD21_GameResultUserMoney {
	if x != nil {
		return x.BaoXianResult
	}
	return nil
}

func (x *CD21_RecoverScene) GetTotalResult() *CD21_GameResultUserMoney {
	if x != nil {
		return x.TotalResult
	}
	return nil
}

func (x *CD21_RecoverScene) GetGameNo() *CD21_GameNoInfo {
	if x != nil {
		return x.GameNo
	}
	return nil
}

//Recover:Bet
type CD21_BroadCastBetArrRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr      *CD21_BroadCastBetArr        `protobuf:"bytes,1,req,name=betArr" json:"betArr,omitempty"`           //全用户下注详情
	CompleteArr *CD21_UserCompleteArrRecover `protobuf:"bytes,2,req,name=CompleteArr" json:"CompleteArr,omitempty"` //已操作结束的用户
}

func (x *CD21_BroadCastBetArrRecover) Reset() {
	*x = CD21_BroadCastBetArrRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_BroadCastBetArrRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_BroadCastBetArrRecover) ProtoMessage() {}

func (x *CD21_BroadCastBetArrRecover) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_BroadCastBetArrRecover.ProtoReflect.Descriptor instead.
func (*CD21_BroadCastBetArrRecover) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{26}
}

func (x *CD21_BroadCastBetArrRecover) GetBetArr() *CD21_BroadCastBetArr {
	if x != nil {
		return x.BetArr
	}
	return nil
}

func (x *CD21_BroadCastBetArrRecover) GetCompleteArr() *CD21_UserCompleteArrRecover {
	if x != nil {
		return x.CompleteArr
	}
	return nil
}

//Recover:BaoXian
type CD21_InsuranceRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompleteArr *CD21_UserCompleteArrRecover `protobuf:"bytes,1,req,name=CompleteArr" json:"CompleteArr,omitempty"` //已操作结束的用户
}

func (x *CD21_InsuranceRecover) Reset() {
	*x = CD21_InsuranceRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_InsuranceRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_InsuranceRecover) ProtoMessage() {}

func (x *CD21_InsuranceRecover) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_InsuranceRecover.ProtoReflect.Descriptor instead.
func (*CD21_InsuranceRecover) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{27}
}

func (x *CD21_InsuranceRecover) GetCompleteArr() *CD21_UserCompleteArrRecover {
	if x != nil {
		return x.CompleteArr
	}
	return nil
}

type CD21_UserCompleteArrRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptInfoArr []*CD21_OptInfo `protobuf:"bytes,1,rep,name=OptInfoArr" json:"OptInfoArr,omitempty"` //已结束操作的用户信息
}

func (x *CD21_UserCompleteArrRecover) Reset() {
	*x = CD21_UserCompleteArrRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_UserCompleteArrRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_UserCompleteArrRecover) ProtoMessage() {}

func (x *CD21_UserCompleteArrRecover) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_UserCompleteArrRecover.ProtoReflect.Descriptor instead.
func (*CD21_UserCompleteArrRecover) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{28}
}

func (x *CD21_UserCompleteArrRecover) GetOptInfoArr() []*CD21_OptInfo {
	if x != nil {
		return x.OptInfoArr
	}
	return nil
}

//Recover:MainProgress
type CD21_UserInfoRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrOpt   *CD21_WaitOptSeat `protobuf:"bytes,1,req,name=CurrOpt" json:"CurrOpt,omitempty"`      //当前操作用户的信息
	TotalTime *int32            `protobuf:"varint,2,req,name=TotalTime" json:"TotalTime,omitempty"` //完整時間
	OptInfo   *CD21_UserInfo    `protobuf:"bytes,3,opt,name=OptInfo" json:"OptInfo,omitempty"`      //重连用户操作信息
}

func (x *CD21_UserInfoRecover) Reset() {
	*x = CD21_UserInfoRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_UserInfoRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_UserInfoRecover) ProtoMessage() {}

func (x *CD21_UserInfoRecover) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_UserInfoRecover.ProtoReflect.Descriptor instead.
func (*CD21_UserInfoRecover) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{29}
}

func (x *CD21_UserInfoRecover) GetCurrOpt() *CD21_WaitOptSeat {
	if x != nil {
		return x.CurrOpt
	}
	return nil
}

func (x *CD21_UserInfoRecover) GetTotalTime() int32 {
	if x != nil && x.TotalTime != nil {
		return *x.TotalTime
	}
	return 0
}

func (x *CD21_UserInfoRecover) GetOptInfo() *CD21_UserInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

//玩家的牌
type CD21_PokerRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SitPoker  []*PokerCard  `protobuf:"bytes,1,rep,name=SitPoker" json:"SitPoker,omitempty"`
	CardTotal []int32       `protobuf:"varint,2,rep,name=CardTotal" json:"CardTotal,omitempty"`
	Double    *bool         `protobuf:"varint,3,req,name=Double" json:"Double,omitempty"`
	OptInfo   *CD21_OptInfo `protobuf:"bytes,4,req,name=OptInfo" json:"OptInfo,omitempty"`
}

func (x *CD21_PokerRecover) Reset() {
	*x = CD21_PokerRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_CD21_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CD21_PokerRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CD21_PokerRecover) ProtoMessage() {}

func (x *CD21_PokerRecover) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_CD21_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CD21_PokerRecover.ProtoReflect.Descriptor instead.
func (*CD21_PokerRecover) Descriptor() ([]byte, []int) {
	return file_GameMsg_CD21_proto_rawDescGZIP(), []int{30}
}

func (x *CD21_PokerRecover) GetSitPoker() []*PokerCard {
	if x != nil {
		return x.SitPoker
	}
	return nil
}

func (x *CD21_PokerRecover) GetCardTotal() []int32 {
	if x != nil {
		return x.CardTotal
	}
	return nil
}

func (x *CD21_PokerRecover) GetDouble() bool {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return false
}

func (x *CD21_PokerRecover) GetOptInfo() *CD21_OptInfo {
	if x != nil {
		return x.OptInfo
	}
	return nil
}

var File_GameMsg_CD21_proto protoreflect.FileDescriptor

var file_GameMsg_CD21_proto_rawDesc = []byte{
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x44, 0x32, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a,
	0x0c, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x35, 0x0a, 0x09, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x53, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x08, 0x43, 0x44,
	0x32, 0x31, 0x5f, 0x42, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x69, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74,
	0x4e, 0x6f, 0x22, 0x63, 0x0a, 0x0b, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x42, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x07,
	0x42, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x43, 0x44, 0x32, 0x31,
	0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32,
	0x31, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x0f,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x41, 0x72, 0x72, 0x22, 0x6f, 0x0a, 0x11, 0x43,
	0x44, 0x32, 0x31, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a, 0x0a,
	0x43, 0x44, 0x32, 0x31, 0x5f, 0x46, 0x61, 0x70, 0x61, 0x69, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x79, 0x0a, 0x10, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x69,
	0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x12, 0x43,
	0x44, 0x32, 0x31, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x43, 0x44,
	0x32, 0x31, 0x5f, 0x59, 0x61, 0x6f, 0x70, 0x61, 0x69, 0x12, 0x30, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x53,
	0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x78, 0x0a, 0x0e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc5, 0x01, 0x0a,
	0x0d, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f,
	0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x48, 0x69, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x48,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x75, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x42, 0x75, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x0c, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xad, 0x01, 0x0a,
	0x11, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x42, 0x61, 0x58, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4a, 0x61, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x06, 0x46, 0x61, 0x6e, 0x50, 0x61, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x44, 0x32, 0x31, 0x5f, 0x46, 0x61, 0x6e, 0x50, 0x61, 0x69, 0x52, 0x06, 0x46, 0x61, 0x6e,
	0x50, 0x61, 0x69, 0x12, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x63, 0x0a, 0x18,
	0x43, 0x44, 0x32, 0x31, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32,
	0x31, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x74,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31,
	0x5f, 0x57, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x3f, 0x0a, 0x0d, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x57, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x5c, 0x0a, 0x0b, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x46, 0x61, 0x6e, 0x50, 0x61, 0x69,
	0x12, 0x2f, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x5e, 0x0a, 0x10, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xf4, 0x01, 0x0a, 0x0e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4f, 0x70, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x53, 0x69, 0x74,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x69,
	0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x78, 0x0a, 0x11, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x59, 0x61, 0x6f, 0x50, 0x61, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x69, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x74, 0x4e,
	0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x3f, 0x0a, 0x13, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x22, 0x2e, 0x0a, 0x0e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x22, 0x5c, 0x0a, 0x10,
	0x43, 0x44, 0x32, 0x31, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x04, 0x0a, 0x11, 0x43,
	0x44, 0x32, 0x31, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44,
	0x32, 0x31, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x49, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32,
	0x31, 0x5f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44,
	0x32, 0x31, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x42,
	0x61, 0x6f, 0x58, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44,
	0x32, 0x31, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x42, 0x61, 0x6f, 0x58, 0x69, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x22, 0x9e,
	0x01, 0x0a, 0x1b, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x06, 0x62, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x52, 0x06,
	0x62, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x22,
	0x60, 0x0a, 0x15, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72,
	0x72, 0x22, 0x55, 0x0a, 0x1b, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4f, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x43, 0x44, 0x32,
	0x31, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44,
	0x32, 0x31, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x61, 0x74, 0x52, 0x07,
	0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x43, 0x44, 0x32,
	0x31, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x53, 0x69, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x44, 0x32, 0x31, 0x5f, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x4f, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_CD21_proto_rawDescOnce sync.Once
	file_GameMsg_CD21_proto_rawDescData = file_GameMsg_CD21_proto_rawDesc
)

func file_GameMsg_CD21_proto_rawDescGZIP() []byte {
	file_GameMsg_CD21_proto_rawDescOnce.Do(func() {
		file_GameMsg_CD21_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_CD21_proto_rawDescData)
	})
	return file_GameMsg_CD21_proto_rawDescData
}

var file_GameMsg_CD21_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_GameMsg_CD21_proto_goTypes = []interface{}{
	(*CD21_Setting)(nil),                // 0: netproto.CD21_Setting
	(*CD21_Sate)(nil),                   // 1: netproto.CD21_Sate
	(*CD21_Bet)(nil),                    // 2: netproto.CD21_Bet
	(*CD21_BetRet)(nil),                 // 3: netproto.CD21_BetRet
	(*CD21_BroadCastBetArr)(nil),        // 4: netproto.CD21_BroadCastBetArr
	(*CD21_BroadCastBet)(nil),           // 5: netproto.CD21_BroadCastBet
	(*CD21_Fapai)(nil),                  // 6: netproto.CD21_Fapai
	(*CD21CardContent)(nil),             // 7: netproto.CD21_cardContent
	(*CD21_StopOperation)(nil),          // 8: netproto.CD21_StopOperation
	(*CD21_Yaopai)(nil),                 // 9: netproto.CD21_Yaopai
	(*CD21_UserCheck)(nil),              // 10: netproto.CD21_UserCheck
	(*CD21_UserInfo)(nil),               // 11: netproto.CD21_UserInfo
	(*CD21_OptInfo)(nil),                // 12: netproto.CD21_OptInfo
	(*CD21_BaXianResult)(nil),           // 13: netproto.CD21_BaXianResult
	(*CD21_GameResultUserMoney)(nil),    // 14: netproto.CD21_GameResultUserMoney
	(*CD21_GameSettlement)(nil),         // 15: netproto.CD21_GameSettlement
	(*CD21_WinBlock)(nil),               // 16: netproto.CD21_WinBlock
	(*CD21_FanPai)(nil),                 // 17: netproto.CD21_FanPai
	(*CD21_WaitOptSeat)(nil),            // 18: netproto.CD21_WaitOptSeat
	(*CD21_SplitCard)(nil),              // 19: netproto.CD21_SplitCard
	(*CD21_ZhuangYaoPai)(nil),           // 20: netproto.CD21_ZhuangYaoPai
	(*CD21_RecoverBetInfo)(nil),         // 21: netproto.CD21_RecoverBetInfo
	(*CD21_ReadyTime)(nil),              // 22: netproto.CD21_ReadyTime
	(*CD21_GameNoInfo)(nil),             // 23: netproto.CD21_GameNoInfo
	(*CD21_RecoverSate)(nil),            // 24: netproto.CD21_RecoverSate
	(*CD21_RecoverScene)(nil),           // 25: netproto.CD21_RecoverScene
	(*CD21_BroadCastBetArrRecover)(nil), // 26: netproto.CD21_BroadCastBetArrRecover
	(*CD21_InsuranceRecover)(nil),       // 27: netproto.CD21_InsuranceRecover
	(*CD21_UserCompleteArrRecover)(nil), // 28: netproto.CD21_UserCompleteArrRecover
	(*CD21_UserInfoRecover)(nil),        // 29: netproto.CD21_UserInfoRecover
	(*CD21_PokerRecover)(nil),           // 30: netproto.CD21_PokerRecover
	(*PokerCard)(nil),                   // 31: netproto.PokerCard
}
var file_GameMsg_CD21_proto_depIdxs = []int32{
	2,  // 0: netproto.CD21_BetRet.BetData:type_name -> netproto.CD21_Bet
	5,  // 1: netproto.CD21_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.CD21_BroadCastBet
	12, // 2: netproto.CD21_BroadCastBet.OptInfo:type_name -> netproto.CD21_OptInfo
	7,  // 3: netproto.CD21_Fapai.Content:type_name -> netproto.CD21_cardContent
	31, // 4: netproto.CD21_cardContent.SitPoker:type_name -> netproto.PokerCard
	12, // 5: netproto.CD21_Yaopai.OptInfo:type_name -> netproto.CD21_OptInfo
	31, // 6: netproto.CD21_Yaopai.SitPoker:type_name -> netproto.PokerCard
	12, // 7: netproto.CD21_UserCheck.OptInfo:type_name -> netproto.CD21_OptInfo
	12, // 8: netproto.CD21_UserInfo.OptInfo:type_name -> netproto.CD21_OptInfo
	17, // 9: netproto.CD21_BaXianResult.FanPai:type_name -> netproto.CD21_FanPai
	15, // 10: netproto.CD21_BaXianResult.ResultUserMoney:type_name -> netproto.CD21_GameSettlement
	15, // 11: netproto.CD21_GameResultUserMoney.ResultUserMoney:type_name -> netproto.CD21_GameSettlement
	16, // 12: netproto.CD21_GameSettlement.Block:type_name -> netproto.CD21_WinBlock
	31, // 13: netproto.CD21_FanPai.SitPoker:type_name -> netproto.PokerCard
	12, // 14: netproto.CD21_WaitOptSeat.OptInfo:type_name -> netproto.CD21_OptInfo
	12, // 15: netproto.CD21_SplitCard.OptInfo:type_name -> netproto.CD21_OptInfo
	31, // 16: netproto.CD21_SplitCard.SitPoker:type_name -> netproto.PokerCard
	31, // 17: netproto.CD21_SplitCard.SplitSitPoker:type_name -> netproto.PokerCard
	31, // 18: netproto.CD21_ZhuangYaoPai.SitPoker:type_name -> netproto.PokerCard
	24, // 19: netproto.CD21_RecoverScene.GameSate:type_name -> netproto.CD21_RecoverSate
	26, // 20: netproto.CD21_RecoverScene.BetInfo:type_name -> netproto.CD21_BroadCastBetArrRecover
	30, // 21: netproto.CD21_RecoverScene.PokerRecover:type_name -> netproto.CD21_PokerRecover
	27, // 22: netproto.CD21_RecoverScene.InsuranceInfo:type_name -> netproto.CD21_InsuranceRecover
	29, // 23: netproto.CD21_RecoverScene.UserOpt:type_name -> netproto.CD21_UserInfoRecover
	14, // 24: netproto.CD21_RecoverScene.BaoXianResult:type_name -> netproto.CD21_GameResultUserMoney
	14, // 25: netproto.CD21_RecoverScene.TotalResult:type_name -> netproto.CD21_GameResultUserMoney
	23, // 26: netproto.CD21_RecoverScene.GameNo:type_name -> netproto.CD21_GameNoInfo
	4,  // 27: netproto.CD21_BroadCastBetArrRecover.betArr:type_name -> netproto.CD21_BroadCastBetArr
	28, // 28: netproto.CD21_BroadCastBetArrRecover.CompleteArr:type_name -> netproto.CD21_UserCompleteArrRecover
	28, // 29: netproto.CD21_InsuranceRecover.CompleteArr:type_name -> netproto.CD21_UserCompleteArrRecover
	12, // 30: netproto.CD21_UserCompleteArrRecover.OptInfoArr:type_name -> netproto.CD21_OptInfo
	18, // 31: netproto.CD21_UserInfoRecover.CurrOpt:type_name -> netproto.CD21_WaitOptSeat
	11, // 32: netproto.CD21_UserInfoRecover.OptInfo:type_name -> netproto.CD21_UserInfo
	31, // 33: netproto.CD21_PokerRecover.SitPoker:type_name -> netproto.PokerCard
	12, // 34: netproto.CD21_PokerRecover.OptInfo:type_name -> netproto.CD21_OptInfo
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_GameMsg_CD21_proto_init() }
func file_GameMsg_CD21_proto_init() {
	if File_GameMsg_CD21_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_CD21_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_Fapai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21CardContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_StopOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_Yaopai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_UserCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_OptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_BaXianResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_GameSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_WinBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_FanPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_WaitOptSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_SplitCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_ZhuangYaoPai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_RecoverBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_ReadyTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_RecoverSate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_RecoverScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_BroadCastBetArrRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_InsuranceRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_UserCompleteArrRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_UserInfoRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_CD21_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CD21_PokerRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_CD21_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_CD21_proto_goTypes,
		DependencyIndexes: file_GameMsg_CD21_proto_depIdxs,
		MessageInfos:      file_GameMsg_CD21_proto_msgTypes,
	}.Build()
	File_GameMsg_CD21_proto = out.File
	file_GameMsg_CD21_proto_rawDesc = nil
	file_GameMsg_CD21_proto_goTypes = nil
	file_GameMsg_CD21_proto_depIdxs = nil
}
