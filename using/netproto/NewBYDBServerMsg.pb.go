// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: NewBYDBServerMsg.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//捕魚大玩咖登入
type UserLoginFishMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID  *int32  `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`
	UserID    *int32  `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`
	IPAddress *string `protobuf:"bytes,3,req,name=IPAddress" json:"IPAddress,omitempty"`
	Cer       *string `protobuf:"bytes,4,req,name=Cer" json:"Cer,omitempty"`
	HDType    *int32  `protobuf:"varint,5,req,name=HDType" json:"HDType,omitempty"`
	HDCode    *string `protobuf:"bytes,6,req,name=HDCode" json:"HDCode,omitempty"`
}

func (x *UserLoginFishMsg) Reset() {
	*x = UserLoginFishMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NewBYDBServerMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginFishMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginFishMsg) ProtoMessage() {}

func (x *UserLoginFishMsg) ProtoReflect() protoreflect.Message {
	mi := &file_NewBYDBServerMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginFishMsg.ProtoReflect.Descriptor instead.
func (*UserLoginFishMsg) Descriptor() ([]byte, []int) {
	return file_NewBYDBServerMsg_proto_rawDescGZIP(), []int{0}
}

func (x *UserLoginFishMsg) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *UserLoginFishMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLoginFishMsg) GetIPAddress() string {
	if x != nil && x.IPAddress != nil {
		return *x.IPAddress
	}
	return ""
}

func (x *UserLoginFishMsg) GetCer() string {
	if x != nil && x.Cer != nil {
		return *x.Cer
	}
	return ""
}

func (x *UserLoginFishMsg) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *UserLoginFishMsg) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

//捕鱼登入成功回传
type UserLoginFishRetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	UserType     *int32  `protobuf:"varint,2,req,name=UserType" json:"UserType,omitempty"`
	NickName     *string `protobuf:"bytes,3,req,name=NickName" json:"NickName,omitempty"`
	FaceID       *int32  `protobuf:"varint,4,req,name=FaceID" json:"FaceID,omitempty"`
	Sex          *int32  `protobuf:"varint,5,req,name=Sex" json:"Sex,omitempty"`
	CashAmount   *int64  `protobuf:"varint,6,req,name=CashAmount" json:"CashAmount,omitempty"`
	CouponAmount *int64  `protobuf:"varint,7,req,name=CouponAmount" json:"CouponAmount,omitempty"`
	TotalScore   *int64  `protobuf:"varint,8,req,name=TotalScore" json:"TotalScore,omitempty"`
	WinCount     *int32  `protobuf:"varint,9,req,name=WinCount" json:"WinCount,omitempty"`
	LostCount    *int32  `protobuf:"varint,10,req,name=LostCount" json:"LostCount,omitempty"`
	DrawCount    *int32  `protobuf:"varint,11,req,name=DrawCount" json:"DrawCount,omitempty"`
	IsOffLine    *int32  `protobuf:"varint,12,req,name=IsOffLine" json:"IsOffLine,omitempty"`
	ServerAddr   *string `protobuf:"bytes,13,req,name=ServerAddr" json:"ServerAddr,omitempty"`
	GameBuff     *string `protobuf:"bytes,14,req,name=GameBuff" json:"GameBuff,omitempty"`
	TotalCharge  *int64  `protobuf:"varint,15,req,name=TotalCharge" json:"TotalCharge,omitempty"`
	TradeID      *int64  `protobuf:"varint,16,req,name=TradeID" json:"TradeID,omitempty"`
}

func (x *UserLoginFishRetMsg) Reset() {
	*x = UserLoginFishRetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NewBYDBServerMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginFishRetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginFishRetMsg) ProtoMessage() {}

func (x *UserLoginFishRetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_NewBYDBServerMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginFishRetMsg.ProtoReflect.Descriptor instead.
func (*UserLoginFishRetMsg) Descriptor() ([]byte, []int) {
	return file_NewBYDBServerMsg_proto_rawDescGZIP(), []int{1}
}

func (x *UserLoginFishRetMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetUserType() int32 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *UserLoginFishRetMsg) GetFaceID() int32 {
	if x != nil && x.FaceID != nil {
		return *x.FaceID
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetCashAmount() int64 {
	if x != nil && x.CashAmount != nil {
		return *x.CashAmount
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetCouponAmount() int64 {
	if x != nil && x.CouponAmount != nil {
		return *x.CouponAmount
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetTotalScore() int64 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetWinCount() int32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetLostCount() int32 {
	if x != nil && x.LostCount != nil {
		return *x.LostCount
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetDrawCount() int32 {
	if x != nil && x.DrawCount != nil {
		return *x.DrawCount
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetIsOffLine() int32 {
	if x != nil && x.IsOffLine != nil {
		return *x.IsOffLine
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetServerAddr() string {
	if x != nil && x.ServerAddr != nil {
		return *x.ServerAddr
	}
	return ""
}

func (x *UserLoginFishRetMsg) GetGameBuff() string {
	if x != nil && x.GameBuff != nil {
		return *x.GameBuff
	}
	return ""
}

func (x *UserLoginFishRetMsg) GetTotalCharge() int64 {
	if x != nil && x.TotalCharge != nil {
		return *x.TotalCharge
	}
	return 0
}

func (x *UserLoginFishRetMsg) GetTradeID() int64 {
	if x != nil && x.TradeID != nil {
		return *x.TradeID
	}
	return 0
}

type NewByDBRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	ChvMsg *string `protobuf:"bytes,2,req,name=ChvMsg" json:"ChvMsg,omitempty"`
}

func (x *NewByDBRegMsg) Reset() {
	*x = NewByDBRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NewBYDBServerMsg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewByDBRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewByDBRegMsg) ProtoMessage() {}

func (x *NewByDBRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_NewBYDBServerMsg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewByDBRegMsg.ProtoReflect.Descriptor instead.
func (*NewByDBRegMsg) Descriptor() ([]byte, []int) {
	return file_NewBYDBServerMsg_proto_rawDescGZIP(), []int{2}
}

func (x *NewByDBRegMsg) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *NewByDBRegMsg) GetChvMsg() string {
	if x != nil && x.ChvMsg != nil {
		return *x.ChvMsg
	}
	return ""
}

//捕魚更新分數
type UpdateUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID        *int32 `protobuf:"varint,1,req,name=MsgID" json:"MsgID,omitempty"`
	UserID       *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`
	UpdateAmount *int32 `protobuf:"varint,3,req,name=UpdateAmount" json:"UpdateAmount,omitempty"`
	TaxAmount    *int32 `protobuf:"varint,4,req,name=TaxAmount" json:"TaxAmount,omitempty"`
	ServerID     *int32 `protobuf:"varint,5,req,name=ServerID" json:"ServerID,omitempty"`
	CouponAmount *int32 `protobuf:"varint,6,opt,name=CouponAmount" json:"CouponAmount,omitempty"`
}

func (x *UpdateUserMoney) Reset() {
	*x = UpdateUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NewBYDBServerMsg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMoney) ProtoMessage() {}

func (x *UpdateUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_NewBYDBServerMsg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMoney.ProtoReflect.Descriptor instead.
func (*UpdateUserMoney) Descriptor() ([]byte, []int) {
	return file_NewBYDBServerMsg_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserMoney) GetMsgID() int32 {
	if x != nil && x.MsgID != nil {
		return *x.MsgID
	}
	return 0
}

func (x *UpdateUserMoney) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UpdateUserMoney) GetUpdateAmount() int32 {
	if x != nil && x.UpdateAmount != nil {
		return *x.UpdateAmount
	}
	return 0
}

func (x *UpdateUserMoney) GetTaxAmount() int32 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *UpdateUserMoney) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *UpdateUserMoney) GetCouponAmount() int32 {
	if x != nil && x.CouponAmount != nil {
		return *x.CouponAmount
	}
	return 0
}

//啟動捕魚程序
type NewBYServerStartMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID     *int32  `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	ServerName *string `protobuf:"bytes,2,req,name=ServerName" json:"ServerName,omitempty"`
	ShowName   *string `protobuf:"bytes,3,req,name=ShowName" json:"ShowName,omitempty"`
	ClientAddr *string `protobuf:"bytes,4,req,name=ClientAddr" json:"ClientAddr,omitempty"`
	NotifyAddr *string `protobuf:"bytes,5,req,name=NotifyAddr" json:"NotifyAddr,omitempty"`
	HttpAddr   *string `protobuf:"bytes,6,req,name=HttpAddr" json:"HttpAddr,omitempty"`
	LoginMoney *int32  `protobuf:"varint,7,req,name=LoginMoney" json:"LoginMoney,omitempty"`
	ServerID   *int32  `protobuf:"varint,8,req,name=ServerID" json:"ServerID,omitempty"`
}

func (x *NewBYServerStartMsg) Reset() {
	*x = NewBYServerStartMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NewBYDBServerMsg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBYServerStartMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBYServerStartMsg) ProtoMessage() {}

func (x *NewBYServerStartMsg) ProtoReflect() protoreflect.Message {
	mi := &file_NewBYDBServerMsg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBYServerStartMsg.ProtoReflect.Descriptor instead.
func (*NewBYServerStartMsg) Descriptor() ([]byte, []int) {
	return file_NewBYDBServerMsg_proto_rawDescGZIP(), []int{4}
}

func (x *NewBYServerStartMsg) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *NewBYServerStartMsg) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *NewBYServerStartMsg) GetShowName() string {
	if x != nil && x.ShowName != nil {
		return *x.ShowName
	}
	return ""
}

func (x *NewBYServerStartMsg) GetClientAddr() string {
	if x != nil && x.ClientAddr != nil {
		return *x.ClientAddr
	}
	return ""
}

func (x *NewBYServerStartMsg) GetNotifyAddr() string {
	if x != nil && x.NotifyAddr != nil {
		return *x.NotifyAddr
	}
	return ""
}

func (x *NewBYServerStartMsg) GetHttpAddr() string {
	if x != nil && x.HttpAddr != nil {
		return *x.HttpAddr
	}
	return ""
}

func (x *NewBYServerStartMsg) GetLoginMoney() int32 {
	if x != nil && x.LoginMoney != nil {
		return *x.LoginMoney
	}
	return 0
}

func (x *NewBYServerStartMsg) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

//捕魚監控
type SuperToolFishVIPUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID         *int32 `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	UserID         *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`
	CompleteAmount *int32 `protobuf:"varint,3,req,name=CompleteAmount" json:"CompleteAmount,omitempty"`
}

func (x *SuperToolFishVIPUserMsg) Reset() {
	*x = SuperToolFishVIPUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NewBYDBServerMsg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperToolFishVIPUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperToolFishVIPUserMsg) ProtoMessage() {}

func (x *SuperToolFishVIPUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_NewBYDBServerMsg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperToolFishVIPUserMsg.ProtoReflect.Descriptor instead.
func (*SuperToolFishVIPUserMsg) Descriptor() ([]byte, []int) {
	return file_NewBYDBServerMsg_proto_rawDescGZIP(), []int{5}
}

func (x *SuperToolFishVIPUserMsg) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *SuperToolFishVIPUserMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *SuperToolFishVIPUserMsg) GetCompleteAmount() int32 {
	if x != nil && x.CompleteAmount != nil {
		return *x.CompleteAmount
	}
	return 0
}

//捕魚登出
type UserLogoutFishMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID           *int32  `protobuf:"varint,1,req,name=MsgID" json:"MsgID,omitempty"`
	UserID          *int32  `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`
	UpdateAmount    *int32  `protobuf:"varint,3,req,name=UpdateAmount" json:"UpdateAmount,omitempty"`
	TaxAmount       *int32  `protobuf:"varint,4,req,name=TaxAmount" json:"TaxAmount,omitempty"`
	FlowAmount      *int32  `protobuf:"varint,5,req,name=FlowAmount" json:"FlowAmount,omitempty"`
	WinCount        *int32  `protobuf:"varint,6,req,name=WinCount" json:"WinCount,omitempty"`
	LoseCount       *int32  `protobuf:"varint,7,req,name=LoseCount" json:"LoseCount,omitempty"`
	DrawCount       *int32  `protobuf:"varint,8,req,name=DrawCount" json:"DrawCount,omitempty"`
	LoginTime       *string `protobuf:"bytes,9,req,name=LoginTime" json:"LoginTime,omitempty"`
	LogoutTime      *string `protobuf:"bytes,10,req,name=LogoutTime" json:"LogoutTime,omitempty"`
	IPAddress       *string `protobuf:"bytes,11,req,name=IPAddress" json:"IPAddress,omitempty"`
	HDType          *int32  `protobuf:"varint,12,req,name=HDType" json:"HDType,omitempty"`
	HDCode          *string `protobuf:"bytes,13,req,name=HDCode" json:"HDCode,omitempty"`
	GameTime        *int32  `protobuf:"varint,14,req,name=GameTime" json:"GameTime,omitempty"`
	GameID          *int32  `protobuf:"varint,15,req,name=GameID" json:"GameID,omitempty"`
	ServerID        *int32  `protobuf:"varint,16,req,name=ServerID" json:"ServerID,omitempty"`
	LoginMoney      *int64  `protobuf:"varint,17,req,name=LoginMoney" json:"LoginMoney,omitempty"`
	ScoreUpdateMode *int32  `protobuf:"varint,18,req,name=ScoreUpdateMode" json:"ScoreUpdateMode,omitempty"`
	TradeID         *int64  `protobuf:"varint,19,req,name=TradeID" json:"TradeID,omitempty"`
	LastWinLose     *int32  `protobuf:"varint,20,req,name=LastWinLose" json:"LastWinLose,omitempty"`
	CouponAmount    *int32  `protobuf:"varint,21,opt,name=CouponAmount" json:"CouponAmount,omitempty"`
}

func (x *UserLogoutFishMsg) Reset() {
	*x = UserLogoutFishMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NewBYDBServerMsg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogoutFishMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogoutFishMsg) ProtoMessage() {}

func (x *UserLogoutFishMsg) ProtoReflect() protoreflect.Message {
	mi := &file_NewBYDBServerMsg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogoutFishMsg.ProtoReflect.Descriptor instead.
func (*UserLogoutFishMsg) Descriptor() ([]byte, []int) {
	return file_NewBYDBServerMsg_proto_rawDescGZIP(), []int{6}
}

func (x *UserLogoutFishMsg) GetMsgID() int32 {
	if x != nil && x.MsgID != nil {
		return *x.MsgID
	}
	return 0
}

func (x *UserLogoutFishMsg) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLogoutFishMsg) GetUpdateAmount() int32 {
	if x != nil && x.UpdateAmount != nil {
		return *x.UpdateAmount
	}
	return 0
}

func (x *UserLogoutFishMsg) GetTaxAmount() int32 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *UserLogoutFishMsg) GetFlowAmount() int32 {
	if x != nil && x.FlowAmount != nil {
		return *x.FlowAmount
	}
	return 0
}

func (x *UserLogoutFishMsg) GetWinCount() int32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *UserLogoutFishMsg) GetLoseCount() int32 {
	if x != nil && x.LoseCount != nil {
		return *x.LoseCount
	}
	return 0
}

func (x *UserLogoutFishMsg) GetDrawCount() int32 {
	if x != nil && x.DrawCount != nil {
		return *x.DrawCount
	}
	return 0
}

func (x *UserLogoutFishMsg) GetLoginTime() string {
	if x != nil && x.LoginTime != nil {
		return *x.LoginTime
	}
	return ""
}

func (x *UserLogoutFishMsg) GetLogoutTime() string {
	if x != nil && x.LogoutTime != nil {
		return *x.LogoutTime
	}
	return ""
}

func (x *UserLogoutFishMsg) GetIPAddress() string {
	if x != nil && x.IPAddress != nil {
		return *x.IPAddress
	}
	return ""
}

func (x *UserLogoutFishMsg) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *UserLogoutFishMsg) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *UserLogoutFishMsg) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *UserLogoutFishMsg) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *UserLogoutFishMsg) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *UserLogoutFishMsg) GetLoginMoney() int64 {
	if x != nil && x.LoginMoney != nil {
		return *x.LoginMoney
	}
	return 0
}

func (x *UserLogoutFishMsg) GetScoreUpdateMode() int32 {
	if x != nil && x.ScoreUpdateMode != nil {
		return *x.ScoreUpdateMode
	}
	return 0
}

func (x *UserLogoutFishMsg) GetTradeID() int64 {
	if x != nil && x.TradeID != nil {
		return *x.TradeID
	}
	return 0
}

func (x *UserLogoutFishMsg) GetLastWinLose() int32 {
	if x != nil && x.LastWinLose != nil {
		return *x.LastWinLose
	}
	return 0
}

func (x *UserLogoutFishMsg) GetCouponAmount() int32 {
	if x != nil && x.CouponAmount != nil {
		return *x.CouponAmount
	}
	return 0
}

var File_NewBYDBServerMsg_proto protoreflect.FileDescriptor

var file_NewBYDBServerMsg_proto_rawDesc = []byte{
	0x0a, 0x16, 0x4e, 0x65, 0x77, 0x42, 0x59, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x43, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x48, 0x44, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4f,
	0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73,
	0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x10, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x22,
	0x3b, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x42, 0x79, 0x44, 0x42, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x76, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x76, 0x4d, 0x73, 0x67, 0x22, 0xc1, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x81, 0x02, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x42, 0x59, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x17, 0x53, 0x75, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6f,
	0x6c, 0x46, 0x69, 0x73, 0x68, 0x56, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x05, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x10, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x11, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x13, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e,
	0x4c, 0x6f, 0x73, 0x65, 0x18, 0x14, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_NewBYDBServerMsg_proto_rawDescOnce sync.Once
	file_NewBYDBServerMsg_proto_rawDescData = file_NewBYDBServerMsg_proto_rawDesc
)

func file_NewBYDBServerMsg_proto_rawDescGZIP() []byte {
	file_NewBYDBServerMsg_proto_rawDescOnce.Do(func() {
		file_NewBYDBServerMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_NewBYDBServerMsg_proto_rawDescData)
	})
	return file_NewBYDBServerMsg_proto_rawDescData
}

var file_NewBYDBServerMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_NewBYDBServerMsg_proto_goTypes = []interface{}{
	(*UserLoginFishMsg)(nil),        // 0: netproto.UserLoginFishMsg
	(*UserLoginFishRetMsg)(nil),     // 1: netproto.UserLoginFishRetMsg
	(*NewByDBRegMsg)(nil),           // 2: netproto.NewByDBRegMsg
	(*UpdateUserMoney)(nil),         // 3: netproto.UpdateUserMoney
	(*NewBYServerStartMsg)(nil),     // 4: netproto.NewBYServerStartMsg
	(*SuperToolFishVIPUserMsg)(nil), // 5: netproto.SuperToolFishVIPUserMsg
	(*UserLogoutFishMsg)(nil),       // 6: netproto.UserLogoutFishMsg
}
var file_NewBYDBServerMsg_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_NewBYDBServerMsg_proto_init() }
func file_NewBYDBServerMsg_proto_init() {
	if File_NewBYDBServerMsg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_NewBYDBServerMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginFishMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NewBYDBServerMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginFishRetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NewBYDBServerMsg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewByDBRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NewBYDBServerMsg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NewBYDBServerMsg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBYServerStartMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NewBYDBServerMsg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperToolFishVIPUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NewBYDBServerMsg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogoutFishMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NewBYDBServerMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_NewBYDBServerMsg_proto_goTypes,
		DependencyIndexes: file_NewBYDBServerMsg_proto_depIdxs,
		MessageInfos:      file_NewBYDBServerMsg_proto_msgTypes,
	}.Build()
	File_NewBYDBServerMsg_proto = out.File
	file_NewBYDBServerMsg_proto_rawDesc = nil
	file_NewBYDBServerMsg_proto_goTypes = nil
	file_NewBYDBServerMsg_proto_depIdxs = nil
}
