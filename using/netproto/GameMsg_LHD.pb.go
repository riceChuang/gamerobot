// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: GameMsg_LHD.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//下注设置
type LHD_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCount    []int32           `protobuf:"varint,1,rep,name=BetCount" json:"BetCount,omitempty"`       //一次下注的数量
	BetMoney    *int32            `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`       //一次下注的钱
	ZhuangLimit *int64            `protobuf:"varint,3,req,name=ZhuangLimit" json:"ZhuangLimit,omitempty"` //上庄钱限制
	BetRange    *LHD_BetRangeList `protobuf:"bytes,4,req,name=BetRange" json:"BetRange,omitempty"`        //個人下注上下限紅
}

func (x *LHD_Setting) Reset() {
	*x = LHD_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Setting) ProtoMessage() {}

func (x *LHD_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Setting.ProtoReflect.Descriptor instead.
func (*LHD_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{0}
}

func (x *LHD_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *LHD_Setting) GetBetMoney() int32 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *LHD_Setting) GetZhuangLimit() int64 {
	if x != nil && x.ZhuangLimit != nil {
		return *x.ZhuangLimit
	}
	return 0
}

func (x *LHD_Setting) GetBetRange() *LHD_BetRangeList {
	if x != nil {
		return x.BetRange
	}
	return nil
}

//状态消息
type LHD_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"` //状态
	Time  *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`   //此状态的剩余时间
}

func (x *LHD_Sate) Reset() {
	*x = LHD_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Sate) ProtoMessage() {}

func (x *LHD_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Sate.ProtoReflect.Descriptor instead.
func (*LHD_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{1}
}

func (x *LHD_Sate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *LHD_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用户断线重连下注消息
type LHD_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMoney *int64              `protobuf:"varint,1,req,name=UserMoney" json:"UserMoney,omitempty"`
	BetInfo   []*LHD_BroadCastBet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *LHD_UserBetInfo) Reset() {
	*x = LHD_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_UserBetInfo) ProtoMessage() {}

func (x *LHD_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_UserBetInfo.ProtoReflect.Descriptor instead.
func (*LHD_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{2}
}

func (x *LHD_UserBetInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *LHD_UserBetInfo) GetBetInfo() []*LHD_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//广播用户下注的数组
type LHD_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32              `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*LHD_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
}

func (x *LHD_BroadCastBetArr) Reset() {
	*x = LHD_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BroadCastBetArr) ProtoMessage() {}

func (x *LHD_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*LHD_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{3}
}

func (x *LHD_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_BroadCastBetArr) GetBroadCastBetArr() []*LHD_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

//广播用户下注内容数据结构
type LHD_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Money     *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
	LuckyStar *bool  `protobuf:"varint,3,req,name=LuckyStar" json:"LuckyStar,omitempty"`
}

func (x *LHD_BroadCastBet) Reset() {
	*x = LHD_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BroadCastBet) ProtoMessage() {}

func (x *LHD_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BroadCastBet.ProtoReflect.Descriptor instead.
func (*LHD_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{4}
}

func (x *LHD_BroadCastBet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LHD_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *LHD_BroadCastBet) GetLuckyStar() bool {
	if x != nil && x.LuckyStar != nil {
		return *x.LuckyStar
	}
	return false
}

//用户下注数组
type LHD_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*LHD_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *LHD_BetArr) Reset() {
	*x = LHD_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BetArr) ProtoMessage() {}

func (x *LHD_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BetArr.ProtoReflect.Descriptor instead.
func (*LHD_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{5}
}

func (x *LHD_BetArr) GetBetArr() []*LHD_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用户下注数据结构
type LHD_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *int32 `protobuf:"varint,1,req,name=BetType" json:"BetType,omitempty"`
	Count   *int32 `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
}

func (x *LHD_Bet) Reset() {
	*x = LHD_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Bet) ProtoMessage() {}

func (x *LHD_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Bet.ProtoReflect.Descriptor instead.
func (*LHD_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{6}
}

func (x *LHD_Bet) GetBetType() int32 {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return 0
}

func (x *LHD_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//龙虎斗下注的结果
type LHD_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32     `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`      //0下注成功，-1用户金额不足，-2下注的类型未找到，-3庄家不能下注，-4此类下注已达到上限，-5不可同时下注龙与虎，-6用户金额小於下注限制
	Money  *int64     `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`  //用户的钱，下注以后的金额。
	Type   *int32     `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`    //下注超过限制的下注类型
	BetArr []*LHD_Bet `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"` //用户下注数据
}

func (x *LHD_BetRet) Reset() {
	*x = LHD_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BetRet) ProtoMessage() {}

func (x *LHD_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BetRet.ProtoReflect.Descriptor instead.
func (*LHD_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{7}
}

func (x *LHD_BetRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *LHD_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *LHD_BetRet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LHD_BetRet) GetBetArr() []*LHD_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//游戏扑克结果
type LHD_GameResultPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poker   []*LHD_Poker `protobuf:"bytes,1,rep,name=Poker" json:"Poker,omitempty"`      //第一张为龙牌，第二张为虎牌
	RoundID *int32       `protobuf:"varint,2,req,name=RoundID" json:"RoundID,omitempty"` //局數
}

func (x *LHD_GameResultPoker) Reset() {
	*x = LHD_GameResultPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_GameResultPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_GameResultPoker) ProtoMessage() {}

func (x *LHD_GameResultPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_GameResultPoker.ProtoReflect.Descriptor instead.
func (*LHD_GameResultPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{8}
}

func (x *LHD_GameResultPoker) GetPoker() []*LHD_Poker {
	if x != nil {
		return x.Poker
	}
	return nil
}

func (x *LHD_GameResultPoker) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

//游戏用户赢钱结果
type LHD_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin    *int64              `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`
	SelfWin      *int64              `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	WinUserInfo  []*LHD_WinUerInfo   `protobuf:"bytes,3,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"`   //赢钱前三名的人信息
	StageUerInfo []*LHD_StageUerInfo `protobuf:"bytes,4,rep,name=StageUerInfo" json:"StageUerInfo,omitempty"` //標誌玩家赢钱信息
}

func (x *LHD_GameResultUserMoney) Reset() {
	*x = LHD_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_GameResultUserMoney) ProtoMessage() {}

func (x *LHD_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*LHD_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{9}
}

func (x *LHD_GameResultUserMoney) GetZhuangWin() int64 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *LHD_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *LHD_GameResultUserMoney) GetWinUserInfo() []*LHD_WinUerInfo {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

func (x *LHD_GameResultUserMoney) GetStageUerInfo() []*LHD_StageUerInfo {
	if x != nil {
		return x.StageUerInfo
	}
	return nil
}

//赢钱玩家信息
type LHD_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *LHD_WinUerInfo) Reset() {
	*x = LHD_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_WinUerInfo) ProtoMessage() {}

func (x *LHD_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_WinUerInfo.ProtoReflect.Descriptor instead.
func (*LHD_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{10}
}

func (x *LHD_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *LHD_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//標誌玩家赢钱信息
type LHD_StageUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Win    *int64 `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *LHD_StageUerInfo) Reset() {
	*x = LHD_StageUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_StageUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_StageUerInfo) ProtoMessage() {}

func (x *LHD_StageUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_StageUerInfo.ProtoReflect.Descriptor instead.
func (*LHD_StageUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{11}
}

func (x *LHD_StageUerInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_StageUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//上庄结果
type LHD_ShangzhuangRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"` //值为1时下庄成功，值为0表示上庄成功，值为-1时上庄失败资金不足，值为-2时已经在上庄列表中。
}

func (x *LHD_ShangzhuangRet) Reset() {
	*x = LHD_ShangzhuangRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ShangzhuangRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ShangzhuangRet) ProtoMessage() {}

func (x *LHD_ShangzhuangRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ShangzhuangRet.ProtoReflect.Descriptor instead.
func (*LHD_ShangzhuangRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{12}
}

func (x *LHD_ShangzhuangRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//是否上庄
type LHD_ShangZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShangZhuang *bool `protobuf:"varint,1,req,name=IsShangZhuang" json:"IsShangZhuang,omitempty"`
}

func (x *LHD_ShangZhuang) Reset() {
	*x = LHD_ShangZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ShangZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ShangZhuang) ProtoMessage() {}

func (x *LHD_ShangZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ShangZhuang.ProtoReflect.Descriptor instead.
func (*LHD_ShangZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{13}
}

func (x *LHD_ShangZhuang) GetIsShangZhuang() bool {
	if x != nil && x.IsShangZhuang != nil {
		return *x.IsShangZhuang
	}
	return false
}

//庄家信息
type LHD_ZhuangInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32      `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	LastTurn *int32      `protobuf:"varint,2,req,name=LastTurn" json:"LastTurn,omitempty"`
	UserInfo []*GameUser `protobuf:"bytes,3,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *LHD_ZhuangInfo) Reset() {
	*x = LHD_ZhuangInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ZhuangInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ZhuangInfo) ProtoMessage() {}

func (x *LHD_ZhuangInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ZhuangInfo.ProtoReflect.Descriptor instead.
func (*LHD_ZhuangInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{14}
}

func (x *LHD_ZhuangInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_ZhuangInfo) GetLastTurn() int32 {
	if x != nil && x.LastTurn != nil {
		return *x.LastTurn
	}
	return 0
}

func (x *LHD_ZhuangInfo) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//上庄列表
type LHD_ZhuangList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*GameUser `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *LHD_ZhuangList) Reset() {
	*x = LHD_ZhuangList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ZhuangList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ZhuangList) ProtoMessage() {}

func (x *LHD_ZhuangList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ZhuangList.ProtoReflect.Descriptor instead.
func (*LHD_ZhuangList) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{15}
}

func (x *LHD_ZhuangList) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//清除结果回应消息
type LHD_BetClearRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` //当前的钱
	Ret   *int32 `protobuf:"varint,2,req,name=Ret" json:"Ret,omitempty"`     //清除结果-1，清理失败，达到清理上限，0清理成功
}

func (x *LHD_BetClearRet) Reset() {
	*x = LHD_BetClearRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BetClearRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BetClearRet) ProtoMessage() {}

func (x *LHD_BetClearRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BetClearRet.ProtoReflect.Descriptor instead.
func (*LHD_BetClearRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{16}
}

func (x *LHD_BetClearRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *LHD_BetClearRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//大富豪列表消息
type LHD_RichestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichestList []*LHD_Richest `protobuf:"bytes,1,rep,name=RichestList" json:"RichestList,omitempty"` //富豪的排行榜
}

func (x *LHD_RichestList) Reset() {
	*x = LHD_RichestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_RichestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_RichestList) ProtoMessage() {}

func (x *LHD_RichestList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_RichestList.ProtoReflect.Descriptor instead.
func (*LHD_RichestList) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{17}
}

func (x *LHD_RichestList) GetRichestList() []*LHD_Richest {
	if x != nil {
		return x.RichestList
	}
	return nil
}

//大富豪的玩家資訊
type LHD_Richest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking       *int32 `protobuf:"varint,1,req,name=Ranking" json:"Ranking,omitempty"`             //富豪排名
	UserID        *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`               //富豪ID
	UserFaceID    *int32 `protobuf:"varint,3,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //富豪頭像ID
	Money         *int64 `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`                 //富豪当前身上的钱
	AvatarFrameID *int32 `protobuf:"varint,5,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
	LastBetTotal  *int64 `protobuf:"varint,6,opt,name=LastBetTotal" json:"LastBetTotal,omitempty"`   //上局下注總量
}

func (x *LHD_Richest) Reset() {
	*x = LHD_Richest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Richest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Richest) ProtoMessage() {}

func (x *LHD_Richest) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Richest.ProtoReflect.Descriptor instead.
func (*LHD_Richest) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{18}
}

func (x *LHD_Richest) GetRanking() int32 {
	if x != nil && x.Ranking != nil {
		return *x.Ranking
	}
	return 0
}

func (x *LHD_Richest) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_Richest) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *LHD_Richest) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *LHD_Richest) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

func (x *LHD_Richest) GetLastBetTotal() int64 {
	if x != nil && x.LastBetTotal != nil {
		return *x.LastBetTotal
	}
	return 0
}

//幸運星玩家消息
type LHD_LuckyStarList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuckyStarList []*LHD_LuckyStar `protobuf:"bytes,1,rep,name=LuckyStarList" json:"LuckyStarList,omitempty"` //幸運星玩家資訊
}

func (x *LHD_LuckyStarList) Reset() {
	*x = LHD_LuckyStarList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_LuckyStarList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_LuckyStarList) ProtoMessage() {}

func (x *LHD_LuckyStarList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_LuckyStarList.ProtoReflect.Descriptor instead.
func (*LHD_LuckyStarList) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{19}
}

func (x *LHD_LuckyStarList) GetLuckyStarList() []*LHD_LuckyStar {
	if x != nil {
		return x.LuckyStarList
	}
	return nil
}

//幸運星玩家資訊
type LHD_LuckyStar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`               //幸運星ID
	UserFaceID    *int32 `protobuf:"varint,2,req,name=UserFaceID" json:"UserFaceID,omitempty"`       //幸運星頭像ID
	AvatarFrameID *int32 `protobuf:"varint,3,opt,name=AvatarFrameID" json:"AvatarFrameID,omitempty"` // VIP頭框像ID
}

func (x *LHD_LuckyStar) Reset() {
	*x = LHD_LuckyStar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_LuckyStar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_LuckyStar) ProtoMessage() {}

func (x *LHD_LuckyStar) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_LuckyStar.ProtoReflect.Descriptor instead.
func (*LHD_LuckyStar) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{20}
}

func (x *LHD_LuckyStar) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_LuckyStar) GetUserFaceID() int32 {
	if x != nil && x.UserFaceID != nil {
		return *x.UserFaceID
	}
	return 0
}

func (x *LHD_LuckyStar) GetAvatarFrameID() int32 {
	if x != nil && x.AvatarFrameID != nil {
		return *x.AvatarFrameID
	}
	return 0
}

//龍虎鬥本局局數
type LHD_RoundID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LongWin     *int32 `protobuf:"varint,1,req,name=LongWin" json:"LongWin,omitempty"`         //龍贏局數
	HeWin       *int32 `protobuf:"varint,2,req,name=HeWin" json:"HeWin,omitempty"`             //和局
	HuWin       *int32 `protobuf:"varint,3,req,name=HuWin" json:"HuWin,omitempty"`             //虎贏局數
	RoundID     *int32 `protobuf:"varint,4,req,name=RoundID" json:"RoundID,omitempty"`         //局數
	CutPokerNum *int32 `protobuf:"varint,5,opt,name=CutPokerNum" json:"CutPokerNum,omitempty"` //切牌後剩餘總數
}

func (x *LHD_RoundID) Reset() {
	*x = LHD_RoundID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_RoundID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_RoundID) ProtoMessage() {}

func (x *LHD_RoundID) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_RoundID.ProtoReflect.Descriptor instead.
func (*LHD_RoundID) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{21}
}

func (x *LHD_RoundID) GetLongWin() int32 {
	if x != nil && x.LongWin != nil {
		return *x.LongWin
	}
	return 0
}

func (x *LHD_RoundID) GetHeWin() int32 {
	if x != nil && x.HeWin != nil {
		return *x.HeWin
	}
	return 0
}

func (x *LHD_RoundID) GetHuWin() int32 {
	if x != nil && x.HuWin != nil {
		return *x.HuWin
	}
	return 0
}

func (x *LHD_RoundID) GetRoundID() int32 {
	if x != nil && x.RoundID != nil {
		return *x.RoundID
	}
	return 0
}

func (x *LHD_RoundID) GetCutPokerNum() int32 {
	if x != nil && x.CutPokerNum != nil {
		return *x.CutPokerNum
	}
	return 0
}

//牌局編號
type LHD_GameNoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo *string `protobuf:"bytes,1,req,name=GameNo" json:"GameNo,omitempty"`
}

func (x *LHD_GameNoInfo) Reset() {
	*x = LHD_GameNoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_GameNoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_GameNoInfo) ProtoMessage() {}

func (x *LHD_GameNoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_GameNoInfo.ProtoReflect.Descriptor instead.
func (*LHD_GameNoInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{22}
}

func (x *LHD_GameNoInfo) GetGameNo() string {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return ""
}

//下注限制列表消息
type LHD_BetRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Long *LHD_Range `protobuf:"bytes,1,req,name=Long" json:"Long,omitempty"` //龍
	Hu   *LHD_Range `protobuf:"bytes,2,req,name=Hu" json:"Hu,omitempty"`     //虎
	He   *LHD_Range `protobuf:"bytes,3,req,name=He" json:"He,omitempty"`     //和
}

func (x *LHD_BetRangeList) Reset() {
	*x = LHD_BetRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BetRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BetRangeList) ProtoMessage() {}

func (x *LHD_BetRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BetRangeList.ProtoReflect.Descriptor instead.
func (*LHD_BetRangeList) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{23}
}

func (x *LHD_BetRangeList) GetLong() *LHD_Range {
	if x != nil {
		return x.Long
	}
	return nil
}

func (x *LHD_BetRangeList) GetHu() *LHD_Range {
	if x != nil {
		return x.Hu
	}
	return nil
}

func (x *LHD_BetRangeList) GetHe() *LHD_Range {
	if x != nil {
		return x.He
	}
	return nil
}

type LHD_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *int32 `protobuf:"varint,1,req,name=Min" json:"Min,omitempty"`
	Max *int32 `protobuf:"varint,2,req,name=Max" json:"Max,omitempty"`
}

func (x *LHD_Range) Reset() {
	*x = LHD_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Range) ProtoMessage() {}

func (x *LHD_Range) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Range.ProtoReflect.Descriptor instead.
func (*LHD_Range) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{24}
}

func (x *LHD_Range) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *LHD_Range) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

var File_GameMsg_LHD_proto protoreflect.FileDescriptor

var file_GameMsg_LHD_proto_rawDesc = []byte{
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x4c, 0x48, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x48, 0x74,
	0x74, 0x70, 0x4d, 0x73, 0x67, 0x5f, 0x4c, 0x48, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9f, 0x01, 0x0a, 0x0b, 0x4c, 0x48, 0x44, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x5a, 0x68,
	0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x42, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x34, 0x0a, 0x08, 0x4c, 0x48, 0x44, 0x5f, 0x53, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0f, 0x4c, 0x48, 0x44, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73,
	0x0a, 0x13, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x44, 0x0a,
	0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x52, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74,
	0x41, 0x72, 0x72, 0x22, 0x5a, 0x0a, 0x10, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x22,
	0x37, 0x0a, 0x0a, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x29, 0x0a,
	0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74,
	0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x39, 0x0a, 0x07, 0x4c, 0x48, 0x44, 0x5f,
	0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x0a, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74,
	0x52, 0x06, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x5a, 0x0a, 0x13, 0x4c, 0x48, 0x44, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x4c, 0x48, 0x44, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x57, 0x69, 0x6e,
	0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x0e, 0x4c, 0x48, 0x44, 0x5f, 0x57, 0x69, 0x6e, 0x55,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x03, 0x57, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x10, 0x4c, 0x48, 0x44, 0x5f, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57,
	0x69, 0x6e, 0x22, 0x26, 0x0a, 0x12, 0x4c, 0x48, 0x44, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x7a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x0f, 0x4c, 0x48,
	0x44, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x22, 0x74, 0x0a, 0x0e, 0x4c, 0x48, 0x44, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x0e, 0x4c, 0x48, 0x44,
	0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x0f, 0x4c,
	0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x0f, 0x4c, 0x48, 0x44, 0x5f, 0x52, 0x69,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x52, 0x69, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x52, 0x69,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4c, 0x48, 0x44, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x52, 0x0a, 0x11, 0x4c, 0x48, 0x44, 0x5f, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x52, 0x0d, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x0d, 0x4c, 0x48, 0x44, 0x5f,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x4c, 0x48, 0x44, 0x5f,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x6e, 0x67, 0x57,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x6f, 0x6e, 0x67, 0x57, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x65, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x48, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x75, 0x57, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x48, 0x75, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x74, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x75,
	0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x28, 0x0a, 0x0e, 0x4c, 0x48, 0x44,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x4e, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x4c, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x23, 0x0a, 0x02, 0x48, 0x75, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x02, 0x48, 0x75, 0x12, 0x23, 0x0a, 0x02, 0x48, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48,
	0x44, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x02, 0x48, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x4c,
	0x48, 0x44, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_LHD_proto_rawDescOnce sync.Once
	file_GameMsg_LHD_proto_rawDescData = file_GameMsg_LHD_proto_rawDesc
)

func file_GameMsg_LHD_proto_rawDescGZIP() []byte {
	file_GameMsg_LHD_proto_rawDescOnce.Do(func() {
		file_GameMsg_LHD_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_LHD_proto_rawDescData)
	})
	return file_GameMsg_LHD_proto_rawDescData
}

var file_GameMsg_LHD_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_GameMsg_LHD_proto_goTypes = []interface{}{
	(*LHD_Setting)(nil),             // 0: netproto.LHD_Setting
	(*LHD_Sate)(nil),                // 1: netproto.LHD_Sate
	(*LHD_UserBetInfo)(nil),         // 2: netproto.LHD_UserBetInfo
	(*LHD_BroadCastBetArr)(nil),     // 3: netproto.LHD_BroadCastBetArr
	(*LHD_BroadCastBet)(nil),        // 4: netproto.LHD_BroadCastBet
	(*LHD_BetArr)(nil),              // 5: netproto.LHD_BetArr
	(*LHD_Bet)(nil),                 // 6: netproto.LHD_Bet
	(*LHD_BetRet)(nil),              // 7: netproto.LHD_BetRet
	(*LHD_GameResultPoker)(nil),     // 8: netproto.LHD_GameResultPoker
	(*LHD_GameResultUserMoney)(nil), // 9: netproto.LHD_GameResultUserMoney
	(*LHD_WinUerInfo)(nil),          // 10: netproto.LHD_WinUerInfo
	(*LHD_StageUerInfo)(nil),        // 11: netproto.LHD_StageUerInfo
	(*LHD_ShangzhuangRet)(nil),      // 12: netproto.LHD_ShangzhuangRet
	(*LHD_ShangZhuang)(nil),         // 13: netproto.LHD_ShangZhuang
	(*LHD_ZhuangInfo)(nil),          // 14: netproto.LHD_ZhuangInfo
	(*LHD_ZhuangList)(nil),          // 15: netproto.LHD_ZhuangList
	(*LHD_BetClearRet)(nil),         // 16: netproto.LHD_BetClearRet
	(*LHD_RichestList)(nil),         // 17: netproto.LHD_RichestList
	(*LHD_Richest)(nil),             // 18: netproto.LHD_Richest
	(*LHD_LuckyStarList)(nil),       // 19: netproto.LHD_LuckyStarList
	(*LHD_LuckyStar)(nil),           // 20: netproto.LHD_LuckyStar
	(*LHD_RoundID)(nil),             // 21: netproto.LHD_RoundID
	(*LHD_GameNoInfo)(nil),          // 22: netproto.LHD_GameNoInfo
	(*LHD_BetRangeList)(nil),        // 23: netproto.LHD_BetRangeList
	(*LHD_Range)(nil),               // 24: netproto.LHD_Range
	(*LHD_Poker)(nil),               // 25: netproto.LHD_Poker
	(*GameUser)(nil),                // 26: netproto.GameUser
}
var file_GameMsg_LHD_proto_depIdxs = []int32{
	23, // 0: netproto.LHD_Setting.BetRange:type_name -> netproto.LHD_BetRangeList
	4,  // 1: netproto.LHD_UserBetInfo.BetInfo:type_name -> netproto.LHD_BroadCastBet
	4,  // 2: netproto.LHD_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.LHD_BroadCastBet
	6,  // 3: netproto.LHD_BetArr.BetArr:type_name -> netproto.LHD_Bet
	6,  // 4: netproto.LHD_BetRet.BetArr:type_name -> netproto.LHD_Bet
	25, // 5: netproto.LHD_GameResultPoker.Poker:type_name -> netproto.LHD_Poker
	10, // 6: netproto.LHD_GameResultUserMoney.WinUserInfo:type_name -> netproto.LHD_WinUerInfo
	11, // 7: netproto.LHD_GameResultUserMoney.StageUerInfo:type_name -> netproto.LHD_StageUerInfo
	26, // 8: netproto.LHD_ZhuangInfo.UserInfo:type_name -> netproto.GameUser
	26, // 9: netproto.LHD_ZhuangList.UserInfo:type_name -> netproto.GameUser
	18, // 10: netproto.LHD_RichestList.RichestList:type_name -> netproto.LHD_Richest
	20, // 11: netproto.LHD_LuckyStarList.LuckyStarList:type_name -> netproto.LHD_LuckyStar
	24, // 12: netproto.LHD_BetRangeList.Long:type_name -> netproto.LHD_Range
	24, // 13: netproto.LHD_BetRangeList.Hu:type_name -> netproto.LHD_Range
	24, // 14: netproto.LHD_BetRangeList.He:type_name -> netproto.LHD_Range
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_GameMsg_LHD_proto_init() }
func file_GameMsg_LHD_proto_init() {
	if File_GameMsg_LHD_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	file_HttpMsg_LHD_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_LHD_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_GameResultPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_StageUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ShangzhuangRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ShangZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ZhuangInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ZhuangList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BetClearRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_RichestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Richest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_LuckyStarList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_LuckyStar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_RoundID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_GameNoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BetRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_LHD_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_LHD_proto_goTypes,
		DependencyIndexes: file_GameMsg_LHD_proto_depIdxs,
		MessageInfos:      file_GameMsg_LHD_proto_msgTypes,
	}.Build()
	File_GameMsg_LHD_proto = out.File
	file_GameMsg_LHD_proto_rawDesc = nil
	file_GameMsg_LHD_proto_goTypes = nil
	file_GameMsg_LHD_proto_depIdxs = nil
}
